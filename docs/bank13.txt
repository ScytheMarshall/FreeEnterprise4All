.include "header.inc"

.bank 19 slot 1
.section "Bank" namespace "bank13"

; This section of the file is data and has been excluded from this copy.

; _special_animate_ending_credits ($13:D610)
;
; Animates the credits portion of the ending. This routine will never return.
_special_animate_ending_credits:
    REP #FLAG_P_INDEX                                                           ; $13D610 | Switch to 16-bit index register mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D612 | Switch to 8-bit accumulator mode.
    PHP                                                                         ; $13D614 |\
    PHB                                                                         ; $13D615 | | Preserve the processor flags, data bank and direct registers.
    PHD                                                                         ; $13D616 |/
    LDA #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D617 |\ Set the background mode to credits.
    STA r_special_background_mode.l & $FFFF                                     ; $13D619 |/
    LDA #<2592                                                                  ; $13D61D |\
    STA r_special_post_fade_delay.lo.l & $FFFF                                  ; $13D61F | | Set the post fade delay to 2592 frames.
    LDA #>2592                                                                  ; $13D623 | |
    STA r_special_post_fade_delay.hi.l & $FFFF                                  ; $13D625 |/
    BRA _special_animate_ending_common                                          ; $13D629 | Branch to animate the sequence.

; _special_animate_ending_moon ($13:D62B)
;
; Animates the moon portion of the ending, in which the second moon flies away
; from the earth.
_special_animate_ending_moon:
    REP #FLAG_P_INDEX                                                           ; $13D62B | Switch to 16-bit index register mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D62D | Switch to 8-bit accumulator mode.
    PHP                                                                         ; $13D62F |\
    PHB                                                                         ; $13D630 | | Preserve the processor flags, data bank and direct registers.
    PHD                                                                         ; $13D631 |/
    LDX #8.w                                                                    ; $13D632 |\
    STX r_special_planet_departing_moon_offset_x.w                              ; $13D635 | | Set the departing moon offset to 8, -14.
    LDX #-14.w                                                                  ; $13D638 | |
    STX r_special_planet_departing_moon_offset_y.w                              ; $13D63B |/
    LDA #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13D63E |\ Set the background mode to moon.
    STA r_special_background_mode.l & $FFFF                                     ; $13D640 |/
    LDA #<2688                                                                  ; $13D644 |\
    STA r_special_post_fade_delay.lo.l & $FFFF                                  ; $13D646 | | Set the post fade delay to 2688 frames.
    LDA #>2688                                                                  ; $13D64A | |
    STA r_special_post_fade_delay.hi.l & $FFFF                                  ; $13D64C |/
    BRA _special_animate_ending_common                                          ; $13D650 | Branch to animate the sequence.

; special_animate_ending_legend ($13:D652)
;
; Animates the display of the Mysidian legend during the ending sequence. Falls
; through to the next routine to handle the actual animation.
special_animate_ending_legend:
    REP #FLAG_P_INDEX                                                           ; $13D652 | Set 16-bit index register mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D654 | Set 8-bit accumulator mode.
    PHP                                                                         ; $13D656 |\
    PHB                                                                         ; $13D657 | | Preserve the processor flags, data bank and direct registers.
    PHD                                                                         ; $13D658 |/
    LDA #SPECIAL_BACKGROUND_MODE_LEGEND.b                                       ; $13D659 |\ Set the background mode to legend.
    STA r_special_background_mode.l & $FFFF                                     ; $13D65B |/
    LDA #<5088                                                                  ; $13D65F |\
    STA r_special_post_fade_delay.lo.l & $FFFF                                  ; $13D661 | | Initialize the post fade delay to 5088 frames (to allow time for
    LDA #>5088                                                                  ; $13D665 | | the legend to display).
    STA r_special_post_fade_delay.hi.l & $FFFF                                  ; $13D667 |/

; _special_animate_ending_common ($13:D66B)
;
; Animates one of the three ending sequence animations, depending on the value
; of $64. This routine should be jumped to or branched to, and it expects the
; the processor flags register, the data bank register and the direct register
; to have been pushed to the stack, in that order.
_special_animate_ending_common:
    JSR _special_init                                                           ; $13D66B | Do basic initialization.
    JSR _special_init_oam                                                       ; $13D66E | Initialize the OAM.
    JSR _special_planet_init                                                    ; $13D671 | Initialize the planet-specific data structures.
    JSR _special_planet_load_earth_tiles                                        ; $13D674 | Load the earth tiles and draw the star background.
    JSR _special_load_tiles_to_vram                                             ; $13D677 | Load either the dialog tiles or moon tiles depending on the mode.
    JSR _special_copy_the_end_tiles_to_vram                                     ; $13D67A | Copy the "The End" tiles to VRAM if the mode is credits.
    JSR _special_load_background_tilemap                                        ; $13D67D | Loads the appropriate background tilemap for the background mode.
    STZ <r_special_star_field_updated                                           ; $13D680 | Reset the star field updated flag.
    LDX #r_special_earth_tiles.w                                                ; $13D682 |\ Set the earth tiles pointer to $8000.
    STX <r_special_earth_tiles_ptr                                              ; $13D685 |/
    TDC                                                                         ; $13D687 |\
    TAX                                                                         ; $13D688 | | Set the BG1 vertical scroll value to zero.
    STX <r_special_bg1_scroll_vertical                                          ; $13D689 |/
    LDA <r_special_background_mode                                              ; $13D68B |\
    CMP #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13D68D | | If the background mode is set to legend, generates the rotating
    BEQ ++                                                                      ; $13D68F | | earth frames and initialize the HDMA.
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D691 | |
    BEQ +                                                                       ; $13D693 | |
    JSR _special_planet_generate_earth_frames                                   ; $13D695 | |
    JSR _special_init_hdma                                                      ; $13D698 | |
    BRA ++                                                                      ; $13D69B |/
+   LDX #80.w                                                                   ; $13D69D |\
    STX <r_special_star_field_entries                                           ; $13D6A0 | | If the background mode is set to credits, initialize the star
    JSR _special_load_star_field_tiles                                          ; $13D6A2 | | field and initialize HDMA.
    JSR _special_init_star_field                                                ; $13D6A5 | |
    JSR _special_init_hdma                                                      ; $13D6A8 |/
++  STZ r_special_vram_copy_disable_primary.w                                   ; $13D6AB |\ Enable the primary VRAM copy and disable the secondary VRAM copy.
    STZ r_special_vram_copy_enable_secondary.w                                  ; $13D6AE |/
    STZ r_special_ppu_inidisp.w                                                 ; $13D6B1 | Set the PPU brightness to zero.
    INC <r_unknown_0063                                                         ; $13D6B4 | TODO
-   LDA reg_cpu_rdnmi.l                                                         ; $13D6B6 |\ Loop until vblank occurs.
    BPL -                                                                       ; $13D6BA |/
    LDA #%00010001.b                                                            ; $13D6BC |\
    STA r_special_ppu_tm.w                                                      ; $13D6BE | | Set the main screen to BG1 and sprites.
    STA reg_ppu_tm.l                                                            ; $13D6C1 |/
    LDA #%10000001.b                                                            ; $13D6C5 |\ Enable NMI and automatic joypad reading.
    STA reg_cpu_nmitimen.l                                                      ; $13D6C7 |/
    JSR _special_slow_ppu_fade_in                                               ; $13D6CB | Slowly fade the PPU in.
    TDC                                                                         ; $13D6CE |\
    TAX                                                                         ; $13D6CF | | Wait for the configured number of frames.
    STX r_special_post_fade_delay_counter.w                                     ; $13D6D0 | |
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13D6D3 | | NOTE: During this time, the bulk of the animation, including
    LDX r_special_post_fade_delay_counter.w                                     ; $13D6D6 | |       updating the scroll registers and handling the animations is
    INX                                                                         ; $13D6D9 | |       taken care of by the NMI handler. The result is that this
    STX r_special_post_fade_delay_counter.w                                     ; $13D6DA | |       delay has to be manually configured.
    CPX r_special_post_fade_delay.w                                             ; $13D6DD | |
    BCC -                                                                       ; $13D6E0 |/
    LDA <r_special_background_mode                                              ; $13D6E2 |\
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D6E4 | | If this is the credits, jump to the final ending sequence.
    BNE +                                                                       ; $13D6E6 | |
    JMP _special_animate_logo_rotation_and_the_end                              ; $13D6E8 |/
+   JSR _special_slow_ppu_fade_out                                              ; $13D6EB | Otherwise, slowly fade the PPU out.
    TDC                                                                         ; $13D6EE |\ Disable NMI and automatic joypad reading.
    STA reg_cpu_nmitimen.l                                                      ; $13D6EF |/
    STA reg_cpu_mdmaen.l                                                        ; $13D6F3 |\ Disable DMA and HDMA.
    STA reg_cpu_hdmaen.l                                                        ; $13D6F7 |/
    LDA #%10000000.b                                                            ; $13D6FB |\ Enable forced blanking on the PPU.
    STA reg_ppu_inidisp.l                                                       ; $13D6FD |/
    PLD                                                                         ; $13D701 |\
    PLB                                                                         ; $13D702 | | Restore the direct, data bank and processor flag registers.
    PLP                                                                         ; $13D703 |/
    RTL                                                                         ; $13D704

; _special_slow_ppu_fade_out ($13:D705)
;
; Slowly fades the PPU out, specifically decrementing the brightness by one step
; every 16 frames, which results in the total fade taking 256 frames.
_special_slow_ppu_fade_out:
    STZ <r_special_nmi_wait_counter                                             ; $13D705 | Initialize the counter to zero.
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13D707 |\
    INC <r_special_nmi_wait_counter                                             ; $13D70A | | Wait for the next frame 16 times.
    LDA <r_special_nmi_wait_counter                                             ; $13D70C | |
    AND #%00001111.b                                                            ; $13D70E | |
    BNE -                                                                       ; $13D710 |/
    DEC r_special_ppu_inidisp.w                                                 ; $13D712 |\ Decrement the brightness and loop until it reaches zero.
    BNE -                                                                       ; $13D715 |/
    RTS                                                                         ; $13D717

; _special_slow_ppu_fade_in ($13:D718)
;
; Slowly fades the PPU in, specifically incrementing the brightness by one step
; every 16 frames, which results in the total fade taking 256 frames.
_special_slow_ppu_fade_in:
    STZ <r_special_nmi_wait_counter                                             ; $13D718 | Initialize the counter to zero.
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13D71A |\
    INC <r_special_nmi_wait_counter                                             ; $13D71D | | Wait until sixteen frames have passed.
    LDA <r_special_nmi_wait_counter                                             ; $13D71F | |
    AND #%00001111.b                                                            ; $13D721 | |
    BNE -                                                                       ; $13D723 |/
    INC r_special_ppu_inidisp.w                                                 ; $13D725 |\
    LDA r_special_ppu_inidisp.w                                                 ; $13D728 | | Increment the PPU brightness and loop until it reaches maximum.
    CMP #%00001111.b                                                            ; $13D72B | |
    BNE -                                                                       ; $13D72D |/
    RTS                                                                         ; $13D72F

; _special_copy_the_end_tiles_to_vram ($13:D730)
;
; Copies the "The End" tiles to VRAM if the background mode is currently set to
; credits. Additionally sets the third color of the first palette to red (for
; the Square logo).
_special_copy_the_end_tiles_to_vram:
    LDA <r_special_background_mode                                              ; $13D730 |\
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D732 | | Skip this function unless the background mode is credits.
    BNE +                                                                       ; $13D734 |/
    LDX #$001B.w                                                                ; $13D736 |\ Set the third color on the first palette to 27, 0, 0.
    STX r_special_cgram_data.1.color3.w                                         ; $13D739 |/
    PHB                                                                         ; $13D73C |\
    TDC                                                                         ; $13D73D | | Preserve the existing data bank register and set it to zero.
    PHA                                                                         ; $13D73E | |
    PLB                                                                         ; $13D73F |/
    LDX #$3000.w                                                                ; $13D740 |\ Set the VRAM address to $3000.
    STX reg_ppu_vmadd.w                                                         ; $13D743 |/
    TDC                                                                         ; $13D746 |\ Initialize the X register to zero.
    TAX                                                                         ; $13D747 |/
-   LDA tiles_the_end_data.l,X                                                  ; $13D748 |\
    PHA                                                                         ; $13D74C | | Set the first pixel from the lower four bits of the read byte.
    AND #%00001111.b                                                            ; $13D74D | |
    STA reg_ppu_vmdatah_write.w                                                 ; $13D74F |/
    PLA                                                                         ; $13D752 |\
    AND #%11110000.b                                                            ; $13D753 | | Set the second pixel from the upper four bits of the byte.
    LSR A                                                                       ; $13D755 | |
    LSR A                                                                       ; $13D756 | |
    LSR A                                                                       ; $13D757 | |
    LSR A                                                                       ; $13D758 | |
    STA reg_ppu_vmdatah_write.w                                                 ; $13D759 |/
    INX                                                                         ; $13D75C |\
    CPX #_sizeof_tiles_the_end_data.w                                           ; $13D75D | | Loop until all the tiles are loaded into VRAM.
    BNE -                                                                       ; $13D760 |/
    PLB                                                                         ; $13D762
+   RTS                                                                         ; $13D763

; _special_load_tiles_to_vram ($13:D764)
;
; Loads the required tiles to VRAM. For the credits and legend background modes,
; loads the dialog tiles. For the moon mode, loads the moon tiles.
_special_load_tiles_to_vram:
    LDX #$0000.w                                                                ; $13D764 |\
    LDY #$8000.w                                                                ; $13D767 | | Zero VRAM from $0000 to $3FFF.
    JSR _special_zero_vram                                                      ; $13D76A |/
    PHB                                                                         ; $13D76D |\
    TDC                                                                         ; $13D76E | | Preserve the data bank register and set it to $00.
    PHA                                                                         ; $13D76F | |
    PLB                                                                         ; $13D770 |/
    LDX #$0000.w                                                                ; $13D771 |\ Set the VRAM address to $0000.
    STX reg_ppu_vmadd.w                                                         ; $13D774 |/
    STZ <r_special_generic_tmp_3                                                ; $13D777 |\
    LDA <r_special_background_mode                                              ; $13D779 | | Set a temporary variable to 64 if the background mode is set to
    CMP #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13D77B | | credits, and to zero otherwise. Branch to the moon code if the
    BEQ @moon                                                                   ; $13D77D | | mode is set to moon.
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D77F | |
    BNE +                                                                       ; $13D781 | | TODO: This value doesn't seem to be used anywhere in this routine.
    LDA #64.b                                                                   ; $13D783 | |       Is it completely pointless?
    STA <r_special_generic_tmp_3                                                ; $13D785 |/
+   TDC                                                                         ; $13D787 |\ Initialize the X register to zero.
    TAX                                                                         ; $13D788 |/
--  LDA bank0A.dialog_tile_data.l + 1,X                                         ; $13D789 |\ Read the next byte from the graphics data.
    STA <r_special_generic_tmp_1.lo                                             ; $13D78D |/
    LDY #8.w                                                                    ; $13D78F |\
-   ASL <r_special_generic_tmp_1.lo                                             ; $13D792 | | Loop through the eight bits of the bitplane, expanding each to an
    ROL A                                                                       ; $13D794 | | entire byte to correspond to the mode 7 data.
    AND #%00000001.b                                                            ; $13D795 | |
    STA reg_ppu_vmdatah_write.w                                                 ; $13D797 | |
    DEY                                                                         ; $13D79A | |
    BNE -                                                                       ; $13D79B |/
    INX                                                                         ; $13D79D |\ Increment the X register twice to move to the next bitplane 0 byte,
    INX                                                                         ; $13D79E |/ ignoring the bitplane 1 byte.
    CPX #bank0A._sizeof_dialog_tile_data.w                                      ; $13D79F |\ Loop until all the dialog tiles have been copied to VRAM.
    BNE --                                                                      ; $13D7A2 |/
    PLB                                                                         ; $13D7A4 |\ Restore the data bank register and return.
    RTS                                                                         ; $13D7A5 |/
@moon:
    LDX #64.w                                                                   ; $13D7A6 |\
    TDC                                                                         ; $13D7A9 | | Write a single blank tile to VRAM.
-   STA reg_ppu_vmdatah_write.w                                                 ; $13D7AA | |
    DEX                                                                         ; $13D7AD | |
    BNE -                                                                       ; $13D7AE |/
    TDC                                                                         ; $13D7B0 |\ Initialize the X register to zero.
    TAX                                                                         ; $13D7B1 |/
-   LDA bank15.tiles_departing_moon_data.l,X                                    ; $13D7B2 |\
    PHA                                                                         ; $13D7B6 | | Read the low four bits of the next byte, set the fifth bit to use
    AND #%00001111.b                                                            ; $13D7B7 | | the second palette, and then store it to VRAM as the next pixel.
    BEQ +                                                                       ; $13D7B9 | |
    ORA #%00010000.b                                                            ; $13D7BB | |
+   STA reg_ppu_vmdatah_write.w                                                 ; $13D7BD |/
    PLA                                                                         ; $13D7C0 |\
    AND #%11110000.b                                                            ; $13D7C1 | | Repeat with the upper four bits, except shifting them to be in the
    BEQ +                                                                       ; $13D7C3 | | lower four bits, and then using the value to set the next pixel.
    LSR A                                                                       ; $13D7C5 | |
    LSR A                                                                       ; $13D7C6 | |
    LSR A                                                                       ; $13D7C7 | |
    LSR A                                                                       ; $13D7C8 | |
    ORA #%00010000.b                                                            ; $13D7C9 | |
+   STA reg_ppu_vmdatah_write.w                                                 ; $13D7CB |/
    INX                                                                         ; $13D7CE |\
    CPX #$0800.w                                                                ; $13D7CF | | Increment the X register and loop until 2048 bytes.
    BNE -                                                                       ; $13D7D2 |/
    PLB                                                                         ; $13D7D4 | Restore the data bank register.
    RTS                                                                         ; $13D7D5

; _special_load_dialog_credits ($13:D7D6)
;
; Loads the dialog data displayed in the credits and stores it in memory.
_special_load_dialog_credits:
    TDC                                                                         ; $13D7D6 |\
    STA r_special_ppu_m7sel.w                                                   ; $13D7D7 | | Configure mode 7 for normal display with screen repetition.
    STA reg_ppu_m7sel.l                                                         ; $13D7DA |/
    TAX                                                                         ; $13D7DE | Initialize the X register to zero.
-   STA r_special_dialog_tilemap_staging.l,X                                    ; $13D7DF |\
    INX                                                                         ; $13D7E3 | | Erase the area of memory used to store the prepared tilemap.
    CPX #_sizeof_r_special_dialog_tilemap_staging.w                             ; $13D7E4 | |
    BNE -                                                                       ; $13D7E7 |/
    LDX #r_special_dialog_tilemap_staging.w                                     ; $13D7E9 |\
    STX r_special_decode_dialog_arg_target_address.w                            ; $13D7EC | | Decode the credits dialog data and store it in memory.
    LDX #special_dialog_credits_data.w                                          ; $13D7EF | |
    STX r_special_decode_dialog_arg_source_address.w                            ; $13D7F2 | |
    LDA #:special_dialog_credits_data.b                                         ; $13D7F5 | |
    STA r_special_decode_dialog_arg_source_bank.w                               ; $13D7F7 | |
    LDA #32.b                                                                   ; $13D7FA | |
    STA r_special_decode_dialog_arg_line_length.w                               ; $13D7FC | |
    JMP _special_decode_dialog                                                  ; $13D7FF |/

; _special_load_background_tilemap ($13:D802)
;
; Given the current background mode in $64, loads the appropriate tilemap for
; that mode to memory. Mode 0, for the legend, loads the legend dialog and
; stores it in the array at $3D19. Mode 1, for the moon, writes the tile numbers
; for the moon to the array at $3D19. Mode 2, for the credits, loads the credits
; dialog and stores it to a staging area at $7E8000.
_special_load_background_tilemap:
    LDA <r_special_background_mode                                              ; $13D802 |\
    CMP #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13D804 | | Branch to the moon code if the background mode is set to moon.
    BEQ ++                                                                      ; $13D806 |/
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13D808 |\
    BNE +                                                                       ; $13D80A | | If the background mode is set to credits, load the credits dialog
    JSR _special_load_dialog_credits                                            ; $13D80C | | and branch to the common code.
    JMP @common                                                                 ; $13D80F |/
+   LDX #r_special_dialog_tilemap_mode_7.w + 5                                  ; $13D812 |\
    STX r_special_decode_dialog_arg_target_address.w                            ; $13D815 | | Otherwise, load the legend dialog and branch to the common code.
    LDX #special_dialog_legend_data.w                                           ; $13D818 | |
    STX r_special_decode_dialog_arg_source_address.w                            ; $13D81B | |
    LDA #:special_dialog_legend_data.b                                          ; $13D81E | |
    STA r_special_decode_dialog_arg_source_bank.w                               ; $13D820 | |
    LDA #128.b                                                                  ; $13D823 | |
    STA r_special_decode_dialog_arg_line_length.w                               ; $13D825 | |
    JSR _special_decode_dialog                                                  ; $13D828 | |
    JMP @common                                                                 ; $13D82B |/
++  TDC                                                                         ; $13D82E |\ Initialize the X register to zero.
    TAX                                                                         ; $13D82F |/
    LDY #r_special_dialog_tilemap_mode_7.w                                      ; $13D830 |\ Store the pointer to the tilemap in a temporary variable.
    STY <r_special_generic_tmp_word                                             ; $13D833 |/
    LDA #6.b                                                                    ; $13D835 |\ Initialize the number of rows to six.
    STA <r_special_generic_tmp_2.lo                                             ; $13D837 |/
    LDA #$01.b                                                                  ; $13D839 |\ Initialize the current tile number to $01.
    STA <r_special_generic_tmp_3                                                ; $13D83B |/
--  TDC                                                                         ; $13D83D |\
    TAY                                                                         ; $13D83E | | Write one row's worth of tile numbers, where the tile number
-   LDA <r_special_generic_tmp_3                                                ; $13D83F | | increments by one each tile.
    STA (<r_special_generic_tmp_word),Y                                         ; $13D841 | |
    INC <r_special_generic_tmp_3                                                ; $13D843 | |
    INY                                                                         ; $13D845 | |
    INX                                                                         ; $13D846 | |
    CPY #5.w                                                                    ; $13D847 | |
    BNE -                                                                       ; $13D84A |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13D84C |\
    LDA <r_special_generic_tmp_word                                             ; $13D84E | | Increment the pointer by 128 to move to the next row.
    CLC                                                                         ; $13D850 | |
    ADC #128.w                                                                  ; $13D851 | |
    STA <r_special_generic_tmp_word                                             ; $13D854 | |
    TDC                                                                         ; $13D856 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D857 |/
    DEC <r_special_generic_tmp_2.lo                                             ; $13D859 |\ Decrement the row count and loop until it reaches zero.
    BNE --                                                                      ; $13D85B |/
@common:
    TDC                                                                         ; $13D85D |\ Set the VRAM increment to 1 by 1 after writing to $2118.
    STA reg_ppu_vmainc.l                                                        ; $13D85E |/
    STA reg_ppu_vmaddl.l                                                        ; $13D862 |\ Set the VRAM address to $0000.
    STA reg_ppu_vmaddh.l                                                        ; $13D866 |/
    TAX                                                                         ; $13D86A |\
-   LDA r_special_dialog_tilemap_mode_7.w,X                                     ; $13D86B | | Copy the tilemap to VRAM.
    STA reg_ppu_vmdatal_write.l                                                 ; $13D86E | |
    INX                                                                         ; $13D872 | |
    CPX #_sizeof_r_special_dialog_tilemap_mode_7.w                              ; $13D873 | |
    BNE -                                                                       ; $13D876 |/
    LDA #%10000000.b                                                            ; $13D878 |\ Set the VRAM increment to 1 by 1 after writing to $2119.
    STA reg_ppu_vmainc.l                                                        ; $13D87A |/
    RTS                                                                         ; $13D87E

; _special_earth_rotate_working ($13:D87F)
;
; Part of the rotating earth frame generation, rotates a single bit out of the
; current row of the working data, indexed by the X register. The bit is rotated
; into the current temporary value at $02.
_special_earth_rotate_working:
    ROL r_special_earth_tiles_working.w + 7,X                                   ; $13D87F |\
    ROL r_special_earth_tiles_working.w + 6,X                                   ; $13D882 | | Rotate one bit out of the working earth tiles and into the
    ROL r_special_earth_tiles_working.w + 5,X                                   ; $13D885 | | temporary value.
    ROL r_special_earth_tiles_working.w + 4,X                                   ; $13D888 | |
    ROL r_special_earth_tiles_working.w + 3,X                                   ; $13D88B | |
    ROL r_special_earth_tiles_working.w + 2,X                                   ; $13D88E | |
    ROL r_special_earth_tiles_working.w + 1,X                                   ; $13D891 | |
    ROL r_special_earth_tiles_working.w + 0,X                                   ; $13D894 | |
    ROL <r_special_generic_tmp_2                                                ; $13D897 |/
    RTS                                                                         ; $13D899

; _special_earth_rotate_into_final ($13:D89A)
;
; Rotates the lowest bit from $02 into the final earth tiles at $2F03, indexed
; by the X register to set the correct row to work on.
_special_earth_rotate_into_final:
    ROR <r_special_generic_tmp_2                                                ; $13D89A |\
    ROR r_special_earth_tiles_final.w + 0,X                                     ; $13D89C | | Rotate the bit from the temporary value into the final data.
    ROR r_special_earth_tiles_final.w + 1,X                                     ; $13D89F | |
    ROR r_special_earth_tiles_final.w + 2,X                                     ; $13D8A2 | |
    ROR r_special_earth_tiles_final.w + 3,X                                     ; $13D8A5 | |
    ROR r_special_earth_tiles_final.w + 4,X                                     ; $13D8A8 | |
    ROR r_special_earth_tiles_final.w + 5,X                                     ; $13D8AB | |
    ROR r_special_earth_tiles_final.w + 6,X                                     ; $13D8AE | |
    ROR r_special_earth_tiles_final.w + 7,X                                     ; $13D8B1 |/
    RTS                                                                         ; $13D8B4

; _special_planet_load_earth_tiles ($13:D8B5)
;
; Loads the base tiles that make up the rotating earth sprite into RAM. The base
; data consists of an 8x4 grid of tiles, arranged in the typical 4 bits per
; pixel format. This tile data is not used directly, but is instead a base for
; a routine that generates 32 frames of animation. To that end, this routine
; does not simply load the tile directly. Instead, it applies a transformation
; to the data such that each block of consecutive 32 bytes has a byte for each
; tile. In other words, the first set of 32 bytes is the first row and bitplane
; of each of the 32 tiles. The next block is for the second bitplane of the
; first row, and so on. The loaded data is written to $2703. Finally, this
; routine also calls a subroutine to draw the background stars.
_special_planet_load_earth_tiles:
    JSR _special_planet_draw_stars                                              ; $13D8B5 | Draw the stars.
    LDX #bank15.tiles_earth_data.w                                              ; $13D8B8 |\
    STX <r_special_earth_tmp_ptr.address                                        ; $13D8BB | | Initialize the pointer to the earth tile data.
    LDA #:bank15.tiles_earth_data.b                                             ; $13D8BD | |
    STA <r_special_earth_tmp_ptr.bank                                           ; $13D8BF |/
    TDC                                                                         ; $13D8C1 |\
    TAX                                                                         ; $13D8C2 | | Initialize the second counter to zero.
    STX <r_special_earth_tmp_counter_2                                          ; $13D8C3 |/
--  LDY <r_special_earth_tmp_counter_2                                          ; $13D8C5 | Load the Y register from the second counter.
    LDA #32.b                                                                   ; $13D8C7 |\ Initialize the first counter to 32, as there are 32 tiles in total.
    STA <r_special_earth_tmp_counter_1.lo                                       ; $13D8C9 |/
-   LDA [<r_special_earth_tmp_ptr],Y                                            ; $13D8CB |\ Read the current byte and store it into the base tile data.
    STA r_special_earth_tiles_base.w,X                                          ; $13D8CD |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13D8D0 |\
    TYA                                                                         ; $13D8D2 | | Add 32 to the Y register to move to the same row and plane of the
    CLC                                                                         ; $13D8D3 | | next tile.
    ADC #32.w                                                                   ; $13D8D4 | |
    TAY                                                                         ; $13D8D7 | |
    TDC                                                                         ; $13D8D8 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D8D9 |/
    INX                                                                         ; $13D8DB | Increment the X register to write the next byte.
    DEC <r_special_earth_tmp_counter_1.lo                                       ; $13D8DC |\ Loop until all 32 tiles have been processed.
    BNE -                                                                       ; $13D8DE |/
    INC <r_special_earth_tmp_counter_2                                          ; $13D8E0 | Increment the second counter.
    LDA <r_special_earth_tmp_counter_2                                          ; $13D8E2 |\
    CMP #32.b                                                                   ; $13D8E4 | | Loop until the second counter reaches 32.
    BNE --                                                                      ; $13D8E6 |/
    RTS                                                                         ; $13D8E8

; _special_load_star_field_tiles ($13:D8E9)
;
; Loads the star/rock tiles used in the credits.
_special_load_star_field_tiles:
    LDX #50.w                                                                   ; $13D8E9 |\
    STX <r_special_copy_3bpp_to_vram_arg_tiles                                  ; $13D8EC | | Copy 50 tiles of graphics to VRAM.
    LDX #sprite_ending_star_field_data.w                                        ; $13D8EE | |
    LDY #VRAM_ENDING_TILES_OAM.w                                                ; $13D8F1 | | NOTE: There are only 21 tiles to actually copy, so why they chose
    LDA #:sprite_ending_star_field_data.b                                       ; $13D8F4 | |       to copy 50 is a mystery.
    JSR _special_copy_3bpp_to_vram                                              ; $13D8F6 |/
    RTS                                                                         ; $13D8F9

; _special_copy_3bpp_to_vram ($13:D8FA)
;
; Given a source bank in the accumulator, a source address in the X register, a
; target VRAM address in the Y register and a number of 8x8 tiles to copy in
; $00, copies the designated data to VRAM, expanding it from 3bpp to 4bpp in the
; process.
_special_copy_3bpp_to_vram:
    PHB                                                                         ; $13D8FA | Preserve the data bank register.
    PHA                                                                         ; $13D8FB |\ Set the data bank register to the value in the accumulator.
    PLB                                                                         ; $13D8FC |/
    STY reg_ppu_vmadd.w                                                         ; $13D8FD | Set the VRAM address to the value passed in the Y register.
    STX <r_special_generic_tmp_2                                                ; $13D900 | Store the value in the X register as the source pointer.
    LDY #0.w                                                                    ; $13D902 | Initialize the Y register to zero.
--  REP #FLAG_P_ACCUMULATOR                                                     ; $13D905 |\
    PHA                                                                         ; $13D907 | | Loop through the first 16 bytes, copying them directly to the
    LDX #8.w                                                                    ; $13D908 | | target VRAM address.
-   LDA (<r_special_generic_tmp_2),Y                                            ; $13D90B | |
    STA reg_ppu_vmdata_write.w                                                  ; $13D90D | |
    INY                                                                         ; $13D910 | |
    INY                                                                         ; $13D911 | |
    DEX                                                                         ; $13D912 | |
    BNE -                                                                       ; $13D913 |/
    LDX #8.w                                                                    ; $13D915 |\
    PLA                                                                         ; $13D918 | | Loop through the next eight bytes, expanding each byte to a full
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D919 | | word in the process.
-   LDA (<r_special_generic_tmp_2),Y                                            ; $13D91B | |
    STA reg_ppu_vmdatal_write.w                                                 ; $13D91D | |
    STZ reg_ppu_vmdatah_write.w                                                 ; $13D920 | |
    INY                                                                         ; $13D923 | |
    DEX                                                                         ; $13D924 | |
    BNE -                                                                       ; $13D925 |/
    DEC <r_special_copy_3bpp_to_vram_arg_tiles                                  ; $13D927 |\ Decrement the tile count and loop until it reaches zero.
    BNE --                                                                      ; $13D929 |/
    PLB                                                                         ; $13D92B | Restore the original data bank register.
    RTS                                                                         ; $13D92C

; _special_planet_generate_earth_frames ($13:D92D)
;
; Generates the rotating earth sprite frames and stores them in memory at $8000.
; After being manipulated, the data is transformed from the tile-grouped form
; back into the normal 4 bits per pixel form.
_special_planet_generate_earth_frames:
    LDX #-512.w                                                                 ; $13D92D |\ Set the BG1 vertical scroll to -512.
    STX <r_special_bg1_scroll_vertical                                          ; $13D930 |/
    LDX #r_special_earth_tiles.w                                                ; $13D932 |\
    STX <r_special_planet_generate_earth_frames_tmp_ptr.address                 ; $13D935 | | Set the earth frames pointer to the earth tiles data.
    LDA #:r_special_earth_tiles.b                                               ; $13D937 | |
    STA <r_special_planet_generate_earth_frames_tmp_ptr.bank                    ; $13D939 |/
    LDX #0.w                                                                    ; $13D93B | Initialize the X register to zero.
--- PHX                                                                         ; $13D93E | Preserve the value of the X register.
    JSR _special_earth_generate_next_frame                                      ; $13D93F | Generate the next frame of the sequence.
    LDX #r_special_earth_tiles_final.w                                          ; $13D942 |\ Set a pointer to the current finalized frame data.
    STX <r_special_earth_tmp_ptr.address                                        ; $13D945 |/
    TDC                                                                         ; $13D947 |\
    TAX                                                                         ; $13D948 | | Initialize the final data offset to zero.
    STX <r_special_earth_tmp_counter_2                                          ; $13D949 |/
--  LDY <r_special_earth_tmp_counter_2                                          ; $13D94B | Set the Y register to the final data offset.
    LDA #32.b                                                                   ; $13D94D |\ Initialize the counter to 32.
    STA <r_special_earth_tmp_counter_1.lo                                       ; $13D94F |/
-   LDA (<r_special_earth_tmp_ptr.address),Y                                    ; $13D951 |\ Copy the finalized frame data to the current location in the earth
    STA [<r_special_planet_generate_earth_frames_tmp_ptr]                       ; $13D953 |/ frames data.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13D955 |\
    INC <r_special_planet_generate_earth_frames_tmp_ptr.address                 ; $13D957 | | Increment the destination pointer and add 32 to the source
    TYA                                                                         ; $13D959 | | pointer in the Y register.
    CLC                                                                         ; $13D95A | |
    ADC #32.w                                                                   ; $13D95B | |
    TAY                                                                         ; $13D95E | |
    TDC                                                                         ; $13D95F | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D960 |/
    INX                                                                         ; $13D962 | Increment the X register.
    DEC <r_special_earth_tmp_counter_1.lo                                       ; $13D963 |\ Loop until the counter reaches zero.
    BNE -                                                                       ; $13D965 |/
    INC <r_special_earth_tmp_counter_2.lo                                       ; $13D967 |\
    LDA <r_special_earth_tmp_counter_2.lo                                       ; $13D969 | | Increment the second counter and loop until it reaches 32.
    CMP #32.b                                                                   ; $13D96B | |
    BNE --                                                                      ; $13D96D |/
    PLX                                                                         ; $13D96F | Restore the X register.
    INX                                                                         ; $13D970 |\
    CPX #32.w                                                                   ; $13D971 | | Repeat until all 32 frames have been generated.
    BNE ---                                                                     ; $13D974 |/
    RTS                                                                         ; $13D976

; _special_earth_tiles_rotate_row ($13:D977)
;
; Given the current value of the carry flag, rotates that bit into the current
; row of the earth tiles, offset by the current value of the X register. The
; entire row of eight tiles is rotated left one bit, with the carry flag being
; set to the value of the high bit rotated out of the first value.
_special_earth_tiles_rotate_row:
    ROL r_special_earth_tiles_base.w + 7,X                                      ; $13D977 |\
    ROL r_special_earth_tiles_base.w + 6,X                                      ; $13D97A | | Rotate the passed carry bit into the last tile of the row, and
    ROL r_special_earth_tiles_base.w + 5,X                                      ; $13D97D | | continue rotating until reaching the first tile of the row.
    ROL r_special_earth_tiles_base.w + 4,X                                      ; $13D980 | |
    ROL r_special_earth_tiles_base.w + 3,X                                      ; $13D983 | |
    ROL r_special_earth_tiles_base.w + 2,X                                      ; $13D986 | |
    ROL r_special_earth_tiles_base.w + 1,X                                      ; $13D989 | |
    ROL r_special_earth_tiles_base.w + 0,X                                      ; $13D98C |/
    RTS                                                                         ; $13D98F

; _special_earth_generate_next_frame ($13:D990)
;
; Generates the next frame in the rotating earth sprite sequence.
_special_earth_generate_next_frame:
    TDC                                                                         ; $13D990 |\
    TAX                                                                         ; $13D991 | | Initialize the X register and tile offset to zero.
    STX <r_special_earth_tmp_tile_offset                                        ; $13D992 |/
    STZ <r_special_earth_tmp_counter_2.lo                                       ; $13D994 | Initialize the row offset to zero.
@loop_start:
    LDA r_special_earth_tiles_base.w,X                                          ; $13D996 |\
    ASL A                                                                       ; $13D999 | | Rotate the current row twice.
    JSR _special_earth_tiles_rotate_row                                         ; $13D99A | | BUG: After the first function all, the carry flag is set to the
    JSR _special_earth_tiles_rotate_row                                         ; $13D99D | |      original high bit of the first byte. Either another ASL of
    REP #FLAG_P_ACCUMULATOR                                                     ; $13D9A0 |/       the newly updated byte should occur or a refactoring.
    LDA r_special_earth_tiles_base.w + 0,X                                      ; $13D9A2 |\
    STA r_special_earth_tiles_working.w + 0,X                                   ; $13D9A5 | | Copy the current row's data into a working array.
    LDA r_special_earth_tiles_base.w + 2,X                                      ; $13D9A8 | |
    STA r_special_earth_tiles_working.w + 2,X                                   ; $13D9AB | |
    LDA r_special_earth_tiles_base.w + 4,X                                      ; $13D9AE | |
    STA r_special_earth_tiles_working.w + 4,X                                   ; $13D9B1 | |
    LDA r_special_earth_tiles_base.w + 6,X                                      ; $13D9B4 | |
    STA r_special_earth_tiles_working.w + 6,X                                   ; $13D9B7 |/
    STZ r_special_earth_tiles_final.w + 0,X                                     ; $13D9BA |\
    STZ r_special_earth_tiles_final.w + 2,X                                     ; $13D9BD | | Zero out the final array to initialize it to all black.
    STZ r_special_earth_tiles_final.w + 4,X                                     ; $13D9C0 | |
    STZ r_special_earth_tiles_final.w + 5,X                                     ; $13D9C3 | | NOTE: The offset of the last instruction does not follow the
    TDC                                                                         ; $13D9C6 | |       pattern. It doesn't seem to matter.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13D9C7 |/
    PHX                                                                         ; $13D9C9 | Preserve the initial value of the X register.
    LDA <r_special_earth_tmp_tile_offset                                        ; $13D9CA |\
    CLC                                                                         ; $13D9CC | | Set the X register to the sum of the tile offset and row offset to
    ADC <r_special_earth_tmp_row_offset                                         ; $13D9CD | | index the correct row of the mask data.
    TAX                                                                         ; $13D9CF |/
    TDC                                                                         ; $13D9D0 |\ Initialize the Y register to zero.
    TAY                                                                         ; $13D9D1 |/
-   LDA earth_circle_pixel_map_data.l,X                                         ; $13D9D2 |\
    STA r_special_earth_tiles_circle_mask.w,Y                                   ; $13D9D6 | | Copy the circle mask data for this row to memory.
    INX                                                                         ; $13D9D9 | |
    INY                                                                         ; $13D9DA | |
    CPY #_sizeof_r_special_earth_tiles_circle_mask.w                            ; $13D9DB | |
    BNE -                                                                       ; $13D9DE |/
    PLX                                                                         ; $13D9E0 | Restore the original X register.
    LDA #48.b                                                                   ; $13D9E1 |\ Initialize the counter to 48, to work through 48 pixels (the last
    STA <r_special_generic_tmp_3                                                ; $13D9E3 |/ two tiles are never sourced from).
-   JSR _special_earth_rotate_working                                           ; $13D9E5 | Rotate the next bit out of the working row.
    ASL <r_special_earth_tiles_circle_mask + 5                                  ; $13D9E8 |\
    ROL <r_special_earth_tiles_circle_mask + 4                                  ; $13D9EA | | Rotate the next bit out of the mask data, and if it's set, rotate
    ROL <r_special_earth_tiles_circle_mask + 3                                  ; $13D9EC | | the bit previously extracted from the working data into the final
    ROL <r_special_earth_tiles_circle_mask + 2                                  ; $13D9EE | | data.
    ROL <r_special_earth_tiles_circle_mask + 1                                  ; $13D9F0 | |
    ROL <r_special_earth_tiles_circle_mask + 0                                  ; $13D9F2 | |
    BCC +                                                                       ; $13D9F4 | |
    JSR _special_earth_rotate_into_final                                        ; $13D9F6 |/
+   DEC <r_special_generic_tmp_3                                                ; $13D9F9 |\ Loop until all 48 pixels in the row have been considered.
    BNE -                                                                       ; $13D9FB |/
    PHX                                                                         ; $13D9FD | Preserve the X register.
    LDA <r_special_earth_tmp_tile_offset                                        ; $13D9FE |\
    LSR A                                                                       ; $13DA00 | | Divide the tile offset by eight to convert it into a base row
    LSR A                                                                       ; $13DA01 | | number.
    LSR A                                                                       ; $13DA02 | |
    STA <r_special_generic_tmp_3                                                ; $13DA03 |/
    LDA <r_special_earth_tmp_row_offset                                         ; $13DA05 |\
    LSR A                                                                       ; $13DA07 | | Divide the row offset by eight to convert it into a row number
    LSR A                                                                       ; $13DA08 | | within the tile and add it to the base row number.
    LSR A                                                                       ; $13DA09 | |
    CLC                                                                         ; $13DA0A | |
    ADC <r_special_generic_tmp_3                                                ; $13DA0B |/
    AND #%00011111.b                                                            ; $13DA0D |\
    TAX                                                                         ; $13DA0F | | Use the result to load the correct number of blank pixels to
    LDA earth_circle_prefix_blank_data.l,X                                      ; $13DA10 | | prefix this row with. Rotate that number of zero pixels into the
    BEQ +                                                                       ; $13DA14 | | final data to shift the data toward the middle.
    PLX                                                                         ; $13DA16 | |
    STA <r_special_generic_tmp_3                                                ; $13DA17 | |
-   LSR r_special_earth_tiles_final.w + 0,X                                     ; $13DA19 | |
    ROR r_special_earth_tiles_final.w + 1,X                                     ; $13DA1C | |
    ROR r_special_earth_tiles_final.w + 2,X                                     ; $13DA1F | |
    ROR r_special_earth_tiles_final.w + 3,X                                     ; $13DA22 | |
    ROR r_special_earth_tiles_final.w + 4,X                                     ; $13DA25 | |
    ROR r_special_earth_tiles_final.w + 5,X                                     ; $13DA28 | |
    ROR r_special_earth_tiles_final.w + 6,X                                     ; $13DA2B | |
    ROR r_special_earth_tiles_final.w + 7,X                                     ; $13DA2E | |
    DEC <r_special_generic_tmp_3                                                ; $13DA31 | |
    BNE -                                                                       ; $13DA33 |/
    PHX                                                                         ; $13DA35 |\
+   LDA <r_special_earth_tmp_tile_offset                                        ; $13DA36 | | Increment the tile offset by 64 to move to the next row of tiles.
    CLC                                                                         ; $13DA38 | |
    ADC #64.b                                                                   ; $13DA39 | |
    STA <r_special_earth_tmp_tile_offset                                        ; $13DA3B |/
    INC <r_special_earth_tmp_counter_2                                          ; $13DA3D |\ Increment the row counter by one.
    LDA <r_special_earth_tmp_counter_2                                          ; $13DA3F |/
    AND #%00000111.b                                                            ; $13DA41 |\
    BNE +                                                                       ; $13DA43 | | Every eight entries, increment the row offset to do the next row.
    LDA <r_special_earth_tmp_row_offset                                         ; $13DA45 | | (The eight entries within each row are the four rows of tiles,
    CLC                                                                         ; $13DA47 | | each with two bitplanes.)
    ADC #8.b                                                                    ; $13DA48 | |
    STA <r_special_earth_tmp_row_offset                                         ; $13DA4A |/
+   LDA <r_special_earth_tmp_counter_2                                          ; $13DA4C |\
    AND #%00111111.b                                                            ; $13DA4E | | After processing 64 rows, it's time for the next bitplanes, so
    BNE +                                                                       ; $13DA50 | | reset the row offset to zero.
    STZ <r_special_earth_tmp_row_offset                                         ; $13DA52 |/
+   PLX                                                                         ; $13DA54 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DA55 | | Add eight to the X register.
    TXA                                                                         ; $13DA57 | |
    CLC                                                                         ; $13DA58 | |
    ADC #8.w                                                                    ; $13DA59 | |
    TAX                                                                         ; $13DA5C | |
    TDC                                                                         ; $13DA5D | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DA5E |/
    CPX #_sizeof_r_special_earth_tiles_working.w                                ; $13DA60 |\
    BEQ +                                                                       ; $13DA63 | | Loop until all of the data has been processed.
    JMP @loop_start                                                             ; $13DA65 |/
+   RTS                                                                         ; $13DA68

; _special_update_planet_oam_* ($13:DA69)
;
; Given a base X coordinate in $4B, a base Y coordinate in $4D, a base index in
; $4F, a target OAM index in $50 and a count of tiles to set in $51, creates the
; necessary updates to the OAM to display the target tiles. The _with_palette
; variant allows the caller to specify the desired palette number in the
; accumulator, rather than it being loaded from ROM.
_special_update_planet_oam_with_palette:
    ASL A                                                                       ; $13DA69
    STA <r_special_planet_update_oam_arg_tile_flags                             ; $13DA6A
    BRA __special_update_planet_oam_common                                      ; $13DA6C
_special_update_planet_oam:
    STZ <r_special_planet_update_oam_arg_tile_flags                             ; $13DA6E | TODO: Zero out the tile flags argument. Is there another entry point?
__special_update_planet_oam_common:
    LDA <r_special_planet_update_oam_arg_base_index                             ; $13DA70 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DA72 | | Set the X register to the base index times four to index the OAM
    ASL A                                                                       ; $13DA74 | | data in ROM.
    ASL A                                                                       ; $13DA75 | |
    TAX                                                                         ; $13DA76 |/
    LDA <r_special_planet_update_oam_arg_oam_index                              ; $13DA77 |\
    AND #$00FF.w                                                                ; $13DA79 | | Set the Y register to the OAM index times four to index the OAM
    ASL A                                                                       ; $13DA7C | | data.
    ASL A                                                                       ; $13DA7D | |
    TAY                                                                         ; $13DA7E | |
    TDC                                                                         ; $13DA7F | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DA80 |/
    LDA <r_special_planet_update_oam_arg_oam_index                              ; $13DA82 |\ Copy the OAM index to another variable.
    STA <r_special_planet_update_oam_tmp_oam_index_copy                         ; $13DA84 |/
@loop_start:
    LDA bank12.ending_planet_oam_data.l + oam_sprite.x,X                        ; $13DA86 |\
    STA <r_special_planet_update_oam_tmp_x.lo                                   ; $13DA8A | | Expand the tile X coordinate to 16 bits.
    STZ <r_special_planet_update_oam_tmp_x.hi                                   ; $13DA8C |/
    LDA bank12.ending_planet_oam_data.l + oam_sprite.y,X                        ; $13DA8E |\
    CLC                                                                         ; $13DA92 | | Set the OAM Y coordinate to the base Y coordinate plus the tile-
    ADC <r_special_planet_update_oam_arg_coordinates.y.lo                       ; $13DA93 | | specific Y coordinate.
    STA r_oam.1.y.w,Y                                                           ; $13DA95 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DA98 |\
    LDA <r_special_planet_update_oam_tmp_x                                      ; $13DA9A | | Add the base X coordinate to the tile-specific X coordinate, take
    CLC                                                                         ; $13DA9C | | the result mod 512, and save it to the temporary variable.
    ADC <r_special_planet_update_oam_arg_coordinates.x                          ; $13DA9D | |
    AND #$01FF.w                                                                ; $13DA9F | |
    STA <r_special_planet_update_oam_tmp_x                                      ; $13DAA2 | |
    TDC                                                                         ; $13DAA4 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DAA5 |/
    LDA <r_special_planet_update_oam_tmp_x.lo                                   ; $13DAA7 |\ Set the OAM X coordinate to the low byte of the result.
    STA r_oam.1.x.w,Y                                                           ; $13DAA9 |/
    LDA bank12.ending_planet_oam_data.l + oam_sprite.tile,X                     ; $13DAAC |\ Set the tile number by directly copying from ROM.
    STA r_oam.1.tile.w,Y                                                        ; $13DAB0 |/
    LDA <r_special_planet_update_oam_arg_tile_flags                             ; $13DAB3 |\
    BEQ +                                                                       ; $13DAB5 | | If the tile flags value is set, combine it with the data from ROM,
    LDA bank12.ending_planet_oam_data.l + oam_sprite.flags,X                    ; $13DAB7 | | keeping everything but the palette from the ROM value.
    AND #%11110001.b                                                            ; $13DABB | |
    ORA <r_special_planet_update_oam_arg_tile_flags                             ; $13DABD | |
    BRA ++                                                                      ; $13DABF |/
+   LDA bank12.ending_planet_oam_data.l + oam_sprite.flags,X                    ; $13DAC1 | Otherwise, take the entire flags from ROM.
++  STA r_oam.1.flags.w,Y                                                       ; $13DAC5 | Either way, set the flags in the OAM array.
    PHX                                                                         ; $13DAC8 | Preserve the value in the X register.
    LDA <r_special_planet_update_oam_tmp_oam_index_copy                         ; $13DAC9 |\
    LSR A                                                                       ; $13DACB | | Calculate the high OAM index by dividing the OAM index by four.
    LSR A                                                                       ; $13DACC | |
    STA <r_special_planet_update_oam_tmp_oam_hi_index                           ; $13DACD |/
    LDA <r_special_planet_update_oam_tmp_oam_index_copy                         ; $13DACF |\
    AND #%00000011.b                                                            ; $13DAD1 | | Determine the subindex by masking the low two bits of the index.
    STA <r_special_planet_update_oam_tmp_oam_hi_subindex                        ; $13DAD3 |/
    TAX                                                                         ; $13DAD5 |\
    LDA oam_hi_mask_data.l,X                                                    ; $13DAD6 | | Set the mask value to mask out the bits in the high OAM value.
    STA <r_special_planet_update_oam_tmp_oam_hi_mask                            ; $13DADA |/
    LDA <r_special_planet_update_oam_tmp_oam_hi_subindex                        ; $13DADC |\
    BEQ +                                                                       ; $13DADE | | Shift the bits in the high byte of the X coordinate until they
-   ASL <r_special_planet_update_oam_tmp_x.hi                                   ; $13DAE0 | | align correctly with the target high OAM subindex.
    ASL <r_special_planet_update_oam_tmp_x.hi                                   ; $13DAE2 | |
    DEC <r_special_planet_update_oam_tmp_oam_hi_subindex                        ; $13DAE4 | |
    BNE -                                                                       ; $13DAE6 |/
+   LDA <r_special_planet_update_oam_tmp_oam_hi_index                           ; $13DAE8 |\
    TAX                                                                         ; $13DAEA | | Set the new high OAM value by masking out the correct bits and
    LDA r_oam_hi.w,X                                                            ; $13DAEB | | then adding in the high byte of the X coordinate.
    AND <r_special_planet_update_oam_tmp_oam_hi_mask                            ; $13DAEE | |
    ORA <r_special_planet_update_oam_tmp_x.hi                                   ; $13DAF0 | |
    STA r_oam_hi.w,X                                                            ; $13DAF2 |/
    PLX                                                                         ; $13DAF5 | Restore the X register to the source data offset.
    INC <r_special_planet_update_oam_tmp_oam_index_copy                         ; $13DAF6 |\
    INC <r_special_planet_update_oam_arg_base_index                             ; $13DAF8 | | Increment the OAM and base indexes.
    INC <r_special_planet_update_oam_arg_oam_index                              ; $13DAFA |/
    INX                                                                         ; $13DAFC |\
    INX                                                                         ; $13DAFD | | Increment the X register by four to move to the next entry in ROM.
    INX                                                                         ; $13DAFE | |
    INX                                                                         ; $13DAFF |/
    INY                                                                         ; $13DB00 |\
    INY                                                                         ; $13DB01 | | Increment the Y register by four to move to the next OAM entry.
    INY                                                                         ; $13DB02 | |
    INY                                                                         ; $13DB03 |/
    DEC <r_special_planet_update_oam_arg_tile_count                             ; $13DB04 |\
    BEQ +                                                                       ; $13DB06 | | Decrement the tile count and loop until it reaches zero.
    JMP @loop_start                                                             ; $13DB08 |/
+   RTS                                                                         ; $13DB0B

; oam_hi_mask_data ($13:DB0C)
;
; For each of the four indexes in the high OAM table, provides the bits to mask
; to erase the bits of the desired index.
oam_hi_mask_data:
    .db %11111100                                                               ; $13DB0C
    .db %11110011                                                               ; $13DB0D
    .db %11001111                                                               ; $13DB0E
    .db %00111111                                                               ; $13DB0F

; _special_planet_set_moon_magnitude_far ($13:DB10)
;
; For the planet animation scenes in the ending sequence, sets the magnitude of
; earth's two moons for the far side of the sun.
_special_planet_set_moon_magnitude_far:
    LDX #8.w                                                                    ; $13DB10 |\
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13DB13 | | Set the moon Y magnitudes to 8.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_2    ; $13DB16 |/
    LDX #16.w                                                                   ; $13DB19 |\
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13DB1C | | Set the moon X magnitudes to 16.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_2    ; $13DB1F |/
    RTS                                                                         ; $13DB22

; _special_planet_set_moon_magnitude_near ($13:DB23)
;
; For the planet animation scenes in the ending sequence, sets the magnitude of
; earth's two moons for the near side of the sun.
_special_planet_set_moon_magnitude_near:
    LDX #32.w                                                                   ; $13DB23 |\
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13DB26 | | Set the moon Y magnitudes to 32.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_2    ; $13DB29 |/
    LDX #64.w                                                                   ; $13DB2C |\
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13DB2F | | Set the moon X magnitudes to 64.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_2    ; $13DB32 |/
    RTS                                                                         ; $13DB35

; special_hdma_table_data ($13:DB36)
;
; HDMA table for updating the mode 7 scaling parameters and the vertical scroll
; for BG1 during the ending sequence.
special_hdma_table_data:
    .table db, dw
    .row 240, $3319                                                             ; $13DB36.DB38
    .row 240, $34D9                                                             ; $13DB39.DB3B
    .db 0                                                                       ; $13DB3C
    .row 240, $3719                                                             ; $13DB3D.DB3F
    .row 240, $38D9                                                             ; $13DB40.DB42
    .db 0                                                                       ; $13DB43
    .row 240, $3B19                                                             ; $13DB44.DB46
    .row 240, $3BF9                                                             ; $13DB47.DB49
    .db 0                                                                       ; $13DB4A

; _special_init_hdma ($13:DB4B)
;
; Initializes HDMA for the ending sequence animations. Sets up DMA channel 0 to
; update the m7a and m7b parameters, DMA channel 1 to update the m7c and m7d
; parameters, and DMA channel 2 to update the BG1 vertical scroll register. Only
; enables the HDMA on channels 0 and 1.
_special_init_hdma:
    TDC                                                                         ; $13DB4B |\
    TAX                                                                         ; $13DB4C | | Copy the three HDMA tables to RAM. Specifically, the m7a/m7b
-   LDA special_hdma_table_data.l,X                                             ; $13DB4D | | table, the m7c/m7d table and the BG1 table.
    STA r_special_m7a_m7b_hdma_table.w,X                                        ; $13DB51 | |
    INX                                                                         ; $13DB54 | |
    CPX #_sizeof_special_hdma_table_data.w                                      ; $13DB55 | |
    BNE -                                                                       ; $13DB58 |/
    PHB                                                                         ; $13DB5A |\
    TDC                                                                         ; $13DB5B | | Preserve the existing data bank register and set it to $00.
    PHA                                                                         ; $13DB5C | |
    PLB                                                                         ; $13DB5D |/
    LDA #%01000011.b                                                            ; $13DB5E |\
    STA reg_cpu_dmap0.w                                                         ; $13DB60 | | Configure DMA channels 0 and 1 for indirect HDMA, writing twice to
    STA reg_cpu_dmap1.w                                                         ; $13DB63 | | two addresses and configure DMA channel 2 for indirect HDMA,
    LDA #%01000010.b                                                            ; $13DB66 | | writing twice to one address.
    STA reg_cpu_dmap2.w                                                         ; $13DB68 |/
    LDA #<reg_ppu_m7a                                                           ; $13DB6B |\ Set DMA channel 0 to write to mode 7 parameters A and B.
    STA reg_cpu_bbad0.w                                                         ; $13DB6D |/
    LDA #<reg_ppu_m7c                                                           ; $13DB70 |\ Set DMA channel 1 to write to mode 7 parameters C and D.
    STA reg_cpu_bbad1.w                                                         ; $13DB72 |/
    LDA #<reg_ppu_bg1v0fs                                                       ; $13DB75 |\ Set DMA channel 2 to write to the BG1 vertical scroll register.
    STA reg_cpu_bbad2.w                                                         ; $13DB77 |/
    LDX #r_special_m7a_m7b_hdma_table.w                                         ; $13DB7A |\ Set DMA channel 0 to read from the m7a/m7b HDMA table.
    STX reg_cpu_a1t0.w                                                          ; $13DB7D |/
    LDX #r_special_m7c_m7d_hdma_table.w                                         ; $13DB80 |\ Set DMA channel 1 to read from the m7c/m7d HDMA table.
    STX reg_cpu_a1t1.w                                                          ; $13DB83 |/
    LDX #r_special_bg1_hdma_table.w                                             ; $13DB86 |\ Set DMA channel 2 to read from the BG1 HDMA table.
    STX reg_cpu_a1t2.w                                                          ; $13DB89 |/
    LDA #:r_special_m7a_m7b_hdma_table.b                                        ; $13DB8C |\
    STA reg_cpu_a1b0.w                                                          ; $13DB8E | | Set the source bank for DMA channels 0, 1 and 2 to $7E.
    STA reg_cpu_hdb0.w                                                          ; $13DB91 | |
    STA reg_cpu_a1b1.w                                                          ; $13DB94 | |
    STA reg_cpu_hdb1.w                                                          ; $13DB97 | |
    STA reg_cpu_a1b2.w                                                          ; $13DB9A | |
    STA reg_cpu_hdb2.w                                                          ; $13DB9D |/
    LDA #%00000011.b                                                            ; $13DBA0 |\ Enable HDMA on channels 0 and 1.
    STA reg_cpu_hdmaen.w                                                        ; $13DBA2 |/
    PLB                                                                         ; $13DBA5 | Restore the original data bank register.
    RTS                                                                         ; $13DBA6

; ending_legend_moon_star_palette_offset_data ($13:DBA7)
;
; For the palette used by the stars in the legend and moon sequences of the
; ending, determines the offset to the palette to load from the palette data for
; the legend and moon sequence.
ending_legend_moon_star_palette_offset_data:
    .db _sizeof_palette * 0                                                     ; $13DBA7
    .db _sizeof_palette * 7                                                     ; $13DBA8

; _special_legend_moon_update_palettes ($13:DBA9)
;
; Updates the palettes used by the stars and sun in the legend and moon ending
; sequences.
_special_legend_moon_update_palettes:
    LDA <r_special_frame_counter                                                ; $13DBA9 |\
    LSR A                                                                       ; $13DBAB | | Set the X register to select which palette to load, alternating
    AND #%00000001.b                                                            ; $13DBAC | | every two frames.
    TAX                                                                         ; $13DBAE | |
    LDA ending_legend_moon_star_palette_offset_data.l,X                         ; $13DBAF | |
    TAX                                                                         ; $13DBB3 |/
    TDC                                                                         ; $13DBB4 |\ Initialize the Y register to zero.
    TAY                                                                         ; $13DBB5 |/
-   LDA ending_legend_moon_palette_data.l,X                                     ; $13DBB6 |\
    STA r_special_cgram_data.9.w,Y                                              ; $13DBBA | | Copy the selected palette into the palette used by the stars.
    INX                                                                         ; $13DBBD | |
    INY                                                                         ; $13DBBE | |
    CPY #_sizeof_palette.w                                                      ; $13DBBF | |
    BNE -                                                                       ; $13DBC2 |/
    LDA <r_special_frame_counter                                                ; $13DBC4 |\
    AND #%00000111.b                                                            ; $13DBC6 | | Skip to the end unless the frame counter mod 8 is zero.
    BNE ++                                                                      ; $13DBC8 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DBCA |\
    LDA r_special_cgram_data.14.color16.w                                       ; $13DBCC | | Cycle colors with indexes 10 through 15 in palette 13. This
    PHA                                                                         ; $13DBCF | | affects the fringe of the sun sprite.
    LDX #(14 * 2).w                                                             ; $13DBD0 | |
-   LDA r_special_cgram_data.14.color1.w,X                                      ; $13DBD3 | |
    STA r_special_cgram_data.14.color2.w,X                                      ; $13DBD6 | |
    DEX                                                                         ; $13DBD9 | |
    DEX                                                                         ; $13DBDA | |
    CPX #(9 * 2).w                                                              ; $13DBDB | |
    BNE -                                                                       ; $13DBDE | |
    PLA                                                                         ; $13DBE0 | |
    STA r_special_cgram_data.14.color11.w                                       ; $13DBE1 | |
    TDC                                                                         ; $13DBE4 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DBE5 |/
++  RTS                                                                         ; $13DBE7

; _special_set_mode_7_scaling_hdma ($13:DBE8)
;
; Given a 16-bit value in the X register, uses that value to set the mode 7
; scaling values in the HDMA tables. The rotation parameters are both set to
; zero. All lines are set to the same value.
_special_set_mode_7_scaling_hdma:
    PHX                                                                         ; $13DBE8 | Preserve the value in the X register.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DBE9 |\ Transfer the passed value to the accumulator.
    TXA                                                                         ; $13DBEB |/
    LDX #0.w                                                                    ; $13DBEC | Initialize the X register to zero.
-   STA r_special_m7a_m7b_hdma_data.1.m7a.w,X                                   ; $13DBEF |\ Set the A and D (scaling) parameters to the passed value.
    STA r_special_m7c_m7d_hdma_data.1.m7d.w,X                                   ; $13DBF2 |/
    STZ r_special_m7a_m7b_hdma_data.1.m7b.w,X                                   ; $13DBF5 |\ Set the B and C (rotation) parameters to zero.
    STZ r_special_m7c_m7d_hdma_data.1.m7c.w,X                                   ; $13DBF8 |/
    INX                                                                         ; $13DBFB |\
    INX                                                                         ; $13DBFC | | Increment the X register by four to move to the next entry.
    INX                                                                         ; $13DBFD | |
    INX                                                                         ; $13DBFE |/
    CPX #_sizeof_r_special_m7a_m7b_hdma_data.w                                  ; $13DBFF |\ Loop until all 256 entries have been set.
    BNE -                                                                       ; $13DC02 |/
    TDC                                                                         ; $13DC04 |\ Switch back to 8-bit accumulator mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DC05 |/
    PLX                                                                         ; $13DC07 | Restore the value in the X register.
    RTS                                                                         ; $13DC08

; _special_planet_init ($13:DC09)
;
; Initializes various data structures used by the planet animation in the ending
; sequence.
_special_planet_init:
    STZ r_the_end_palette_cycle_enabled.w                                       ; $13DC09 | Disable the end palette cycling.
    LDX #$0080.w                                                                ; $13DC0C |\
    STX <r_special_earth_tmp_counter_1                                          ; $13DC0F | | Initialize a couple of counters to zero.
    STX <r_special_earth_tmp_counter_2                                          ; $13DC11 |/
    LDX #256.w                                                                  ; $13DC13 |\
    STX <r_special_hdma_tmp_m7a                                                 ; $13DC16 | | Initialize the temporary mode 7 scaling parameters to 1.0 (256).
    STX <r_special_hdma_tmp_m7d                                                 ; $13DC18 |/
    LDX #256.w                                                                  ; $13DC1A |\ Set the mode 7 scaling parameters to 1.0 (256).
    JSR _special_set_mode_7_scaling_hdma                                        ; $13DC1D |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DC20 | Switch to 16-bit accumulator.
    TDC                                                                         ; $13DC22 |\ Initialize the X register to zero.
    TAX                                                                         ; $13DC23 |/
    LDY #160.w * _sizeof_mode_7_hdma_data_entry                                 ; $13DC24 | Initialize the Y register to point to line 160's entries.
-   LDA <r_special_hdma_tmp_m7a                                                 ; $13DC27 |\
    STA r_special_m7a_m7b_hdma_data.1.m7a.w,Y                                   ; $13DC29 | | Set the scaling parameters for the current line.
    LDA <r_special_hdma_tmp_m7d                                                 ; $13DC2C | |
    STA r_special_m7c_m7d_hdma_data.1.m7d.w,Y                                   ; $13DC2E |/
    LDA <r_special_hdma_tmp_m7a                                                 ; $13DC31 |\
    SEC                                                                         ; $13DC33 | | Subtract two from the horizontal scaling parameter.
    SBC #2.w                                                                    ; $13DC34 | |
    STA <r_special_hdma_tmp_m7a                                                 ; $13DC37 |/
    LDA <r_special_hdma_tmp_m7d                                                 ; $13DC39 |\
    SEC                                                                         ; $13DC3B | | Subtract one from the vertical scaling parameter.
    SBC #1.w                                                                    ; $13DC3C | |
    STA <r_special_hdma_tmp_m7d                                                 ; $13DC3F |/
    TYA                                                                         ; $13DC41 |\
    CLC                                                                         ; $13DC42 | | Add four to the Y register to move to the next HDMA entry.
    ADC #_sizeof_mode_7_hdma_data_entry.w                                       ; $13DC43 | |
    TAY                                                                         ; $13DC46 |/
    INX                                                                         ; $13DC47 |\
    CPY #_sizeof_r_special_m7a_m7b_hdma_data.w                                  ; $13DC48 | | Loop until the line index reaches 256.
    BNE -                                                                       ; $13DC4B |/
    LDA <r_special_background_mode                                              ; $13DC4D |\
    AND #$00FF.w                                                                ; $13DC4F | | Skip the following block if the background mode is set to credits.
    TAX                                                                         ; $13DC52 | |
    CPX #SPECIAL_BACKGROUND_MODE_CREDITS.w                                      ; $13DC53 | |
    BEQ ++                                                                      ; $13DC56 |/
    LDY #160.w * _sizeof_mode_7_hdma_data_entry                                 ; $13DC58 | Initialize the Y register to the entry for line 160.
    LDX #65.w * _sizeof_mode_7_hdma_data_entry                                  ; $13DC5B | Initialize the X register to the entry for line 65.
-   LDA r_special_m7a_m7b_hdma_data.1.m7a.w,Y                                   ; $13DC5E |\
    STA r_special_m7a_m7b_hdma_data.1.m7a.w,X                                   ; $13DC61 | | Copy the entry for the lower part of the screen to the entry for
    LDA r_special_m7c_m7d_hdma_data.1.m7d.w,Y                                   ; $13DC64 | | the upper part of the screen.
    STA r_special_m7c_m7d_hdma_data.1.m7d.w,X                                   ; $13DC67 |/
    TXA                                                                         ; $13DC6A |\
    SEC                                                                         ; $13DC6B | | Subtract four from the X register to move to the next entry.
    SBC #_sizeof_mode_7_hdma_data_entry.w                                       ; $13DC6C | |
    TAX                                                                         ; $13DC6F |/
    TYA                                                                         ; $13DC70 |\
    CLC                                                                         ; $13DC71 | | Add four to the Y register to move to the next entry.
    ADC #_sizeof_mode_7_hdma_data_entry.w                                       ; $13DC72 | |
    TAY                                                                         ; $13DC75 |/
    CPY #_sizeof_r_special_m7a_m7b_hdma_data.w                                  ; $13DC76 |\ Loop until the Y register reaches the max.
    BNE -                                                                       ; $13DC79 |/ NOTE: This ends up writing some unused entries to bank $7F.
++  TDC                                                                         ; $13DC7B |\ Switch to 8-bit accumulator mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DC7C |/
    LDA <r_special_background_mode                                              ; $13DC7E |\
    CMP #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13DC80 | | If the background mode is credits or legnd, set the mode 7 center
    BEQ +                                                                       ; $13DC82 | | coordinates to 128, 128 and load a 256 into the X register.
    LDX #128.w                                                                  ; $13DC84 | |
    STX r_special_ppu_m7x.w                                                     ; $13DC87 | |
    STX r_special_ppu_m7y.w                                                     ; $13DC8A | |
    LDX #256.w                                                                  ; $13DC8D | |
    BRA ++                                                                      ; $13DC90 |/
+   TDC                                                                         ; $13DC92 |\
    TAX                                                                         ; $13DC93 | | For the moon background mode, set the center coordinates to 0, 32
    STX r_special_ppu_m7x.w                                                     ; $13DC94 | | and load 2560 into the X register.
    LDX #32.w                                                                   ; $13DC97 | |
    STX r_special_ppu_m7y.w                                                     ; $13DC9A | |
    LDX #2560.w                                                                 ; $13DC9D |/
++  STX r_special_moon_mode_7_scale.w                                           ; $13DCA0 | Store the loaded value as the moon mode 7 scaling value.
    TDC                                                                         ; $13DCA3 |\
    TAX                                                                         ; $13DCA4 | | Set the NMI lock and NMI flag to zero.
    STX <r_special_nmi_lock                                                     ; $13DCA5 |/
    STX <r_special_moon_bg1_scroll_horizontal                                   ; $13DCA7 |\ Set the moon BG1 vertical and horizontal scroll values to zero.
    STX <r_special_moon_bg1_scroll_vertical                                     ; $13DCA9 |/
    STA <r_unknown_0063                                                         ; $13DCAB | TODO
    STA <r_special_frame_counter                                                ; $13DCAD | Initialize the frame counter to zero.
    STA r_special_departing_moon_active.w                                       ; $13DCAF | Initialize the departing moon flag to zero.
    LDX #$1000.w                                                                ; $13DCB2 |\ Initialize the target VRAM address to $1000.
    STX <r_special_vram_copy_target_address                                     ; $13DCB5 |/
    LDX #r_special_dialog_tilemap_staging.w                                     ; $13DCB7 |\ Initialize the source RAM address to $8000.
    STX <r_special_vram_copy_source_address                                     ; $13DCBA |/
    TDC                                                                         ; $13DCBC |\
    TAX                                                                         ; $13DCBD | | Depending on the background mode, copy the correct set of palettes
-   LDA <r_special_background_mode                                              ; $13DCBE | | to the CG-RAM mirror.
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13DCC0 | |
    BNE +                                                                       ; $13DCC2 | |
    LDA credits_palette_data.l,X                                                ; $13DCC4 | |
    BRA ++                                                                      ; $13DCC8 | |
+   LDA ending_legend_moon_palette_data.l,X                                     ; $13DCCA | |
++  STA r_special_cgram_data.1.w,X                                              ; $13DCCE | |
    STA r_special_cgram_data.9.w,X                                              ; $13DCD1 | |
    INX                                                                         ; $13DCD4 | |
    CPX #_sizeof_palette.w * 8                                                  ; $13DCD5 | |
    BNE -                                                                       ; $13DCD8 |/
    STZ r_special_planet_earth_small.w                                          ; $13DCDA | Reset the small earth flag.
    LDX #$1000.w                                                                ; $13DCDD |\
    STX <r_special_start_vram_dma_arg_bytes                                     ; $13DCE0 | | Copy the sun, moon and planet tiles to VRAM. The size of the
    LDX #bank15.tiles_sun_moon_planets_data - bank15._sizeof_tiles_earth_data   ; $13DCE2 | | preceding data is subtracted to leave room for that data at the
    LDY #$4000.w                                                                ; $13DCE5 | | start of VRAM.
    LDA #:bank15.tiles_sun_moon_planets_data                                    ; $13DCE8 | | NOTE: It's possible an early version used a static image of earth.
    JSR _special_start_vram_dma                                                 ; $13DCEA |/
    LDX #112.w                                                                  ; $13DCED |\
    STX <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13DCF0 | | Initialize the barycenter coordinates to 112, 80.
    LDX #80.w                                                                   ; $13DCF2 | |
    STX <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13DCF5 |/
    LDX #112.w                                                                  ; $13DCF7 |\
    STX <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_SUN         ; $13DCFA | | Initialize the sun coordinates to 112, 80.
    LDX #80.w                                                                   ; $13DCFC | |
    STX <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_SUN         ; $13DCFF |/
    JSR _special_planet_set_moon_magnitude_near                                 ; $13DD01 | Set the moon magnitudes for the near side of the sun.
    JSR _special_planet_init_theta                                              ; $13DD04 | Initialize the theta values.
    LDX #64.w                                                                   ; $13DD07 |\ Set the earth's vertical magnitude to 64.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_EARTH     ; $13DD0A |/
    LDX #384.w                                                                  ; $13DD0D |\ Set the earth's horizontal magnitude to 384.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_EARTH     ; $13DD10 |/
    LDX #64.w                                                                   ; $13DD13 |\ Set the departing moon's vertical magnitude to 64.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_DEPARTING ; $13DD16 |/
    LDX #192.w                                                                  ; $13DD19 |\ Set the departing moon's horizontal magnitude to 192.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_DEPARTING ; $13DD1C |/
    LDX #384.w                                                                  ; $13DD1F |\ Set the departing moon's vertical theta to 384.
    STX r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_DEPARTING     ; $13DD22 |/
    LDX #768.w                                                                  ; $13DD25 |\ Set the departing moon's horizontal theta to 768 (effectively 256).
    STX r_special_planet_theta_x.w + PLANET_THETA_MAGNITUDE_INDEX_DEPARTING     ; $13DD28 |/
    LDX #24.w                                                                   ; $13DD2B |\ Set the brown planet's vertical magnitude to 24.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_BROWN     ; $13DD2E |/
    LDX #256.w                                                                  ; $13DD31 |\ Set the brown planet's horizontal magnitude to 256.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_BROWN     ; $13DD34 |/
    LDX #8.w                                                                    ; $13DD37 |\ Set the green planet's vertical magnitude to 8.
    STX r_special_planet_magnitude_y.w + PLANET_THETA_MAGNITUDE_INDEX_GREEN     ; $13DD3A |/
    LDX #160.w                                                                  ; $13DD3D |\ Set the green planet's horizontal magnitude to 160.
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_GREEN     ; $13DD40 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_1.w                                  ; $13DD43 |\
    LDY #256.w                                                                  ; $13DD46 | | Add 256 to the first moon's theta values (to the other side).
    JSR _special_planet_update_theta                                            ; $13DD49 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_2.w                                  ; $13DD4C |\
    LDY #0.w                                                                    ; $13DD4F | | Add nothing to the second moon's theta values.
    JSR _special_planet_update_theta                                            ; $13DD52 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_EARTH.w                                   ; $13DD55 |\
    LDY #256.w                                                                  ; $13DD58 | | Add 256 to the earth's theta values.
    JSR _special_planet_update_theta                                            ; $13DD5B |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_BROWN.w                                   ; $13DD5E |\
    LDY #340.w                                                                  ; $13DD61 | | Add 340 to the brown planet's theta values.
    JSR _special_planet_update_theta                                            ; $13DD64 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_GREEN.w                                   ; $13DD67 |\
    LDY #756.w                                                                  ; $13DD6A | | Add 756 to the green planet's theta values.
    JSR _special_planet_update_theta                                            ; $13DD6D |/
    JSR _special_update_all_planet_coordinates                                  ; $13DD70 | Update all the planet coordinates.
    TDC                                                                         ; $13DD73 |\
    TAX                                                                         ; $13DD74 | | Clear the mode 7 tilemap.
-   STA r_special_dialog_tilemap_mode_7.w,X                                     ; $13DD75 | |
    INX                                                                         ; $13DD78 | |
    CPX #_sizeof_r_special_dialog_tilemap_mode_7.w                              ; $13DD79 | |
    BNE -                                                                       ; $13DD7C |/
    RTS                                                                         ; $13DD7E

; _special_update_all_planet_coordinates ($13:DD7F)
;
; Updates the current coordinates for all planets in the ending sequence.
_special_update_all_planet_coordinates:
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_1.w                                  ; $13DD7F |\
    LDY #PLANET_COORDINATE_INDEX_MOON_1.w                                       ; $13DD82 | | Update the coordinates for earth's first moon.
    JSR _special_update_planet_coordinates                                      ; $13DD85 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_2.w                                  ; $13DD88 |\
    LDY #PLANET_COORDINATE_INDEX_MOON_2.w                                       ; $13DD8B | | Update the coordinates for earth's second moon.
    JSR _special_update_planet_coordinates                                      ; $13DD8E |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_EARTH.w                                   ; $13DD91 |\
    LDY #PLANET_COORDINATE_INDEX_EARTH.w                                        ; $13DD94 | | Update the coordinates for earth.
    JSR _special_update_planet_coordinates                                      ; $13DD97 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_BROWN.w                                   ; $13DD9A |\
    LDY #PLANET_COORDINATE_INDEX_BROWN.w                                        ; $13DD9D | | Update the coordinates for the brown planet.
    JSR _special_update_planet_coordinates                                      ; $13DDA0 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_GREEN.w                                   ; $13DDA3 |\
    LDY #PLANET_COORDINATE_INDEX_GREEN.w                                        ; $13DDA6 | | Update the coordinates for the green planet.
    JSR _special_update_planet_coordinates                                      ; $13DDA9 |/
    LDA r_special_departing_moon_active.w                                       ; $13DDAC |\
    BEQ +                                                                       ; $13DDAF | | If the departing moon is active, update its coordinates as well.
    LDX #PLANET_THETA_MAGNITUDE_INDEX_DEPARTING.w                               ; $13DDB1 | |
    LDY #PLANET_COORDINATE_INDEX_DEPARTING.w                                    ; $13DDB4 | |
    JSR _special_update_planet_coordinates                                      ; $13DDB7 | |
+   RTS                                                                         ; $13DDBA |/

; _special_update_planet_coordinates ($13:DDBB)
;
; Given the offset to a planet's theta and magnitude in the X register and the
; offset to a planet's coordinates in the Y register, updates the coordinates.
_special_update_planet_coordinates:
    JSR _special_planet_calculate_sine_x                                        ; $13DDBB |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DDBE | | Set the planet's X coordinate.
    LDA <r_special_multiply_16bit_2_result.hi                                   ; $13DDC0 | |
    STA r_special_planet_coordinates.1.x.w,Y                                    ; $13DDC2 | |
    TDC                                                                         ; $13DDC5 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DDC6 |/
    JSR _special_planet_calculate_sine_y                                        ; $13DDC8 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13DDCB | | Set the planet's Y coordinate.
    LDA <r_special_multiply_16bit_2_result.hi                                   ; $13DDCD | |
    STA r_special_planet_coordinates.1.y.w,Y                                    ; $13DDCF | |
    TDC                                                                         ; $13DDD2 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13DDD3 |/
    RTS                                                                         ; $13DDD5

; _special_start_vram_dma ($13:DDD6)
;
; Copies the 16-bit number of bytes passed in $00 from the bank in the
; accumulator and the address in the X register to the VRAM address passed in
; the Y register, using DMA channel 5.
_special_start_vram_dma:
    PHB                                                                         ; $13DDD6 |\
    PHA                                                                         ; $13DDD7 | | Preserve the existing data bank register and set it to zero.
    TDC                                                                         ; $13DDD8 | |
    PHA                                                                         ; $13DDD9 | |
    PLB                                                                         ; $13DDDA | |
    PLA                                                                         ; $13DDDB |/
    STY reg_ppu_vmadd.w                                                         ; $13DDDC | Set the VRAM address to the value in the Y register.
    STX reg_cpu_a1t5.w                                                          ; $13DDDF | Set the source address to the value in the X register.
    STA reg_cpu_a1b5.w                                                          ; $13DDE2 | Set the source bank to the value in the accumulator.
    LDA #%00000001.b                                                            ; $13DDE5 |\ Set the DMA mode to write two addresses.
    STA reg_cpu_dmap5.w                                                         ; $13DDE7 |/
    LDA #<reg_ppu_vmdata_write                                                  ; $13DDEA |\ Configure the DMA to write to VRAM.
    STA reg_cpu_bbad5.w                                                         ; $13DDEC |/
    LDX <r_special_start_vram_dma_arg_bytes                                     ; $13DDEF |\ Set the number of bytes to transfer.
    STX reg_cpu_das5.w                                                          ; $13DDF1 |/
    LDA #%00100000.b                                                            ; $13DDF4 |\ Start the DMA on channel 5.
    STA reg_cpu_mdmaen.w                                                        ; $13DDF6 |/
    PLB                                                                         ; $13DDF9 | Restore the original data bank register.
    RTS                                                                         ; $13DDFA

; _special_init_oam ($13:DDFB)
;
; Initializes the OAM mirror by writing zeroes to the entire data structure.
_special_init_oam:
    LDX #_sizeof_r_oam.w + _sizeof_r_oam_hi                                     ; $13DDFB |\
    TDC                                                                         ; $13DDFE | | Write zeroes to the entire OAM mirror.
-   STA r_oam.w - 1,X                                                           ; $13DDFF | |
    DEX                                                                         ; $13DE02 | |
    BNE -                                                                       ; $13DE03 |/
    RTS                                                                         ; $13DE05

; _special_set_oam_to_70_x_240 ($13:DE06)
;
; Sets the X coordinate of the first 70 OAM entries to 240.
_special_set_oam_to_70_x_240:
    TDC                                                                         ; $13DE06 |\
    TAX                                                                         ; $13DE07 | | Set the X coordinate for the first 70 OAM entries to 240.
    LDA #240.b                                                                  ; $13DE08 | |
-   STA r_oam.1.x.w,X                                                           ; $13DE0A | |
    INX                                                                         ; $13DE0D | |
    CPX #_sizeof_oam_sprite.w * 70                                              ; $13DE0E | |
    BNE -                                                                       ; $13DE11 |/
    RTS                                                                         ; $13DE13

; _special_init ($13:DE14)
;
; Does basic initialization, including resetting the PPU and setting the NMI
; and IRQ handlers.
_special_init:
    LDA #%00000000.b                                                            ; $13DE14 |\ Disable NMI and automatic joypad reading.
    STA reg_cpu_nmitimen.w                                                      ; $13DE16 |/
    PHA                                                                         ; $13DE19 |\ Set the data bank register to $00.
    PLB                                                                         ; $13DE1A |/
    LDX #$0000.w                                                                ; $13DE1B |\
    PHX                                                                         ; $13DE1E | | Set the direct register to $0000.
    PLD                                                                         ; $13DE1F |/
    LDA #%10000000.b                                                            ; $13DE20 |\ Enable forced blanking and set PPU brightness to zero.
    STA reg_ppu_inidisp.w                                                       ; $13DE22 |/
    LDA #7.b                                                                    ; $13DE25 |\ Set the background mode to 7.
    STA reg_ppu_bgmode.w                                                        ; $13DE27 |/
    LDX #$0300.w                                                                ; $13DE2A |\ Set the OAM address to $0300.
    STX reg_ppu_oamadd.w                                                        ; $13DE2D |/ NOTE: This actually sets it to $0100, and the extra bit is ignored.
    LDA #%10000000.b                                                            ; $13DE30 |\
    STA r_special_ppu_m7sel.w                                                   ; $13DE32 | | Set the mode 7 to do the back drop screen.
    STA reg_ppu_m7sel.w                                                         ; $13DE35 |/
    LDA #%00000010.b                                                            ; $13DE38 |\ Configure the basic sprite parameters.
    STA reg_ppu_objsel.w                                                        ; $13DE3A |/
    LDA #$00.b                                                                  ; $13DE3D |\
    STA reg_ppu_bg12nba.w                                                       ; $13DE3F | | Set the name address for BG1 and BG2 to $0000.
    STA reg_ppu_bg34nba.w                                                       ; $13DE42 |/
    LDA #%10000000.b                                                            ; $13DE45 |\ Set the VRAM increment to 1 by 1 on writing $2119.
    STA reg_ppu_vmainc.w                                                        ; $13DE47 |/
    TDC                                                                         ; $13DE4A |\
    TAX                                                                         ; $13DE4B | | Set the mode 7 parameters all to zero.
    STA reg_ppu_m7a.w                                                           ; $13DE4C | |
    STA reg_ppu_m7a.w                                                           ; $13DE4F | |
    STA reg_ppu_m7b.w                                                           ; $13DE52 | |
    STA reg_ppu_m7b.w                                                           ; $13DE55 | |
    STA reg_ppu_m7c.w                                                           ; $13DE58 | |
    STA reg_ppu_m7c.w                                                           ; $13DE5B | |
    STA reg_ppu_m7d.w                                                           ; $13DE5E | |
    STA reg_ppu_m7d.w                                                           ; $13DE61 | |
    STA reg_ppu_m7x.w                                                           ; $13DE64 | |
    STA reg_ppu_m7x.w                                                           ; $13DE67 | |
    STA reg_ppu_m7y.w                                                           ; $13DE6A | |
    STA reg_ppu_m7y.w                                                           ; $13DE6D |/
    STA reg_ppu_mosaic.w                                                        ; $13DE70 | Disable mosaic.
    STA reg_ppu_bg1sc.w                                                         ; $13DE73 |\
    STA reg_ppu_bg2sc.w                                                         ; $13DE76 | | Set the tilemap base addresses to $0000.
    STA reg_ppu_bg3sc.w                                                         ; $13DE79 | |
    STA reg_ppu_bg4sc.w                                                         ; $13DE7C |/
    STA reg_ppu_bg1h0fs.w                                                       ; $13DE7F |\
    STA reg_ppu_bg1h0fs.w                                                       ; $13DE82 | | Set the scroll registers for the backgrounds to zero.
    STA reg_ppu_bg1v0fs.w                                                       ; $13DE85 | |
    STA reg_ppu_bg1v0fs.w                                                       ; $13DE88 | |
    STA reg_ppu_bg2h0fs.w                                                       ; $13DE8B | |
    STA reg_ppu_bg2h0fs.w                                                       ; $13DE8E | |
    STA reg_ppu_bg2v0fs.w                                                       ; $13DE91 | |
    STA reg_ppu_bg2v0fs.w                                                       ; $13DE94 | |
    STA reg_ppu_bg3h0fs.w                                                       ; $13DE97 | |
    STA reg_ppu_bg3h0fs.w                                                       ; $13DE9A | |
    STA reg_ppu_bg3v0fs.w                                                       ; $13DE9D | |
    STA reg_ppu_bg3v0fs.w                                                       ; $13DEA0 | |
    STA reg_ppu_bg4h0fs.w                                                       ; $13DEA3 | |
    STA reg_ppu_bg4h0fs.w                                                       ; $13DEA6 | |
    STA reg_ppu_bg4v0fs.w                                                       ; $13DEA9 | |
    STA reg_ppu_bg4v0fs.w                                                       ; $13DEAC |/
    STA reg_ppu_wh2.w                                                           ; $13DEAF |\ Set the second window positions to zero.
    STA reg_ppu_wh3.w                                                           ; $13DEB2 |/
    STX reg_ppu_wbglog.w                                                        ; $13DEB5 | Set the window mask logic to OR.
    STA reg_ppu_tm.w                                                            ; $13DEB8 | Set no screens as the main screen.
    STA reg_ppu_ts.w                                                            ; $13DEBB | Set no screens as the sub screen.
    STA reg_ppu_tmw.w                                                           ; $13DEBE | Set the window main screen to none.
    STA reg_ppu_tsw.w                                                           ; $13DEC1 | Set the window sub screen to none.
    STA reg_cpu_mdmaen.w                                                        ; $13DEC4 |\ Disable DMA and HDMA.
    STA reg_cpu_hdmaen.w                                                        ; $13DEC7 |/
    STA reg_ppu_cgadsub.w                                                       ; $13DECA | Disable color math.
    STA reg_ppu_setini.w                                                        ; $13DECD | Don't set any unusual video settings.
    STA reg_ppu_cgswsel.w                                                       ; $13DED0 | More disabling of color math.
    STX r_unknown_008c.w                                                        ; $13DED3 |\ TODO
    STX r_unknown_008e.w                                                        ; $13DED6 |/
    LDA #8.b                                                                    ; $13DED9 |\
    STA reg_ppu_wh0.w                                                           ; $13DEDB | | Set the first window to 8 and 255.
    LDA #255.b                                                                  ; $13DEDE | |
    STA reg_ppu_wh1.w                                                           ; $13DEE0 |/
    LDA #%00010001.b                                                            ; $13DEE3 |\
    STA reg_ppu_tm.w                                                            ; $13DEE5 | | Set the main screen to BG1 and sprites.
    STA reg_ppu_tmw.w                                                           ; $13DEE8 |/
    LDA #%00110011.b                                                            ; $13DEEB |\
    STA reg_ppu_w12sel.w                                                        ; $13DEED | | Set the window to mask on the outside and enable window 1 on all
    STA reg_ppu_w34sel.w                                                        ; $13DEF0 | | screens.
    STA reg_ppu_wobjsel.w                                                       ; $13DEF3 |/
    LDA #:special_nmi_handler.b                                                 ; $13DEF6 |\
    STA r_nmi_handler.w + 3                                                     ; $13DEF8 | | Set the NMI handler to $13:E3B3 and the IRQ handler to $13:E057.
    LDX #special_nmi_handler.w                                                  ; $13DEFB | |
    STX r_nmi_handler.w + 1                                                     ; $13DEFE | |
    LDA #:special_irq_handler.b                                                 ; $13DF01 | |
    STA r_irq_handler.w + 3                                                     ; $13DF03 | |
    LDX #special_irq_handler.w                                                  ; $13DF06 | |
    STX r_irq_handler.w + 1                                                     ; $13DF09 | |
    LDA #$5C.b                                                                  ; $13DF0C | |
    STA r_nmi_handler.w + 0                                                     ; $13DF0E | |
    STA r_irq_handler.w + 0                                                     ; $13DF11 |/
    LDA #$7E.b                                                                  ; $13DF14 |\
    PHA                                                                         ; $13DF16 | | Set the data bank register to $7E.
    PLB                                                                         ; $13DF17 |/
    RTS                                                                         ; $13DF18

; _special_zero_vram ($13:DF19)
;
; Given a VRAM address in the X register, zeroes the number of bytes passed in
; the Y register.
_special_zero_vram:
    PHB                                                                         ; $13DF19 |\
    TDC                                                                         ; $13DF1A | | Preserve the data bank register and set it to $00.
    PHA                                                                         ; $13DF1B | |
    PLB                                                                         ; $13DF1C |/
    STX reg_ppu_vmadd.w                                                         ; $13DF1D | Set the target VRAM address to the value in the X register.
    LDX #zero_word_data.w                                                       ; $13DF20 |\ Set the source address to the zero data.
    STX reg_cpu_a1t5.w                                                          ; $13DF23 |/
    LDA #%00001001.b                                                            ; $13DF26 |\ Configure the DMA to write to two addresses with a fixed source.
    STA reg_cpu_dmap5.w                                                         ; $13DF28 |/
    LDA #<reg_ppu_vmdata_write                                                  ; $13DF2B |\ Configure the DMA to write to VRAM.
    STA reg_cpu_bbad5.w                                                         ; $13DF2D |/
    LDA #:zero_word_data                                                        ; $13DF30 |\ Set the source bank.
    STA reg_cpu_a1b5.w                                                          ; $13DF32 |/
    STY reg_cpu_das5.w                                                          ; $13DF35 | Set the number of bytes to write to the value in the Y register.
    LDA #%00100000.b                                                            ; $13DF38 |\ Enable the DMA on channel 5.
    STA reg_cpu_mdmaen.w                                                        ; $13DF3A |/
    PLB                                                                         ; $13DF3D | Restore the original data bank register.
    RTS                                                                         ; $13DF3E

; zero_word_data ($13:DF3F)
;
; A zero that can be used as fixed data for transfer to VRAM.
zero_word_data:
    .dw 0                                                                       ; $13DF3F.DF40

; _special_wait_for_nmi_and_update_star_field_entries_if_credits ($13:DF41)
;
; Waits for the next complete NMI and updates the star field entries if the
; background mode is set to credits.
_special_wait_for_nmi_and_update_star_field_entries_if_credits:
    PHX                                                                         ; $13DF41 | Preserve the X register.
    INC <r_special_nmi_flag                                                     ; $13DF42 |\
-   LDA <r_special_nmi_flag                                                     ; $13DF44 | | Loop until the next NMI completes.
    BNE -                                                                       ; $13DF46 |/
    JSR _special_star_field_update_entries_if_credits                           ; $13DF48 | Update the star field entries if this is the credits.
    PLX                                                                         ; $13DF4B | Restore the X register.
    RTS                                                                         ; $13DF4C

; _special_star_field_update_entries_if_credits ($13:DF4D)
;
; If the current background mode in $64 is set to 2 (for credits), updates the
; star field entries.
_special_star_field_update_entries_if_credits:
    LDA <r_special_background_mode                                              ; $13DF4D |\
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13DF4F | | If the background mode is set to credits, update the star field
    BNE +                                                                       ; $13DF51 | | entries.
    JSR _special_star_field_update_entries                                      ; $13DF53 |/
+   RTS                                                                         ; $13DF56

; earth_circle_pixel_map_data ($13:DF57)
;
; For each row of pixels in the rotating earth sprites, determines which pixels
; to include in the final frame to turn the data into a circle.
earth_circle_pixel_map_data:
    .db %01000000, %00000010, %00001000, %00100000, %00000001, %00000000, 0, 0  ; $13DF57.DF5E | $00
    .db %10001000, %00100001, %00011100, %01000010, %00001000, %10000000, 0, 0  ; $13DF5F.DF66 | $08
    .db %10100010, %00100010, %00111110, %00100010, %00100010, %10000000, 0, 0  ; $13DF67.DF6E | $10
    .db %10010010, %01001001, %00111110, %01001001, %00100100, %10000000, 0, 0  ; $13DF6F.DF76 | $18
    .db %10100100, %10010010, %11111111, %10100100, %10010010, %10000000, 0, 0  ; $13DF77.DF7E | $20
    .db %10100100, %10010101, %11111111, %11010100, %10010010, %10000000, 0, 0  ; $13DF7F.DF86 | $28
    .db %10100100, %10010101, %11111111, %11010100, %10010010, %10000000, 0, 0  ; $13DF87.DF8E | $30
    .db %10100100, %10101011, %11111111, %11101010, %10010010, %10000000, 0, 0  ; $13DF8F.DF96 | $38
    .db %10100100, %10101111, %11111111, %11111010, %10010010, %10000000, 0, 0  ; $13DF97.DF9E | $40
    .db %10100100, %10101111, %11111111, %11111010, %10010010, %10000000, 0, 0  ; $13DF9F.DFA6 | $48
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFA7.DFAE | $50
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFAF.DFB6 | $58
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFB7.DFBE | $60
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFBF.DFC6 | $68
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFC7.DFCE | $70
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFCF.DFD6 | $78
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFD7.DFDE | $80
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFDF.DFE6 | $88
    .db %11001001, %01111111, %11111111, %11111111, %01001001, %10000000, 0, 0  ; $13DFE7.DFEE | $90
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFEF.DFF6 | $98
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFF7.DFFE | $A0
    .db %10100100, %10111111, %11111111, %11111110, %10010010, %10000000, 0, 0  ; $13DFFF.E006 | $A8
    .db %10100100, %10101111, %11111111, %11111010, %10010010, %10000000, 0, 0  ; $13E007.E00E | $B0
    .db %10100100, %10101111, %11111111, %11111010, %10010010, %10000000, 0, 0  ; $13E00F.E016 | $B8
    .db %10100100, %10101011, %11111111, %11101010, %10010010, %10000000, 0, 0  ; $13E017.E01E | $C0
    .db %10100100, %10010101, %11111111, %11010100, %10010010, %10000000, 0, 0  ; $13E01F.E026 | $C8
    .db %10100100, %10010101, %11111111, %11010100, %10010010, %10000000, 0, 0  ; $13E027.E02E | $D0
    .db %10100100, %10010010, %11111111, %10100100, %10010010, %10000000, 0, 0  ; $13E02F.E036 | $D8
    .db %10010010, %01001001, %00111110, %01001001, %00100100, %10000000, 0, 0  ; $13E037.E03E | $E0
    .db %10100010, %00100010, %00111110, %00100010, %00100010, %10000000, 0, 0  ; $13E03F.E046 | $E8
    .db %10001000, %00100001, %00011100, %01000010, %00001000, %10000000, 0, 0  ; $13E047.E04E | $F0
    .db %01000000, %00000010, %00001000, %00100000, %00000001, %00000000, 0, 0  ; $13E04F.E056 | $F8

; special_irq_handler ($13:E057)
;
; IRQ handler for the special effect sequences at the end of the game. Doesn't
; do anything but return.
;
; NOTE: This does nothing but execute an RTL instruction, which may not even
;       work as expected. The code doesn't appear to enable interrupts, however,
;       so it doesn't matter.
special_irq_handler:
    RTL                                                                         ; $13E057

; _special_start_vram_dma_4 ($13:E058)
;
; Given a source address in the X register, a source bank in the accumulator, a
; target VRAM address in the Y register and a desired number of bytes to
; transfer in $28.29, copies the data to VRAM.
_special_start_vram_dma_4:
    PHB                                                                         ; $13E058 |\
    PHA                                                                         ; $13E059 | | Preserve the data bank register and set it to zero.
    TDC                                                                         ; $13E05A | |
    PHA                                                                         ; $13E05B | |
    PLB                                                                         ; $13E05C | |
    PLA                                                                         ; $13E05D |/
    STY reg_ppu_vmadd.w                                                         ; $13E05E | Set the VRAM address to the value in the Y register.
    STX reg_cpu_a1t4.w                                                          ; $13E061 | Set the source address to the value in the X register.
    STA reg_cpu_a1b4.w                                                          ; $13E064 | Set the source bank to the value in the accumulator.
    LDA #%00000001.b                                                            ; $13E067 |\ Configure DMA channel 4 to write 2 addresses.
    STA reg_cpu_dmap4.w                                                         ; $13E069 |/
    LDA #<reg_ppu_vmdata_write.b                                                ; $13E06C |\ Set the write address to write VRAM.
    STA reg_cpu_bbad4.w                                                         ; $13E06E |/
    LDX <r_special_start_vram_dma_4_arg_bytes                                   ; $13E071 |\ Set the number of bytes to the value in $28.
    STX reg_cpu_das4.w                                                          ; $13E073 |/
    LDA #%00010000.b                                                            ; $13E076 |\ Execute the DMA on channel 4.
    STA reg_cpu_mdmaen.w                                                        ; $13E078 |/
    PLB                                                                         ; $13E07B | Restore the data bank register.
    RTS                                                                         ; $13E07C

; _special_update_earth_tiles ($13:E07D)
;
; Periodically updates the earth tiles currently in VRAM.
_special_update_earth_tiles:
    LDA <r_special_frame_counter                                                ; $13E07D |\
    AND #%00001111.b                                                            ; $13E07F | | Return if the frame counter mod 16 is not zero.
    BNE +                                                                       ; $13E081 |/
    LDX #$0400.w                                                                ; $13E083 |\
    STX <r_special_start_vram_dma_4_arg_bytes                                   ; $13E086 | | Copy the current set of earth tiles to VRAM.
    LDX <r_special_earth_tiles_ptr                                              ; $13E088 | |
    LDY #VRAM_ENDING_TILES_OAM.w                                                ; $13E08A | |
    LDA #:r_special_earth_tiles                                                 ; $13E08D | |
    JSR _special_start_vram_dma_4                                               ; $13E08F |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E092 |\
    LDA <r_special_earth_tiles_ptr                                              ; $13E094 | | Update the earth tiles pointer by adding $0400 and wrapping back
    CLC                                                                         ; $13E096 | | around to $8000 when necessary.
    ADC #$0400.w                                                                ; $13E097 | |
    AND #$7FFF.w                                                                ; $13E09A | |
    ORA #$8000.w                                                                ; $13E09D | |
    STA <r_special_earth_tiles_ptr                                              ; $13E0A0 | |
    TDC                                                                         ; $13E0A2 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E0A3 |/
+   RTS                                                                         ; $13E0A5

; _special_copy_cgram_to_ppu ($13:E0A6)
;
; Copies the CG-RAM mirror at $2103 to the PPU.
_special_copy_cgram_to_ppu:
    PHB                                                                         ; $13E0A6 |\
    TDC                                                                         ; $13E0A7 | | Preserve the data bank register and set it to $00.
    PHA                                                                         ; $13E0A8 | |
    PLB                                                                         ; $13E0A9 |/
    STA reg_ppu_cgadd.w                                                         ; $13E0AA | Set the CG-RAM address to zero.
    LDX #%00000010.w | (<reg_ppu_cgdata << 8)                                   ; $13E0AD |\
    STX reg_cpu_dmap4.w                                                         ; $13E0B0 | | Configure DMA channel 4 to copy the CG-RAM mirror to CG-RAM.
    LDX #r_special_cgram_data.w                                                 ; $13E0B3 | |
    STX reg_cpu_a1t4.w                                                          ; $13E0B6 | |
    LDA #:r_special_cgram_data.b                                                ; $13E0B9 | |
    STA reg_cpu_a1b4.w                                                          ; $13E0BB | |
    LDX #_sizeof_r_special_cgram_data.w                                         ; $13E0BE | |
    STX reg_cpu_das4.w                                                          ; $13E0C1 |/
    LDA #%00010000.b                                                            ; $13E0C4 |\ Enable DMA channel 4.
    STA reg_cpu_mdmaen.w                                                        ; $13E0C6 |/
    PLB                                                                         ; $13E0C9 | Restore the data bank register.
    RTS                                                                         ; $13E0CA

; _special_copy_oam_to_ppu ($13:E0CB)
;
; Copies the OAM mirror at $0300 to the PPU.
_special_copy_oam_to_ppu:
    PHB                                                                         ; $13E0CB |\
    TDC                                                                         ; $13E0CC | | Preserve the existing data bank register and set it to zero.
    PHA                                                                         ; $13E0CD | |
    PLB                                                                         ; $13E0CE |/
    TAX                                                                         ; $13E0CF |\ Set the OAM address to $0000.
    STX reg_ppu_oamadd.w                                                        ; $13E0D0 |/
    LDX #<reg_ppu_oamdata_write.w << 8                                          ; $13E0D3 |\ Set DMA channel 4 to write once to the OAM data address.
    STX reg_cpu_dmap4.w                                                         ; $13E0D6 |/
    LDX #r_oam.w                                                                ; $13E0D9 |\
    STX reg_cpu_a1t4.w                                                          ; $13E0DC | | Set the source address to the OAM mirror.
    TDC                                                                         ; $13E0DF | |
    STA reg_cpu_a1b4.w                                                          ; $13E0E0 |/
    STA reg_cpu_hdb4.w                                                          ; $13E0E3 | Set the HDMA bank to zero.
    LDX #_sizeof_r_oam.w + _sizeof_r_oam_hi                                     ; $13E0E6 |\ Copy the entire size of the OAM mirror.
    STX reg_cpu_das4.w                                                          ; $13E0E9 |/
    LDA #%00010000.b                                                            ; $13E0EC |\ Enable DMA channel 4.
    STA reg_cpu_mdmaen.w                                                        ; $13E0EE |/
    PLB                                                                         ; $13E0F1 | Restore the data bank register.
    RTS                                                                         ; $13E0F2

; _unused_special_multiply_16bit_reg ($13:E0F3)
;
; Given two 16-bit operands in $18 and $1A, multiplies them using the CPU
; multiplication registers and returns the result in $1C.
_unused_special_multiply_16bit_reg:
    PHX                                                                         ; $13E0F3 | Preserve the value in the X register.
    LDA <r_special_multiply_16bit_2_arg_1                                       ; $13E0F4 |\
    STA reg_cpu_wrmpya.l                                                        ; $13E0F6 | | Set the multiplication arguments.
    LDA <r_special_multiply_16bit_2_arg_2                                       ; $13E0FA | |
    STA reg_cpu_wrmpyb.l                                                        ; $13E0FC |/
    PHB                                                                         ; $13E100 |\
    TDC                                                                         ; $13E101 | | Waste some cycles by setting the data bank register to $00.
    PHA                                                                         ; $13E102 | |
    PLB                                                                         ; $13E103 |/
    LDX reg_cpu_rdmpy.w                                                         ; $13E104 |\ Read and store the result.
    STX <r_special_multiply_16bit_2_result                                      ; $13E107 |/
    PLB                                                                         ; $13E109 | Restore the data bank register.
    PLX                                                                         ; $13E10A | Restore the X register.
    RTS                                                                         ; $13E10B

; _special_planet_update_theta ($13:E10C)
;
; Given a planet theta/magnitude index in the X register and a value to add in
; the Y register, adds that value to that planet's theta values.
_special_planet_update_theta:
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E10C |\
    TYA                                                                         ; $13E10E | | Add the value in the Y register to the planet's Y theta value.
    CLC                                                                         ; $13E10F | |
    ADC r_special_planet_theta_y.w,X                                            ; $13E110 | |
    STA r_special_planet_theta_y.w,X                                            ; $13E113 |/
    TYA                                                                         ; $13E116 |\
    CLC                                                                         ; $13E117 | | Add the value in the Y register to the planet's X theta value.
    ADC r_special_planet_theta_x.w,X                                            ; $13E118 | |
    STA r_special_planet_theta_x.w,X                                            ; $13E11B | |
    TDC                                                                         ; $13E11E | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E11F |/
    RTS                                                                         ; $13E121

; _special_planet_init_theta ($13:E122)
;
; For the planet animation sequence in the ending, initializes the planet theta
; values to 0 for the Y coordinate and 128 for the X coordinate.
_special_planet_init_theta:
    TDC                                                                         ; $13E122 |\ Initialize the X register to zero.
    TAX                                                                         ; $13E123 |/
    LDA #128.b                                                                  ; $13E124 |\ Initialize the accumulator to 128.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E126 |/
-   STZ r_special_planet_theta_y.w,X                                            ; $13E128 |\
    STA r_special_planet_theta_x.w,X                                            ; $13E12B | | Set the Y theta value for each entry to zero and the X theta value
    INX                                                                         ; $13E12E | | for each entry to 128.
    INX                                                                         ; $13E12F | |
    CPX #_sizeof_r_special_planet_theta_y.w                                     ; $13E130 | |
    BNE -                                                                       ; $13E133 | |
    TDC                                                                         ; $13E135 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E136 |/
    RTS                                                                         ; $13E138

; _special_planet_set_update_coordinates_earth ($13:E139)
;
; For the planet animation in the ending sequence, updates the arguments to the
; OAM update routine to set the current coordinates to the calculated earth
; coordinates.
_special_planet_set_update_coordinates_earth:
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E139 |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E13B | | Set the X coordinate argument to the barycenter X coordinate plus
    CLC                                                                         ; $13E13D | | the earth X coordinate.
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_EARTH       ; $13E13E | |
    STA <r_special_planet_update_oam_arg_coordinates.x                          ; $13E140 |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E142 |\
    CLC                                                                         ; $13E144 | | Set the Y coordinate argument to the barycenter Y coordinate plus
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_EARTH       ; $13E145 | | the earth Y coordinate.
    STA <r_special_planet_update_oam_arg_coordinates.y                          ; $13E147 | |
    TDC                                                                         ; $13E149 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E14A |/
    RTS                                                                         ; $13E14C

; _special_planet_draw_earth ($13:E14D)
;
; In the planet animation in the ending sequence, draws the earth sprites by
; writing the appropriate entries to the OAM mirror.
_special_planet_draw_earth:
    LDA r_special_planet_earth_small.w                                          ; $13E14D |\
    BEQ +                                                                       ; $13E150 | | If the small earth flag is set, draw four tiles representing the
    JSR _special_planet_set_update_coordinates_earth                            ; $13E152 | | small earth, before returning.
    LDA #PLANET_SPRITE_INDEX_EARTH_SMALL.b                                      ; $13E155 | |
    STA <r_special_planet_update_oam_arg_base_index                             ; $13E157 | |
    LDA #4.b                                                                    ; $13E159 | |
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E15B | |
    JSR _special_update_planet_oam                                              ; $13E15D | |
    RTS                                                                         ; $13E160 |/
+   JSR _special_planet_set_update_coordinates_earth                            ; $13E161 |\
    LDA #PLANET_SPRITE_INDEX_EARTH_LARGE_SHADOW.b                               ; $13E164 | | Otherwise, start by drawing the earth's shadow.
    STA <r_special_planet_update_oam_arg_base_index                             ; $13E166 | |
    LDA #15.b                                                                   ; $13E168 | |
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E16A | |
    JSR _special_update_planet_oam                                              ; $13E16C |/
    JSR _special_planet_set_update_coordinates_earth                            ; $13E16F |\
    STZ <r_special_planet_update_oam_arg_base_index                             ; $13E172 | | Next, draw the actual earth, to display it under the shadow.
    LDA #16.b                                                                   ; $13E174 | |
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E176 | |
    JSR _special_update_planet_oam                                              ; $13E178 |/
    RTS                                                                         ; $13E17B

; _special_planet_draw_sun ($13:E17C)
;
; In the planet animation in the ending sequence, draws the sun by writing the
; appropriate entries to the OAM mirror.
_special_planet_draw_sun:
    LDA <r_special_frame_counter                                                ; $13E17C |\
    AND #%00000111.b                                                            ; $13E17E | | Skip this function if the frame counter mod 8 is zero.
    BEQ +                                                                       ; $13E180 |/
    LDX <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_SUN         ; $13E182 |\ Set the X coordinate to the sun's X coordinate.
    STX <r_special_planet_update_oam_arg_coordinates.x                          ; $13E184 |/
    LDX <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_SUN         ; $13E186 |\ Set the Y coordinate to the sun's Y coordinate.
    STX <r_special_planet_update_oam_arg_coordinates.y                          ; $13E188 |/
    LDA #PLANET_SPRITE_INDEX_SUN.b                                              ; $13E18A |\ Set the sprite index to the sun's sprite index.
    STA <r_special_planet_update_oam_arg_base_index                             ; $13E18C |/
    LDA #24.b                                                                   ; $13E18E |\ Set the tile count to 24 (a 5x5 grid, with the lower left tile
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E190 |/ omitted).
    JSR _special_update_planet_oam                                              ; $13E192 | Draw the sprites.
+   RTS                                                                         ; $13E195

; _special_planet_draw_brown_and_green ($13:E196)
;
; For the planet animation in the ending sequence, draws the green and brown
; planets by writing the appropriate values to the OAM mirror.
_special_planet_draw_brown_and_green:
    LDX #PLANET_THETA_MAGNITUDE_INDEX_BROWN.w                                   ; $13E196 |\ Get the current sprite index for the brown planet.
    JSR _special_planet_get_sprite_index_planet                                 ; $13E199 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E19C |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_BROWN       ; $13E19E | | Calculate the brown planet's X coordinate by adding its X
    CLC                                                                         ; $13E1A0 | | coordinate to the sun's X coordinate.
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_SUN         ; $13E1A1 | |
    STA <r_special_planet_update_oam_arg_coordinates.x                          ; $13E1A3 |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_BROWN       ; $13E1A5 |\
    CLC                                                                         ; $13E1A7 | | Calculate the brown planet's Y coordinate by adding its Y
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_SUN         ; $13E1A8 | | coordinate value to the sun's Y coordinate plus 12.
    ADC #12.w                                                                   ; $13E1AA | |
    STA <r_special_planet_update_oam_arg_coordinates.y                          ; $13E1AD | |
    TDC                                                                         ; $13E1AF | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E1B0 |/
    LDA #4.b                                                                    ; $13E1B2 |\
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E1B4 | | Update the brown planet's OAM drawing four tiles with palette 2.
    LDA #2.b                                                                    ; $13E1B6 | |
    JSR _special_update_planet_oam_with_palette                                 ; $13E1B8 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_GREEN.w                                   ; $13E1BB |\ Get the current sprite index for the green planet.
    JSR _special_planet_get_sprite_index_planet                                 ; $13E1BE |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E1C1 |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_GREEN       ; $13E1C3 | | Calculate the green planet's X coordinate by adding its X
    CLC                                                                         ; $13E1C5 | | coordinate to the sun's X coordinate.
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_SUN         ; $13E1C6 | |
    STA <r_special_planet_update_oam_arg_coordinates.x                          ; $13E1C8 |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_GREEN       ; $13E1CA |\
    CLC                                                                         ; $13E1CC | | Calculate the green planet's Y coordinate by adding its Y
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_SUN         ; $13E1CD | | coordinate to the sun's Y coordinate.
    ADC #12.w                                                                   ; $13E1CF | |
    STA <r_special_planet_update_oam_arg_coordinates.y                          ; $13E1D2 | |
    TDC                                                                         ; $13E1D4 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E1D5 |/
    LDA #4.b                                                                    ; $13E1D7 |\ Set the tile count to four.
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E1D9 |/
    LDA #3.b                                                                    ; $13E1DB |\ Update the green planet's OAM drawing four tiles with palette 3.
    JSR _special_update_planet_oam_with_palette                                 ; $13E1DD |/
    RTS                                                                         ; $13E1E0

; _special_planet_draw_moon_1 ($13:E1E1)
;
; In the planet animation in the ending sequence, draws the first moon,
; including adjusting the background parameters for the departing moon if the
; departing moon is active.
_special_planet_draw_moon_1:
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_1.w                                  ; $13E1E1 |\ Get the current sprite index for the first moon.
    JSR _special_planet_get_sprite_index_moon                                   ; $13E1E4 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E1E7 |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_MOON_1      ; $13E1E9 | | Set the X coordinate to the moon's X coordinate plus the
    CLC                                                                         ; $13E1EB | | barycenter X coordinate plus the earth X coordinate plus 8.
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E1EC | |
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_EARTH       ; $13E1EE | |
    ADC #8.w                                                                    ; $13E1F0 | |
    STA <r_special_planet_update_oam_arg_coordinates.x                          ; $13E1F3 |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_MOON_1      ; $13E1F5 |\
    CLC                                                                         ; $13E1F7 | | Set the Y coordinate to the moon's Y coordinate plus the
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E1F8 | | barycenter Y coordinate plus the earth Y coordinate plus 8.
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_EARTH       ; $13E1FA | |
    ADC #8.w                                                                    ; $13E1FC | |
    STA <r_special_planet_update_oam_arg_coordinates.y                          ; $13E1FF | |
    TDC                                                                         ; $13E201 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E202 |/
    LDA #4.b                                                                    ; $13E204 |\ Set the tile count to four.
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E206 |/
    LDA r_special_departing_moon_active.w                                       ; $13E208 |\ If the departing moon is not active, branch to the done code.
    BEQ @done                                                                   ; $13E20B |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E20D |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_SUN         ; $13E20F | | Add the sun X coordinate and the departing moon X coordinate. Flip
    CLC                                                                         ; $13E211 | | the bits to roughly negate the value, and then subtract the
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_DEPARTING   ; $13E212 | | X offset, and save the result as the BG1 horizontal scroll.
    EOR #$FFFF.w                                                                ; $13E214 | |
    SEC                                                                         ; $13E217 | |
    SBC <r_special_planet_departing_moon_offset_x                               ; $13E218 | |
    STA <r_special_moon_bg1_scroll_horizontal                                   ; $13E21A |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_SUN         ; $13E21C |\
    CLC                                                                         ; $13E21E | | Set the BG1 vertical scroll register in a similar fashion.
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_DEPARTING   ; $13E21F | |
    EOR #$FFFF.w                                                                ; $13E221 | |
    SEC                                                                         ; $13E224 | |
    SBC <r_special_planet_departing_moon_offset_y                               ; $13E225 | |
    STA <r_special_moon_bg1_scroll_vertical                                     ; $13E227 | |
    TDC                                                                         ; $13E229 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E22A |/
    LDX r_special_moon_mode_7_scale.w                                           ; $13E22C |\
    CPX #4.w                                                                    ; $13E22F | | If the mode 7 scale value is not less than 4, decrement the value
    BCC +                                                                       ; $13E232 | | by three and increase the first moon's magnitude by 2.
    DEX                                                                         ; $13E234 | |
    DEX                                                                         ; $13E235 | |
    DEX                                                                         ; $13E236 | |
    STX r_special_moon_mode_7_scale.w                                           ; $13E237 | |
    LDX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13E23A | |
    INX                                                                         ; $13E23D | |
    INX                                                                         ; $13E23E | |
    STX r_special_planet_magnitude_x.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1    ; $13E23F |/
+   RTS                                                                         ; $13E242
@done:
    JSR _special_update_planet_oam                                              ; $13E243 | If the departing moon is inactive, simply draw the regular sprite.
    RTS                                                                         ; $13E246

; _special_planet_draw_stars ($13:E247)
;
; For the planet animation in the ending sequence, draws the random stars that
; make up the background.
_special_planet_draw_stars:
    LDA #72.b                                                                   ; $13E247 |\ Set the OAM index to start at 72.
    STA <r_special_planet_update_oam_arg_oam_index                              ; $13E249 |/
    TDC                                                                         ; $13E24B |\ Initialize the X register to zero.
    TAX                                                                         ; $13E24C |/
-   INC r_special_planet_star_index.w                                           ; $13E24D | Increment the current star index.
    PHA                                                                         ; $13E250 |\ Preserve the accumulator and X register.
    PHX                                                                         ; $13E251 |/
    LDA bank14.prng_data.l,X                                                    ; $13E252 |\
    TAY                                                                         ; $13E256 | | Set the X coordinate to a random value.
    STY <r_special_planet_update_oam_arg_coordinates.x.lo                       ; $13E257 |/
    TAX                                                                         ; $13E259 |\
    LDA bank14.prng_data.l,X                                                    ; $13E25A | | Set the Y coordinate to a random value.
    TAY                                                                         ; $13E25E | |
    STY <r_special_planet_update_oam_arg_coordinates.y.lo                       ; $13E25F |/
    TYA                                                                         ; $13E261 |\
    LDA r_special_planet_star_index.w                                           ; $13E262 | | Set the sprite index to either $50 or $51, which are both stars.
    AND #%00000111.b                                                            ; $13E265 | | The the larger variant every 8 entries.
    BEQ +                                                                       ; $13E267 | |
    LDA #1.b                                                                    ; $13E269 | |
+   CLC                                                                         ; $13E26B | |
    ADC #PLANET_SPRITE_INDEX_STAR_BASE.b                                        ; $13E26C | |
    STA <r_special_planet_update_oam_arg_base_index                             ; $13E26E |/
    LDA #1.b                                                                    ; $13E270 |\ Set the tile count to 1.
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E272 |/
    JSR _special_update_planet_oam                                              ; $13E274 | Draw the star.
    PLX                                                                         ; $13E277 |\
    INX                                                                         ; $13E278 | | Restore the original X register and increment it twice.
    INX                                                                         ; $13E279 |/
    PLA                                                                         ; $13E27A |\ Restore the accumulator and increment it.
    INC A                                                                       ; $13E27B |/
    CMP #56.b                                                                   ; $13E27C |\ Loop until 56 stars have been generated.
    BNE -                                                                       ; $13E27E |/
    RTS                                                                         ; $13E280

; _special_planet_draw_moon_2 ($13:E281)
;
; Part of the planet animation in the ending sequence, draws the second moon by
; writing the appropriate entries to the OAM mirror.
_special_planet_draw_moon_2:
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_2.w                                  ; $13E281 |\ Get the current sprite index for the second moon.
    JSR _special_planet_get_sprite_index_moon                                   ; $13E284 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E287 |\
    LDA <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_MOON_2      ; $13E289 | | Set the moon's X coordinate to the offset for the moon plus the
    CLC                                                                         ; $13E28B | | barycenter X coordinate plus the earth X coordinate plus 8.
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E28C | |
    ADC <r_special_planet_coordinates.1.x + PLANET_COORDINATE_INDEX_EARTH       ; $13E28E | |
    ADC #8.w                                                                    ; $13E290 | |
    STA <r_special_planet_update_oam_arg_coordinates.x                          ; $13E293 |/
    LDA <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_MOON_2      ; $13E295 |\
    CLC                                                                         ; $13E297 | | Set the moon's Y coordinate to the offset for the moon plus the
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_BARYCENTER  ; $13E298 | | barycenter Y coordinate plus the earth Y coordinate plus 8.
    ADC <r_special_planet_coordinates.1.y + PLANET_COORDINATE_INDEX_EARTH       ; $13E29A | |
    ADC #8.w                                                                    ; $13E29C | |
    STA <r_special_planet_update_oam_arg_coordinates.y                          ; $13E29F | |
    TDC                                                                         ; $13E2A1 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E2A2 |/
    LDA #4.b                                                                    ; $13E2A4 |\ Set the tile count to four.
    STA <r_special_planet_update_oam_arg_tile_count                             ; $13E2A6 |/
    JSR _special_update_planet_oam                                              ; $13E2A8 | Draw the moon.
    RTS                                                                         ; $13E2AB

; ending_planet_frame_data ($13:E2AC)
;
; For the moons and planets in the ending sequence, determines which sprite to
; use, depending on the current theta value for the body.
ending_planet_frame_data:
    .db $04, $03, $02, $01, $00, $01, $02, $03                                  ; $13E2AC.E2B3 | $00: Moons with Large Earth
    .db $04, $05, $06, $07, $07, $07, $06, $05                                  ; $13E2B4.E2BB
    .db $07, $06, $06, $06, $06, $06, $06, $06                                  ; $13E2BC.E2C3 | $10: Moons with Small Earth
    .db $07, $07, $07, $07, $07, $07, $07, $07                                  ; $13E2C4.E2CB
    .db $05, $04, $04, $03, $02, $03, $04, $04                                  ; $13E2CC.E2D3 | $20: Other Planets
    .db $05, $05, $06, $06, $07, $06, $06, $05                                  ; $13E2D4.E2DB

; _special_planet_get_sprite_index_* ($13:E2DC)
;
; Depending on the entry point, gets the desired sprite index for either a
; planet or a moon, depending on its current theta value and the location of the
; earth for moons. The desired planet's theta/magnitude index should be passed
; in the X register.
_special_planet_get_sprite_index_planet:
    LDA #PLANET_SPRITE_BASE_FRAME_INDEX_PLANET.b                                ; $13E2DC |\ Set the base index to 32.
    STA <r_special_generic_tmp_4                                                ; $13E2DE |/
    BRA __special_planet_get_sprite_index_common                                ; $13E2E0 | Branch to the common code.
_special_planet_get_sprite_index_moon:
    STZ <r_special_generic_tmp_4                                                ; $13E2E2 |\
    LDA r_special_planet_earth_small.w                                          ; $13E2E4 | | Set the base index to 0 if a small earth, but 16 if a large earth.
    BEQ __special_planet_get_sprite_index_common                                ; $13E2E7 | |
    LDA #PLANET_SPRITE_BASE_FRAME_INDEX_MOON_NEAR.b                             ; $13E2E9 | |
    STA <r_special_generic_tmp_4                                                ; $13E2EB |/
__special_planet_get_sprite_index_common:
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E2ED |\
    LDA r_special_planet_theta_y.w,X                                            ; $13E2EF | | Divide the planet's theta value mod 512 by 32 to get an index
    AND #$01FF.w                                                                ; $13E2F2 | | ranging from 0 to 15.
    LSR A                                                                       ; $13E2F5 | |
    LSR A                                                                       ; $13E2F6 | |
    LSR A                                                                       ; $13E2F7 | |
    LSR A                                                                       ; $13E2F8 | |
    LSR A                                                                       ; $13E2F9 | |
    STA <r_special_generic_tmp_5                                                ; $13E2FA | |
    TDC                                                                         ; $13E2FC | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E2FD |/
    LDA <r_special_generic_tmp_5.lo                                             ; $13E2FF |\
    CLC                                                                         ; $13E301 | | Calculate the base index for this planet by using the previously
    ADC <r_special_generic_tmp_4                                                ; $13E302 | | calculated index and adding the base index, looking up the correct
    TAX                                                                         ; $13E304 | | frame from the table in ROM, multiplying by four (four entries per
    LDA ending_planet_frame_data.l,X                                            ; $13E305 | | value), and then adding to $10, the base index.
    ASL A                                                                       ; $13E309 | |
    ASL A                                                                       ; $13E30A | | This index is used to index the table at $12:F660.
    CLC                                                                         ; $13E30B | |
    ADC #PLANET_SPRITE_INDEX_MOON_BASE.b                                        ; $13E30C | |
    STA <r_special_planet_update_oam_arg_base_index                             ; $13E30E |/
    RTS                                                                         ; $13E310

; _special_planet_draw_planets ($13:E311)
;
; In the planet animation in the ending sequence, draws the sun and planets by
; updating the OAM mirror with the appropriate entries.
_special_planet_draw_planets:
    STZ r_special_planet_suppress_low_priority_moon_1.w                         ; $13E311 |\ Initialize the low priority suppression flags to zero.
    STZ r_special_planet_suppress_low_priority_moon_2.w                         ; $13E314 |/
    STZ <r_special_planet_update_oam_arg_oam_index                              ; $13E317 | Initialize the OAM index to zero.
    LDA r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_EARTH + 1     ; $13E319 |\
    AND #%00000001.b                                                            ; $13E31C | | Set the small earth flag if the earth's theta is appropriate.
    STA r_special_planet_earth_small.w                                          ; $13E31E |/
    LDA r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_1 + 1    ; $13E321 |\
    AND #%00000001.b                                                            ; $13E324 | | If the first moon is currently in front of the earth, draw it now
    BNE +                                                                       ; $13E326 | | and suppress the drawing later.
    JSR _special_planet_draw_moon_1                                             ; $13E328 | |
    INC r_special_planet_suppress_low_priority_moon_1.w                         ; $13E32B |/
+   LDA r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_MOON_2 + 1    ; $13E32E |\
    AND #%00000001.b                                                            ; $13E331 | | if the second moon is currently in front of the earth, draw it now
    BNE +                                                                       ; $13E333 | | and suppress the drawing later.
    JSR _special_planet_draw_moon_2                                             ; $13E335 | |
    INC r_special_planet_suppress_low_priority_moon_2.w                         ; $13E338 |/
+   JSR _special_planet_draw_earth                                              ; $13E33B | Draw the earth.
    LDA r_special_planet_suppress_low_priority_moon_1.w                         ; $13E33E |\
    BNE +                                                                       ; $13E341 | | If not suppressed, draw the first moon.
    JSR _special_planet_draw_moon_1                                             ; $13E343 |/
+   LDA r_special_planet_suppress_low_priority_moon_2.w                         ; $13E346 |\
    BNE +                                                                       ; $13E349 | | If not suppressed, draw the second moon.
    JSR _special_planet_draw_moon_2                                             ; $13E34B |/
+   LDA r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_BROWN + 1     ; $13E34E |\
    AND #%00000001.b                                                            ; $13E351 | | If the brown planet's theta value is in the range 256 to 511, draw
    BEQ +                                                                       ; $13E353 | | the sun and then draw the brown and green planets. (This will give
    JSR _special_planet_draw_sun                                                ; $13E355 | | the sun higher priority with a lower OAM index.)
    JSR _special_planet_draw_brown_and_green                                    ; $13E358 |/
    BRA ++                                                                      ; $13E35B |\
+   JSR _special_planet_draw_brown_and_green                                    ; $13E35D | | Otherwise, reverse the order to reverse the priority.
    JSR _special_planet_draw_sun                                                ; $13E360 |/
++  LDA r_special_planet_earth_small.w                                          ; $13E363 |\
    BNE +                                                                       ; $13E366 | | Set the magnitude of the moon orbits, depending on if the earth is
    JSR _special_planet_set_moon_magnitude_near                                 ; $13E368 | | currently on the near or far side of the sun.
    BRA ++                                                                      ; $13E36B | |
+   JSR _special_planet_set_moon_magnitude_far                                  ; $13E36D |/
++  JSR _special_update_all_planet_coordinates                                  ; $13E370 | Update the planet coordinates.
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_1.w                                  ; $13E373 |\
    LDY #-1.w                                                                   ; $13E376 | | Subtract one from the first moon's theta value.
    JSR _special_planet_update_theta                                            ; $13E379 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_MOON_2.w                                  ; $13E37C |\
    LDY #-1.w                                                                   ; $13E37F | | Subtract one from the second moon's theta value.
    JSR _special_planet_update_theta                                            ; $13E382 |/
    LDA r_special_planet_earth_small.w                                          ; $13E385 |\
    TAX                                                                         ; $13E388 | | Branch to return unless the the frame counter, masked by a mask
    LDA ending_earth_theta_update_mask_data.l,X                                 ; $13E389 | | specific to the current size of the earth sprite, is zero.
    STA <r_special_generic_tmp_4                                                ; $13E38D | |
    LDA <r_special_frame_counter                                                ; $13E38F | | The two speeds serve to have the planets move more slowly on the
    AND <r_special_generic_tmp_4                                                ; $13E391 | | far side of the sun.
    BNE +                                                                       ; $13E393 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_EARTH.w                                   ; $13E395 |\
    LDY #-1.w                                                                   ; $13E398 | | Subtract one from the earth's theta value.
    JSR _special_planet_update_theta                                            ; $13E39B |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_BROWN.w                                   ; $13E39E |\
    LDY #-1.w                                                                   ; $13E3A1 | | Subtract one from the brown planet's theta value.
    JSR _special_planet_update_theta                                            ; $13E3A4 |/
    LDX #PLANET_THETA_MAGNITUDE_INDEX_GREEN.w                                   ; $13E3A7 |\
    LDY #-1.w                                                                   ; $13E3AA | | Subtract one from the green planet's theta value.
    JSR _special_planet_update_theta                                            ; $13E3AD |/
+   RTS                                                                         ; $13E3B0

; ending_earth_theta_update_mask_data ($13:E3B1)
;
; For the two sizes of earth sprite, determines the mask to check the frame
; counter to determine whether to update the theta value of the three planets.
ending_earth_theta_update_mask_data:
    .db %00000011                                                               ; $13E3B1
    .db %00000111                                                               ; $13E3B2

; special_nmi_handler ($13:E3B3)
;
; NMI handler for the three special effect sequences in the ending.
special_nmi_handler:
    PHP                                                                         ; $13E3B3 | Preserve the value of the processor flags.
    REP #FLAG_P_INDEX | FLAG_P_ACCUMULATOR                                      ; $13E3B4 | Enable 16-bit accumulator and index registers.
    PHA                                                                         ; $13E3B6 |\
    PHX                                                                         ; $13E3B7 | | Preserve the accumulator, X, Y, data bank and direct registers.
    PHY                                                                         ; $13E3B8 | |
    PHB                                                                         ; $13E3B9 | |
    PHD                                                                         ; $13E3BA |/
    LDX #$0000.w                                                                ; $13E3BB |\
    PHX                                                                         ; $13E3BE | | Set the direct register to $0000.
    PLD                                                                         ; $13E3BF |/
    TDC                                                                         ; $13E3C0 |\ Return to 8-bit accumulator mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E3C1 |/
    LDA reg_cpu_rdnmi.l                                                         ; $13E3C3 | Reset the NMI flag.
    LDA #$7E.b                                                                  ; $13E3C7 |\
    PHA                                                                         ; $13E3C9 | | Set the data bank register to $7E.
    PLB                                                                         ; $13E3CA |/
    LDA <r_special_nmi_lock                                                     ; $13E3CB |\
    BEQ +                                                                       ; $13E3CD | | If the NMI lock is set, branch to return.
    JMP @done                                                                   ; $13E3CF |/
+   INC <r_special_nmi_lock                                                     ; $13E3D2 | Set the NMI lock.
    LDA r_special_ppu_inidisp.w                                                 ; $13E3D4 |\ Set the current PPU brightness value.
    STA reg_ppu_inidisp.l                                                       ; $13E3D7 |/
    LDA <r_special_ppu_m7sel                                                    ; $13E3DB |\ Set the current mode 7 settings.
    STA reg_ppu_m7sel.l                                                         ; $13E3DD |/
    LDA r_special_ppu_tm.w                                                      ; $13E3E1 |\ Set the current main screen value.
    STA reg_ppu_tm.l                                                            ; $13E3E4 |/
    LDA <r_special_background_mode                                              ; $13E3E8 |\
    CMP #SPECIAL_BACKGROUND_MODE_MOON.b                                         ; $13E3EA | | Branch to moon-specific code if that mode is enabled.
    BEQ @moon                                                                   ; $13E3EC |/
    LDA <r_special_frame_counter                                                ; $13E3EE |\
    AND #%00000011.b                                                            ; $13E3F0 | | Skip to the common code unless the frame counter mod 4 is zero.
    BEQ +                                                                       ; $13E3F2 | |
    JMP @common                                                                 ; $13E3F4 |/
+   LDA <r_special_bg1_scroll_vertical.lo                                       ; $13E3F7 |\
    STA reg_ppu_bg1v0fs.l                                                       ; $13E3F9 | | Set the BG1 vertical scroll value.
    LDA <r_special_bg1_scroll_vertical.hi                                       ; $13E3FD | |
    STA reg_ppu_bg1v0fs.l                                                       ; $13E3FF |/
    LDA <r_special_ppu_m7x.lo                                                   ; $13E403 |\
    STA reg_ppu_m7x.l                                                           ; $13E405 | | Set the mode 7 center coordinate.
    LDA <r_special_ppu_m7x.hi                                                   ; $13E409 | |
    STA reg_ppu_m7x.l                                                           ; $13E40B | |
    LDA <r_special_ppu_m7y.lo                                                   ; $13E40F | |
    STA reg_ppu_m7y.l                                                           ; $13E411 | |
    LDA <r_special_ppu_m7y.hi                                                   ; $13E415 | |
    STA reg_ppu_m7y.l                                                           ; $13E417 |/
    LDA r_special_vram_copy_disable_primary.w                                   ; $13E41B |\ Skip to the common code if the primary VRAM copy is disabled.
    BNE @common                                                                 ; $13E41E |/
    LDA <r_special_background_mode                                              ; $13E420 |\
    BEQ +                                                                       ; $13E422 | | If the background mode is not legend (and therefore is credits),
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E424 | | increment the BG1 vertical scroll register by one. If the result
    LDA <r_special_bg1_scroll_vertical                                          ; $13E426 | | is 1024, load zero into the accumulator instead.
    INC A                                                                       ; $13E428 | |
    CMP #1024.w                                                                 ; $13E429 | |
    BNE ++                                                                      ; $13E42C | |
    TDC                                                                         ; $13E42E | |
    BRA ++                                                                      ; $13E42F |/
+   REP #FLAG_P_ACCUMULATOR                                                     ; $13E431 |\
    LDA <r_special_bg1_scroll_vertical                                          ; $13E433 | | If the background mode is legend, also increment the BG1 vertical
    INC A                                                                       ; $13E435 | | scroll register by one. In this case, if the result is 1024,
    CMP #1024.w                                                                 ; $13E436 | | decrement it to 1023 instead.
    BNE ++                                                                      ; $13E439 | |
    DEC A                                                                       ; $13E43B |/
++  STA <r_special_bg1_scroll_vertical                                          ; $13E43C | Store the loaded value as the updated BG1 vertical scroll value.
    CLC                                                                         ; $13E43E |\
    ADC #128.w                                                                  ; $13E43F | | Set the mode 7 center Y coordinate to the new scroll plus 128.
    STA <r_special_ppu_m7y                                                      ; $13E442 |/
    TDC                                                                         ; $13E444 |\
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E445 | | Switch back to 8-bit accumulator mode and branch to common code.
    BRA @common                                                                 ; $13E447 |/
@moon:
    LDA <r_special_moon_mode_7_scale.lo.w                                       ; $13E449 |\
    STA reg_ppu_m7a.l                                                           ; $13E44C | | Set the current moon scaling value.
    LDA <r_special_moon_mode_7_scale.hi.w                                       ; $13E450 | |
    STA reg_ppu_m7a.l                                                           ; $13E453 | |
    LDA <r_special_moon_mode_7_scale.lo.w                                       ; $13E457 | |
    STA reg_ppu_m7d.l                                                           ; $13E45A | |
    LDA <r_special_moon_mode_7_scale.hi.w                                       ; $13E45E | |
    STA reg_ppu_m7d.l                                                           ; $13E461 |/
    LDA <r_special_moon_bg1_scroll_horizontal.lo                                ; $13E465 |\
    STA reg_ppu_bg1h0fs.l                                                       ; $13E467 | | Set the BG1 horizontal scroll.
    LDA <r_special_moon_bg1_scroll_horizontal.hi                                ; $13E46B | |
    STA reg_ppu_bg1h0fs.l                                                       ; $13E46D |/
    LDA <r_special_moon_bg1_scroll_vertical.lo                                  ; $13E471 |\
    STA reg_ppu_bg1v0fs.l                                                       ; $13E473 | | Set the BG1 vertical scroll.
    LDA <r_special_moon_bg1_scroll_vertical.hi                                  ; $13E477 | |
    STA reg_ppu_bg1v0fs.l                                                       ; $13E479 |/
    LDA <r_special_ppu_m7x.lo                                                   ; $13E47D |\
    STA reg_ppu_m7x.l                                                           ; $13E47F | | Set the mode 7 center coordinates.
    LDA <r_special_ppu_m7x.hi                                                   ; $13E483 | |
    STA reg_ppu_m7x.l                                                           ; $13E485 | |
    LDA <r_special_ppu_m7y.lo                                                   ; $13E489 | |
    STA reg_ppu_m7y.l                                                           ; $13E48B | |
    LDA <r_special_ppu_m7y.hi                                                   ; $13E48F | |
    STA reg_ppu_m7y.l                                                           ; $13E491 |/
@common:
    JSR _special_copy_oam_to_ppu                                                ; $13E495 | Copy the OAM to the PPU.
    JSR _special_copy_cgram_to_ppu                                              ; $13E498 | Copy the CG-RAM to the PPU.
    LDA <r_special_background_mode                                              ; $13E49B |\
    CMP #SPECIAL_BACKGROUND_MODE_CREDITS.b                                      ; $13E49D | | If the background mode is set to the credits, do the primary VRAM
    BNE +                                                                       ; $13E49F | | copy to copy the credits text and update the star field OAM
    JSR _special_vram_copy_primary                                              ; $13E4A1 | | entries, before branching ahead.
    JSR _special_star_field_update_oam                                          ; $13E4A4 | |
    JMP ++                                                                      ; $13E4A7 |/
+   JSR _special_update_earth_tiles                                             ; $13E4AA | Update the earth tiles if appropriate this frame.
    JSR _special_set_oam_to_70_x_240                                            ; $13E4AD | Set the X coordinate of the first 70 OAM entries to 240.
    JSR _special_legend_moon_update_palettes                                    ; $13E4B0 | Update the palettes used by the stars and sun.
    JSR _special_planet_draw_planets                                            ; $13E4B3 | Draw the planets and sun.
    LDA <r_special_background_mode                                              ; $13E4B6 |\
    BEQ ++                                                                      ; $13E4B8 | | If the background mode is set to the moon sequence and if the
    LDX r_special_planet_theta_y.w + PLANET_THETA_MAGNITUDE_INDEX_EARTH         ; $13E4BA | | earth theta value has reached -128, set the departing moon active
    CPX #-128.w                                                                 ; $13E4BD | | flag.
    BNE ++                                                                      ; $13E4C0 | |
    LDA #1.b                                                                    ; $13E4C2 | |
    STA r_special_departing_moon_active.w                                       ; $13E4C4 |/
++  LDA r_special_departing_moon_active.w                                       ; $13E4C7 |\
    BEQ +                                                                       ; $13E4CA | | If the departing moon is active and if the frame counter mod 4 is
    LDA <r_special_frame_counter                                                ; $13E4CC | | zero, increment the departing moon's theta values by one.
    AND #%00000011.b                                                            ; $13E4CE | |
    BNE +                                                                       ; $13E4D0 | |
    LDX #PLANET_THETA_MAGNITUDE_INDEX_DEPARTING.w                               ; $13E4D2 | |
    LDY #1.w                                                                    ; $13E4D5 | |
    JSR _special_planet_update_theta                                            ; $13E4D8 |/
+   LDA r_the_end_palette_cycle_enabled.w                                       ; $13E4DB |\
    BEQ +                                                                       ; $13E4DE | | If the ending palette cycling is enabled, update the effect.
    JSR _special_the_end_palette_cycle_update                                   ; $13E4E0 |/
+   STZ <r_special_nmi_lock                                                     ; $13E4E3 | Reset the NMI lock.
    STZ <r_special_nmi_flag                                                     ; $13E4E5 | Reset the NMI flag.
    INC <r_special_frame_counter                                                ; $13E4E7 | Increment the frame counter.
@done:
    REP #FLAG_P_INDEX | FLAG_P_ACCUMULATOR                                      ; $13E4E9 |\
    PLD                                                                         ; $13E4EB | | Restore all the backed up registers.
    PLB                                                                         ; $13E4EC | |
    PLY                                                                         ; $13E4ED | |
    PLX                                                                         ; $13E4EE | |
    PLA                                                                         ; $13E4EF | |
    PLP                                                                         ; $13E4F0 |/
    RTI                                                                         ; $13E4F1

; earth_circle_prefix_blank_data ($13:E4F2)
;
; For each row of the rotating earth sprites, determines the number of blank
; pixels to prefix each row with to generate the circle shape.
earth_circle_prefix_blank_data:
    .db 13                                                                      ; $13E4F2
    .db 10                                                                      ; $13E4F3
    .db  8                                                                      ; $13E4F4
    .db  7                                                                      ; $13E4F5
    .db  5                                                                      ; $13E4F6
    .db  4                                                                      ; $13E4F7
    .db  4                                                                      ; $13E4F8
    .db  3                                                                      ; $13E4F9
    .db  2                                                                      ; $13E4FA
    .db  2                                                                      ; $13E4FB
    .db  1                                                                      ; $13E4FC
    .db  1                                                                      ; $13E4FD
    .db  1                                                                      ; $13E4FE
    .db  0                                                                      ; $13E4FF
    .db  0                                                                      ; $13E500
    .db  0                                                                      ; $13E501
    .db  0                                                                      ; $13E502
    .db  0                                                                      ; $13E503
    .db  0                                                                      ; $13E504
    .db  1                                                                      ; $13E505
    .db  1                                                                      ; $13E506
    .db  1                                                                      ; $13E507
    .db  2                                                                      ; $13E508
    .db  2                                                                      ; $13E509
    .db  3                                                                      ; $13E50A
    .db  4                                                                      ; $13E50B
    .db  4                                                                      ; $13E50C
    .db  5                                                                      ; $13E50D
    .db  7                                                                      ; $13E50E
    .db  8                                                                      ; $13E50F
    .db 10                                                                      ; $13E510
    .db 13                                                                      ; $13E511

; _special_multiply_16bit ($13:E512)
;
; Given two 16-bit numbers in $0E and $10, multiplies the two values and
; returns the 32-bit result in $12.
_special_multiply_16bit:
    PHX                                                                         ; $13E512 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E513 | | Preserve the accumulator and X register.
    PHA                                                                         ; $13E515 |/
    STZ <r_special_multiply_16bit_tmp                                           ; $13E516 |\
    STZ <r_special_multiply_16bit_result.lo                                     ; $13E518 | | Initialize the result and temporary to zero.
    STZ <r_special_multiply_16bit_result.hi                                     ; $13E51A |/
    LDX #16.w                                                                   ; $13E51C | Initialize the X register to 16.
-   LSR <r_special_multiply_16bit_arg_1                                         ; $13E51F |\
    BCC +                                                                       ; $13E521 | | If the next bit is set, add the current value into the result.
    CLC                                                                         ; $13E523 | |
    LDA <r_special_multiply_16bit_result.lo                                     ; $13E524 | |
    ADC <r_special_multiply_16bit_arg_2                                         ; $13E526 | |
    STA <r_special_multiply_16bit_result.lo                                     ; $13E528 | |
    LDA <r_special_multiply_16bit_result.hi                                     ; $13E52A | |
    ADC <r_special_multiply_16bit_tmp                                           ; $13E52C | |
    STA <r_special_multiply_16bit_result.hi                                     ; $13E52E |/
+   ASL <r_special_multiply_16bit_arg_2                                         ; $13E530 |\ Multiply the current value by two to move to the next place.
    ROL <r_special_multiply_16bit_tmp                                           ; $13E532 |/
    DEX                                                                         ; $13E534 |\ Loop until all sixteen bits have been processed.
    BNE -                                                                       ; $13E535 |/
    PLA                                                                         ; $13E537 |\
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E538 | | Restore the accumulator and X register.
    PLX                                                                         ; $13E53A |/
    RTS                                                                         ; $13E53B

; _special_multiply_16bit_2 ($13:E53C)
;
; Given two 16-bit numbers in $18 and $1A, multiplies them together and returns
; the 32-bit result in $1C.
_special_multiply_16bit_2:
    PHX                                                                         ; $13E53C | Preserve the X register.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E53D | Switch to 16-bit accumulator mode.
    STZ <r_special_multiply_16bit_2_tmp                                         ; $13E53F |\
    STZ <r_special_multiply_16bit_2_result.lo                                   ; $13E541 | | Initialize the temporary variable and result to zero.
    STZ <r_special_multiply_16bit_2_result.hi                                   ; $13E543 |/
    LDX #16.w                                                                   ; $13E545 | Initialize the X register to 16, to loop through all 16 bits.
-   LSR <r_special_multiply_16bit_2_arg_1                                       ; $13E548 |\
    BCC +                                                                       ; $13E54A | | If the next bit is set, add the current value to the result.
    CLC                                                                         ; $13E54C | |
    LDA <r_special_multiply_16bit_2_result.lo                                   ; $13E54D | |
    ADC <r_special_multiply_16bit_2_arg_2                                       ; $13E54F | |
    STA <r_special_multiply_16bit_2_result.lo                                   ; $13E551 | |
    LDA <r_special_multiply_16bit_2_result.hi                                   ; $13E553 | |
    ADC <r_special_multiply_16bit_2_tmp                                         ; $13E555 | |
    STA <r_special_multiply_16bit_2_result.hi                                   ; $13E557 |/
+   ASL <r_special_multiply_16bit_2_arg_2                                       ; $13E559 |\ Multiply the current value by two to move to the next place.
    ROL <r_special_multiply_16bit_2_tmp                                         ; $13E55B |/
    DEX                                                                         ; $13E55D |\ Decrement the X register and loop until it reaches zero.
    BNE -                                                                       ; $13E55E |/
    TDC                                                                         ; $13E560 |\ Switch back to 8-bit accumulator mode.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E561 |/
    PLX                                                                         ; $13E563 | Restore the X register.
    RTS                                                                         ; $13E564

; _special_planet_calculate_sine_y ($13:E565)
;
; Given the offset to a particular planet in the X register (where each planet
; gets two bytes), calculates the current sine value for that planet's current
; Y theta and magnitude. The 32-bit result is returned in $1C. If assuming a
; base sine magnitude of 1.0, the 16-bit integer portion of the result is
; retuned in $1E.
_special_planet_calculate_sine_y:
    PHX                                                                         ; $13E565 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E566 | | Calculate the sine value, based on the magnitude and current theta
    LDA r_special_planet_magnitude_y.w,X                                        ; $13E568 | | value for the Y coordinate.
    STA <r_special_multiply_16bit_2_arg_1                                       ; $13E56B | |
    LDA r_special_planet_theta_y.w,X                                            ; $13E56D | |
    JSR _special_get_sine_value_2                                               ; $13E570 | |
    TDC                                                                         ; $13E573 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E574 | |
    PLX                                                                         ; $13E576 |/
    RTS                                                                         ; $13E577

; _special_planet_calculate_sine_x ($13:E578)
;
; Given the offset to a particular planet in the X register (where each planet
; gets two bytes), calculates the current sine value for that planet's current
; X theta and magnitude. The 32-bit result is returned in $1C. If assuming a
; base sine magnitude of 1.0, the 16-bit integer portion of the result is
; returned in $1E.
_special_planet_calculate_sine_x:
    PHX                                                                         ; $13E578 |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E579 | | Calculate the sine value, based on the magnitude and current theta
    LDA r_special_planet_magnitude_x.w,X                                        ; $13E57B | | value for the X coordinate.
    STA <r_special_multiply_16bit_2_arg_1                                       ; $13E57E | |
    LDA r_special_planet_theta_x.w,X                                            ; $13E580 | |
    JSR _special_get_sine_value_2                                               ; $13E583 | |
    TDC                                                                         ; $13E586 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E587 | |
    PLX                                                                         ; $13E589 |/
    RTS                                                                         ; $13E58A

; _special_get_sine_value_2 ($13:E58B)
;
; Given a 16-bit scaling factor in $18 and a 16-bit index in the accumulator,
; calculates the corresponding sine value and returns the full 32-bit value in
; $1C. The maximum value is equal to $7FFF times the scaling factor. All numbers
; are treated as signed. The high word of the result can effectively be treated
; as the integer part of the result, assuming a sine wave magnitude of 1.0.
;
; NOTE: This routine is essentially a duplicate of $13:EC5B, except that it
;       operates on slightly different addresses.
_special_get_sine_value_2:
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E58B |\
    AND #(_sizeof_sine_data.w / 2) - 1                                          ; $13E58D | | Load the sine value corresponding to the value passed in the
    ASL A                                                                       ; $13E590 | | accumulator. The value is automatically taken mod 512, and that
    TAX                                                                         ; $13E591 | | is also the period of the sine wave.
    LDA sine_data.l,X                                                           ; $13E592 |/
    BPL +                                                                       ; $13E596 | If the value is positive, branch ahead.
    EOR #$FFFF.w                                                                ; $13E598 |\
    STA <r_special_multiply_16bit_2_arg_2                                       ; $13E59B | | Flip the bits and multiply by the first parameter.
    JSR _special_multiply_16bit_2                                               ; $13E59D |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E5A0 |\
    LDA <r_special_multiply_16bit_2_result.hi                                   ; $13E5A2 | | Flip the bits of the result and add one, before branching later
    EOR #$FFFF.w                                                                ; $13E5A4 | | if the result is positive.
    INC A                                                                       ; $13E5A7 | |
    BPL ++                                                                      ; $13E5A8 |/
-   STA <r_special_multiply_16bit_2_result.hi                                   ; $13E5AA |\
    TDC                                                                         ; $13E5AC | | If the final result is negative, set the carry flag and return.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E5AD | |
    SEC                                                                         ; $13E5AF | |
    RTS                                                                         ; $13E5B0 |/
+   REP #FLAG_P_ACCUMULATOR                                                     ; $13E5B1 |\
    STA <r_special_multiply_16bit_2_arg_2                                       ; $13E5B3 | | If the original value was positive, multiply it by the other
    JSR _special_multiply_16bit_2                                               ; $13E5B5 | | parameter. If the result is negative, branch back to handle a
    REP #FLAG_P_ACCUMULATOR                                                     ; $13E5B8 | | negative result.
    LDA <r_special_multiply_16bit_2_result.hi                                   ; $13E5BA | |
    BMI -                                                                       ; $13E5BC |/
++  STA <r_special_multiply_16bit_2_result.hi                                   ; $13E5BE |\
    TDC                                                                         ; $13E5C0 | | Otherwise, clear the carry flag and return.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13E5C1 | |
    CLC                                                                         ; $13E5C3 |/
    RTS                                                                         ; $13E5C4

; sine_data ($13:E5C5)
;
; Contains the data for a 16-bit sine wave. The magnitude of the sine wave is
; the full 16-bit range. The full period is 512.
sine_data:
    .dw $0000                                                                   ; $13E5C5.E5C6
    .dw $0192                                                                   ; $13E5C7.E5C8
    .dw $0324                                                                   ; $13E5C9.E5CA
    .dw $04B6                                                                   ; $13E5CB.E5CC
    .dw $0648                                                                   ; $13E5CD.E5CE
    .dw $07D9                                                                   ; $13E5CF.E5D0
    .dw $096A                                                                   ; $13E5D1.E5D2
    .dw $0AFB                                                                   ; $13E5D3.E5D4
    .dw $0C8C                                                                   ; $13E5D5.E5D6
    .dw $0E1C                                                                   ; $13E5D7.E5D8
    .dw $0FAB                                                                   ; $13E5D9.E5DA
    .dw $113A                                                                   ; $13E5DB.E5DC
    .dw $12C8                                                                   ; $13E5DD.E5DE
    .dw $1455                                                                   ; $13E5DF.E5E0
    .dw $15E2                                                                   ; $13E5E1.E5E2
    .dw $176E                                                                   ; $13E5E3.E5E4
    .dw $18F9                                                                   ; $13E5E5.E5E6
    .dw $1A82                                                                   ; $13E5E7.E5E8
    .dw $1C0B                                                                   ; $13E5E9.E5EA
    .dw $1D93                                                                   ; $13E5EB.E5EC
    .dw $1F1A                                                                   ; $13E5ED.E5EE
    .dw $209F                                                                   ; $13E5EF.E5F0
    .dw $2223                                                                   ; $13E5F1.E5F2
    .dw $23A6                                                                   ; $13E5F3.E5F4
    .dw $2528                                                                   ; $13E5F5.E5F6
    .dw $26A8                                                                   ; $13E5F7.E5F8
    .dw $2826                                                                   ; $13E5F9.E5FA
    .dw $29A3                                                                   ; $13E5FB.E5FC
    .dw $2B1F                                                                   ; $13E5FD.E5FE
    .dw $2C99                                                                   ; $13E5FF.E600
    .dw $2E11                                                                   ; $13E601.E602
    .dw $2F87                                                                   ; $13E603.E604
    .dw $30FB                                                                   ; $13E605.E606
    .dw $326E                                                                   ; $13E607.E608
    .dw $33DF                                                                   ; $13E609.E60A
    .dw $354D                                                                   ; $13E60B.E60C
    .dw $36BA                                                                   ; $13E60D.E60E
    .dw $3824                                                                   ; $13E60F.E610
    .dw $398C                                                                   ; $13E611.E612
    .dw $3AF2                                                                   ; $13E613.E614
    .dw $3C56                                                                   ; $13E615.E616
    .dw $3DB8                                                                   ; $13E617.E618
    .dw $3F17                                                                   ; $13E619.E61A
    .dw $4073                                                                   ; $13E61B.E61C
    .dw $41CE                                                                   ; $13E61D.E61E
    .dw $4325                                                                   ; $13E61F.E620
    .dw $447A                                                                   ; $13E621.E622
    .dw $45CD                                                                   ; $13E623.E624
    .dw $471C                                                                   ; $13E625.E626
    .dw $4869                                                                   ; $13E627.E628
    .dw $49B3                                                                   ; $13E629.E62A
    .dw $4AFB                                                                   ; $13E62B.E62C
    .dw $4C3F                                                                   ; $13E62D.E62E
    .dw $4D81                                                                   ; $13E62F.E630
    .dw $4EBF                                                                   ; $13E631.E632
    .dw $4FFB                                                                   ; $13E633.E634
    .dw $5133                                                                   ; $13E635.E636
    .dw $5268                                                                   ; $13E637.E638
    .dw $539B                                                                   ; $13E639.E63A
    .dw $54C9                                                                   ; $13E63B.E63C
    .dw $55F5                                                                   ; $13E63D.E63E
    .dw $571D                                                                   ; $13E63F.E640
    .dw $5842                                                                   ; $13E641.E642
    .dw $5964                                                                   ; $13E643.E644
    .dw $5A82                                                                   ; $13E645.E646
    .dw $5B9C                                                                   ; $13E647.E648
    .dw $5CB3                                                                   ; $13E649.E64A
    .dw $5DC7                                                                   ; $13E64B.E64C
    .dw $5ED7                                                                   ; $13E64D.E64E
    .dw $5FE3                                                                   ; $13E64F.E650
    .dw $60EB                                                                   ; $13E651.E652
    .dw $61F0                                                                   ; $13E653.E654
    .dw $62F1                                                                   ; $13E655.E656
    .dw $63EE                                                                   ; $13E657.E658
    .dw $64E8                                                                   ; $13E659.E65A
    .dw $65DD                                                                   ; $13E65B.E65C
    .dw $66CF                                                                   ; $13E65D.E65E
    .dw $67BC                                                                   ; $13E65F.E660
    .dw $68A6                                                                   ; $13E661.E662
    .dw $698B                                                                   ; $13E663.E664
    .dw $6A6D                                                                   ; $13E665.E666
    .dw $6B4A                                                                   ; $13E667.E668
    .dw $6C23                                                                   ; $13E669.E66A
    .dw $6CF8                                                                   ; $13E66B.E66C
    .dw $6DC9                                                                   ; $13E66D.E66E
    .dw $6E96                                                                   ; $13E66F.E670
    .dw $6F5E                                                                   ; $13E671.E672
    .dw $7022                                                                   ; $13E673.E674
    .dw $70E2                                                                   ; $13E675.E676
    .dw $719D                                                                   ; $13E677.E678
    .dw $7254                                                                   ; $13E679.E67A
    .dw $7307                                                                   ; $13E67B.E67C
    .dw $73B5                                                                   ; $13E67D.E67E
    .dw $745F                                                                   ; $13E67F.E680
    .dw $7504                                                                   ; $13E681.E682
    .dw $75A5                                                                   ; $13E683.E684
    .dw $7641                                                                   ; $13E685.E686
    .dw $76D8                                                                   ; $13E687.E688
    .dw $776B                                                                   ; $13E689.E68A
    .dw $77FA                                                                   ; $13E68B.E68C
    .dw $7884                                                                   ; $13E68D.E68E
    .dw $7909                                                                   ; $13E68F.E690
    .dw $7989                                                                   ; $13E691.E692
    .dw $7A05                                                                   ; $13E693.E694
    .dw $7A7C                                                                   ; $13E695.E696
    .dw $7AEE                                                                   ; $13E697.E698
    .dw $7B5C                                                                   ; $13E699.E69A
    .dw $7BC5                                                                   ; $13E69B.E69C
    .dw $7C29                                                                   ; $13E69D.E69E
    .dw $7C88                                                                   ; $13E69F.E6A0
    .dw $7CE3                                                                   ; $13E6A1.E6A2
    .dw $7D39                                                                   ; $13E6A3.E6A4
    .dw $7D89                                                                   ; $13E6A5.E6A6
    .dw $7DD5                                                                   ; $13E6A7.E6A8
    .dw $7E1D                                                                   ; $13E6A9.E6AA
    .dw $7E5F                                                                   ; $13E6AB.E6AC
    .dw $7E9C                                                                   ; $13E6AD.E6AE
    .dw $7ED5                                                                   ; $13E6AF.E6B0
    .dw $7F09                                                                   ; $13E6B1.E6B2
    .dw $7F37                                                                   ; $13E6B3.E6B4
    .dw $7F61                                                                   ; $13E6B5.E6B6
    .dw $7F86                                                                   ; $13E6B7.E6B8
    .dw $7FA6                                                                   ; $13E6B9.E6BA
    .dw $7FC1                                                                   ; $13E6BB.E6BC
    .dw $7FD8                                                                   ; $13E6BD.E6BE
    .dw $7FE9                                                                   ; $13E6BF.E6C0
    .dw $7FF5                                                                   ; $13E6C1.E6C2
    .dw $7FFD                                                                   ; $13E6C3.E6C4
    .dw $7FFF                                                                   ; $13E6C5.E6C6
    .dw $7FFD                                                                   ; $13E6C7.E6C8
    .dw $7FF5                                                                   ; $13E6C9.E6CA
    .dw $7FE9                                                                   ; $13E6CB.E6CC
    .dw $7FD8                                                                   ; $13E6CD.E6CE
    .dw $7FC1                                                                   ; $13E6CF.E6D0
    .dw $7FA6                                                                   ; $13E6D1.E6D2
    .dw $7F86                                                                   ; $13E6D3.E6D4
    .dw $7F61                                                                   ; $13E6D5.E6D6
    .dw $7F37                                                                   ; $13E6D7.E6D8
    .dw $7F09                                                                   ; $13E6D9.E6DA
    .dw $7ED5                                                                   ; $13E6DB.E6DC
    .dw $7E9C                                                                   ; $13E6DD.E6DE
    .dw $7E5F                                                                   ; $13E6DF.E6E0
    .dw $7E1D                                                                   ; $13E6E1.E6E2
    .dw $7DD5                                                                   ; $13E6E3.E6E4
    .dw $7D89                                                                   ; $13E6E5.E6E6
    .dw $7D39                                                                   ; $13E6E7.E6E8
    .dw $7CE3                                                                   ; $13E6E9.E6EA
    .dw $7C88                                                                   ; $13E6EB.E6EC
    .dw $7C29                                                                   ; $13E6ED.E6EE
    .dw $7BC5                                                                   ; $13E6EF.E6F0
    .dw $7B5C                                                                   ; $13E6F1.E6F2
    .dw $7AEE                                                                   ; $13E6F3.E6F4
    .dw $7A7C                                                                   ; $13E6F5.E6F6
    .dw $7A05                                                                   ; $13E6F7.E6F8
    .dw $7989                                                                   ; $13E6F9.E6FA
    .dw $7909                                                                   ; $13E6FB.E6FC
    .dw $7884                                                                   ; $13E6FD.E6FE
    .dw $77FA                                                                   ; $13E6FF.E700
    .dw $776B                                                                   ; $13E701.E702
    .dw $76D8                                                                   ; $13E703.E704
    .dw $7641                                                                   ; $13E705.E706
    .dw $75A5                                                                   ; $13E707.E708
    .dw $7504                                                                   ; $13E709.E70A
    .dw $745F                                                                   ; $13E70B.E70C
    .dw $73B5                                                                   ; $13E70D.E70E
    .dw $7307                                                                   ; $13E70F.E710
    .dw $7254                                                                   ; $13E711.E712
    .dw $719D                                                                   ; $13E713.E714
    .dw $70E2                                                                   ; $13E715.E716
    .dw $7022                                                                   ; $13E717.E718
    .dw $6F5E                                                                   ; $13E719.E71A
    .dw $6E96                                                                   ; $13E71B.E71C
    .dw $6DC9                                                                   ; $13E71D.E71E
    .dw $6CF8                                                                   ; $13E71F.E720
    .dw $6C23                                                                   ; $13E721.E722
    .dw $6B4A                                                                   ; $13E723.E724
    .dw $6A6D                                                                   ; $13E725.E726
    .dw $698B                                                                   ; $13E727.E728
    .dw $68A6                                                                   ; $13E729.E72A
    .dw $67BC                                                                   ; $13E72B.E72C
    .dw $66CF                                                                   ; $13E72D.E72E
    .dw $65DD                                                                   ; $13E72F.E730
    .dw $64E8                                                                   ; $13E731.E732
    .dw $63EE                                                                   ; $13E733.E734
    .dw $62F1                                                                   ; $13E735.E736
    .dw $61F0                                                                   ; $13E737.E738
    .dw $60EB                                                                   ; $13E739.E73A
    .dw $5FE3                                                                   ; $13E73B.E73C
    .dw $5ED7                                                                   ; $13E73D.E73E
    .dw $5DC7                                                                   ; $13E73F.E740
    .dw $5CB3                                                                   ; $13E741.E742
    .dw $5B9C                                                                   ; $13E743.E744
    .dw $5A82                                                                   ; $13E745.E746
    .dw $5964                                                                   ; $13E747.E748
    .dw $5842                                                                   ; $13E749.E74A
    .dw $571D                                                                   ; $13E74B.E74C
    .dw $55F5                                                                   ; $13E74D.E74E
    .dw $54C9                                                                   ; $13E74F.E750
    .dw $539A                                                                   ; $13E751.E752
    .dw $5268                                                                   ; $13E753.E754
    .dw $5133                                                                   ; $13E755.E756
    .dw $4FFB                                                                   ; $13E757.E758
    .dw $4EBF                                                                   ; $13E759.E75A
    .dw $4D81                                                                   ; $13E75B.E75C
    .dw $4C3F                                                                   ; $13E75D.E75E
    .dw $4AFB                                                                   ; $13E75F.E760
    .dw $49B3                                                                   ; $13E761.E762
    .dw $4869                                                                   ; $13E763.E764
    .dw $471C                                                                   ; $13E765.E766
    .dw $45CD                                                                   ; $13E767.E768
    .dw $447A                                                                   ; $13E769.E76A
    .dw $4325                                                                   ; $13E76B.E76C
    .dw $41CE                                                                   ; $13E76D.E76E
    .dw $4073                                                                   ; $13E76F.E770
    .dw $3F17                                                                   ; $13E771.E772
    .dw $3DB8                                                                   ; $13E773.E774
    .dw $3C56                                                                   ; $13E775.E776
    .dw $3AF2                                                                   ; $13E777.E778
    .dw $398C                                                                   ; $13E779.E77A
    .dw $3824                                                                   ; $13E77B.E77C
    .dw $36BA                                                                   ; $13E77D.E77E
    .dw $354D                                                                   ; $13E77F.E780
    .dw $33DE                                                                   ; $13E781.E782
    .dw $326E                                                                   ; $13E783.E784
    .dw $30FB                                                                   ; $13E785.E786
    .dw $2F87                                                                   ; $13E787.E788
    .dw $2E11                                                                   ; $13E789.E78A
    .dw $2C99                                                                   ; $13E78B.E78C
    .dw $2B1F                                                                   ; $13E78D.E78E
    .dw $29A3                                                                   ; $13E78F.E790
    .dw $2826                                                                   ; $13E791.E792
    .dw $26A8                                                                   ; $13E793.E794
    .dw $2528                                                                   ; $13E795.E796
    .dw $23A6                                                                   ; $13E797.E798
    .dw $2223                                                                   ; $13E799.E79A
    .dw $209F                                                                   ; $13E79B.E79C
    .dw $1F1A                                                                   ; $13E79D.E79E
    .dw $1D93                                                                   ; $13E79F.E7A0
    .dw $1C0B                                                                   ; $13E7A1.E7A2
    .dw $1A82                                                                   ; $13E7A3.E7A4
    .dw $18F8                                                                   ; $13E7A5.E7A6
    .dw $176E                                                                   ; $13E7A7.E7A8
    .dw $15E2                                                                   ; $13E7A9.E7AA
    .dw $1455                                                                   ; $13E7AB.E7AC
    .dw $12C8                                                                   ; $13E7AD.E7AE
    .dw $113A                                                                   ; $13E7AF.E7B0
    .dw $0FAB                                                                   ; $13E7B1.E7B2
    .dw $0E1C                                                                   ; $13E7B3.E7B4
    .dw $0C8C                                                                   ; $13E7B5.E7B6
    .dw $0AFB                                                                   ; $13E7B7.E7B8
    .dw $096A                                                                   ; $13E7B9.E7BA
    .dw $07D9                                                                   ; $13E7BB.E7BC
    .dw $0648                                                                   ; $13E7BD.E7BE
    .dw $04B6                                                                   ; $13E7BF.E7C0
    .dw $0324                                                                   ; $13E7C1.E7C2
    .dw $0192                                                                   ; $13E7C3.E7C4
    .dw $0000                                                                   ; $13E7C5.E7C6
    .dw $FE6E                                                                   ; $13E7C7.E7C8
    .dw $FCDC                                                                   ; $13E7C9.E7CA
    .dw $FB4A                                                                   ; $13E7CB.E7CC
    .dw $F9B8                                                                   ; $13E7CD.E7CE
    .dw $F827                                                                   ; $13E7CF.E7D0
    .dw $F695                                                                   ; $13E7D1.E7D2
    .dw $F505                                                                   ; $13E7D3.E7D4
    .dw $F374                                                                   ; $13E7D5.E7D6
    .dw $F1E4                                                                   ; $13E7D7.E7D8
    .dw $F055                                                                   ; $13E7D9.E7DA
    .dw $EEC6                                                                   ; $13E7DB.E7DC
    .dw $ED38                                                                   ; $13E7DD.E7DE
    .dw $EBAB                                                                   ; $13E7DF.E7E0
    .dw $EA1E                                                                   ; $13E7E1.E7E2
    .dw $E892                                                                   ; $13E7E3.E7E4
    .dw $E707                                                                   ; $13E7E5.E7E6
    .dw $E57D                                                                   ; $13E7E7.E7E8
    .dw $E3F5                                                                   ; $13E7E9.E7EA
    .dw $E26D                                                                   ; $13E7EB.E7EC
    .dw $E0E6                                                                   ; $13E7ED.E7EE
    .dw $DF61                                                                   ; $13E7EF.E7F0
    .dw $DDDC                                                                   ; $13E7F1.E7F2
    .dw $DC5A                                                                   ; $13E7F3.E7F4
    .dw $DAD8                                                                   ; $13E7F5.E7F6
    .dw $D958                                                                   ; $13E7F7.E7F8
    .dw $D7D9                                                                   ; $13E7F9.E7FA
    .dw $D65C                                                                   ; $13E7FB.E7FC
    .dw $D4E1                                                                   ; $13E7FD.E7FE
    .dw $D367                                                                   ; $13E7FF.E800
    .dw $D1EF                                                                   ; $13E801.E802
    .dw $D079                                                                   ; $13E803.E804
    .dw $CF04                                                                   ; $13E805.E806
    .dw $CD92                                                                   ; $13E807.E808
    .dw $CC21                                                                   ; $13E809.E80A
    .dw $CAB3                                                                   ; $13E80B.E80C
    .dw $C946                                                                   ; $13E80D.E80E
    .dw $C7DC                                                                   ; $13E80F.E810
    .dw $C673                                                                   ; $13E811.E812
    .dw $C50D                                                                   ; $13E813.E814
    .dw $C3AA                                                                   ; $13E815.E816
    .dw $C248                                                                   ; $13E817.E818
    .dw $C0E9                                                                   ; $13E819.E81A
    .dw $BF8C                                                                   ; $13E81B.E81C
    .dw $BE32                                                                   ; $13E81D.E81E
    .dw $BCDB                                                                   ; $13E81F.E820
    .dw $BB86                                                                   ; $13E821.E822
    .dw $BA33                                                                   ; $13E823.E824
    .dw $B8E3                                                                   ; $13E825.E826
    .dw $B796                                                                   ; $13E827.E828
    .dw $B64C                                                                   ; $13E829.E82A
    .dw $B505                                                                   ; $13E82B.E82C
    .dw $B3C1                                                                   ; $13E82D.E82E
    .dw $B27F                                                                   ; $13E82F.E830
    .dw $B141                                                                   ; $13E831.E832
    .dw $B005                                                                   ; $13E833.E834
    .dw $AECD                                                                   ; $13E835.E836
    .dw $AD97                                                                   ; $13E837.E838
    .dw $AC65                                                                   ; $13E839.E83A
    .dw $AB36                                                                   ; $13E83B.E83C
    .dw $AA0B                                                                   ; $13E83D.E83E
    .dw $A8E3                                                                   ; $13E83F.E840
    .dw $A7BE                                                                   ; $13E841.E842
    .dw $A69C                                                                   ; $13E843.E844
    .dw $A57E                                                                   ; $13E845.E846
    .dw $A463                                                                   ; $13E847.E848
    .dw $A34C                                                                   ; $13E849.E84A
    .dw $A239                                                                   ; $13E84B.E84C
    .dw $A129                                                                   ; $13E84D.E84E
    .dw $A01D                                                                   ; $13E84F.E850
    .dw $9F14                                                                   ; $13E851.E852
    .dw $9E10                                                                   ; $13E853.E854
    .dw $9D0F                                                                   ; $13E855.E856
    .dw $9C11                                                                   ; $13E857.E858
    .dw $9B18                                                                   ; $13E859.E85A
    .dw $9A23                                                                   ; $13E85B.E85C
    .dw $9931                                                                   ; $13E85D.E85E
    .dw $9844                                                                   ; $13E85F.E860
    .dw $975A                                                                   ; $13E861.E862
    .dw $9675                                                                   ; $13E863.E864
    .dw $9593                                                                   ; $13E865.E866
    .dw $94B6                                                                   ; $13E867.E868
    .dw $93DD                                                                   ; $13E869.E86A
    .dw $9308                                                                   ; $13E86B.E86C
    .dw $9237                                                                   ; $13E86D.E86E
    .dw $916A                                                                   ; $13E86F.E870
    .dw $90A2                                                                   ; $13E871.E872
    .dw $8FDE                                                                   ; $13E873.E874
    .dw $8F1E                                                                   ; $13E875.E876
    .dw $8E63                                                                   ; $13E877.E878
    .dw $8DAC                                                                   ; $13E879.E87A
    .dw $8CF9                                                                   ; $13E87B.E87C
    .dw $8C4B                                                                   ; $13E87D.E87E
    .dw $8BA1                                                                   ; $13E87F.E880
    .dw $8AFC                                                                   ; $13E881.E882
    .dw $8A5B                                                                   ; $13E883.E884
    .dw $89BF                                                                   ; $13E885.E886
    .dw $8928                                                                   ; $13E887.E888
    .dw $8895                                                                   ; $13E889.E88A
    .dw $8806                                                                   ; $13E88B.E88C
    .dw $877C                                                                   ; $13E88D.E88E
    .dw $86F7                                                                   ; $13E88F.E890
    .dw $8677                                                                   ; $13E891.E892
    .dw $85FB                                                                   ; $13E893.E894
    .dw $8584                                                                   ; $13E895.E896
    .dw $8511                                                                   ; $13E897.E898
    .dw $84A4                                                                   ; $13E899.E89A
    .dw $843B                                                                   ; $13E89B.E89C
    .dw $83D7                                                                   ; $13E89D.E89E
    .dw $8378                                                                   ; $13E89F.E8A0
    .dw $831D                                                                   ; $13E8A1.E8A2
    .dw $82C7                                                                   ; $13E8A3.E8A4
    .dw $8277                                                                   ; $13E8A5.E8A6
    .dw $822B                                                                   ; $13E8A7.E8A8
    .dw $81E3                                                                   ; $13E8A9.E8AA
    .dw $81A1                                                                   ; $13E8AB.E8AC
    .dw $8164                                                                   ; $13E8AD.E8AE
    .dw $812B                                                                   ; $13E8AF.E8B0
    .dw $80F7                                                                   ; $13E8B1.E8B2
    .dw $80C9                                                                   ; $13E8B3.E8B4
    .dw $809F                                                                   ; $13E8B5.E8B6
    .dw $807A                                                                   ; $13E8B7.E8B8
    .dw $805A                                                                   ; $13E8B9.E8BA
    .dw $803F                                                                   ; $13E8BB.E8BC
    .dw $8028                                                                   ; $13E8BD.E8BE
    .dw $8017                                                                   ; $13E8BF.E8C0
    .dw $800B                                                                   ; $13E8C1.E8C2
    .dw $8003                                                                   ; $13E8C3.E8C4
    .dw $8001                                                                   ; $13E8C5.E8C6
    .dw $8003                                                                   ; $13E8C7.E8C8
    .dw $800B                                                                   ; $13E8C9.E8CA
    .dw $8017                                                                   ; $13E8CB.E8CC
    .dw $8028                                                                   ; $13E8CD.E8CE
    .dw $803F                                                                   ; $13E8CF.E8D0
    .dw $805A                                                                   ; $13E8D1.E8D2
    .dw $807A                                                                   ; $13E8D3.E8D4
    .dw $809F                                                                   ; $13E8D5.E8D6
    .dw $80C9                                                                   ; $13E8D7.E8D8
    .dw $80F7                                                                   ; $13E8D9.E8DA
    .dw $812B                                                                   ; $13E8DB.E8DC
    .dw $8164                                                                   ; $13E8DD.E8DE
    .dw $81A1                                                                   ; $13E8DF.E8E0
    .dw $81E3                                                                   ; $13E8E1.E8E2
    .dw $822B                                                                   ; $13E8E3.E8E4
    .dw $8277                                                                   ; $13E8E5.E8E6
    .dw $82C8                                                                   ; $13E8E7.E8E8
    .dw $831D                                                                   ; $13E8E9.E8EA
    .dw $8378                                                                   ; $13E8EB.E8EC
    .dw $83D7                                                                   ; $13E8ED.E8EE
    .dw $843B                                                                   ; $13E8EF.E8F0
    .dw $84A4                                                                   ; $13E8F1.E8F2
    .dw $8512                                                                   ; $13E8F3.E8F4
    .dw $8584                                                                   ; $13E8F5.E8F6
    .dw $85FB                                                                   ; $13E8F7.E8F8
    .dw $8677                                                                   ; $13E8F9.E8FA
    .dw $86F7                                                                   ; $13E8FB.E8FC
    .dw $877D                                                                   ; $13E8FD.E8FE
    .dw $8806                                                                   ; $13E8FF.E900
    .dw $8895                                                                   ; $13E901.E902
    .dw $8928                                                                   ; $13E903.E904
    .dw $89BF                                                                   ; $13E905.E906
    .dw $8A5C                                                                   ; $13E907.E908
    .dw $8AFC                                                                   ; $13E909.E90A
    .dw $8BA1                                                                   ; $13E90B.E90C
    .dw $8C4B                                                                   ; $13E90D.E90E
    .dw $8CF9                                                                   ; $13E90F.E910
    .dw $8DAC                                                                   ; $13E911.E912
    .dw $8E63                                                                   ; $13E913.E914
    .dw $8F1E                                                                   ; $13E915.E916
    .dw $8FDE                                                                   ; $13E917.E918
    .dw $90A2                                                                   ; $13E919.E91A
    .dw $916A                                                                   ; $13E91B.E91C
    .dw $9237                                                                   ; $13E91D.E91E
    .dw $9308                                                                   ; $13E91F.E920
    .dw $93DD                                                                   ; $13E921.E922
    .dw $94B6                                                                   ; $13E923.E924
    .dw $9593                                                                   ; $13E925.E926
    .dw $9675                                                                   ; $13E927.E928
    .dw $975A                                                                   ; $13E929.E92A
    .dw $9844                                                                   ; $13E92B.E92C
    .dw $9932                                                                   ; $13E92D.E92E
    .dw $9A23                                                                   ; $13E92F.E930
    .dw $9B18                                                                   ; $13E931.E932
    .dw $9C12                                                                   ; $13E933.E934
    .dw $9D0F                                                                   ; $13E935.E936
    .dw $9E10                                                                   ; $13E937.E938
    .dw $9F15                                                                   ; $13E939.E93A
    .dw $A01D                                                                   ; $13E93B.E93C
    .dw $A12A                                                                   ; $13E93D.E93E
    .dw $A239                                                                   ; $13E93F.E940
    .dw $A34D                                                                   ; $13E941.E942
    .dw $A464                                                                   ; $13E943.E944
    .dw $A57E                                                                   ; $13E945.E946
    .dw $A69D                                                                   ; $13E947.E948
    .dw $A7BE                                                                   ; $13E949.E94A
    .dw $A8E3                                                                   ; $13E94B.E94C
    .dw $AA0B                                                                   ; $13E94D.E94E
    .dw $AB37                                                                   ; $13E94F.E950
    .dw $AC66                                                                   ; $13E951.E952
    .dw $AD98                                                                   ; $13E953.E954
    .dw $AECD                                                                   ; $13E955.E956
    .dw $B006                                                                   ; $13E957.E958
    .dw $B141                                                                   ; $13E959.E95A
    .dw $B280                                                                   ; $13E95B.E95C
    .dw $B3C1                                                                   ; $13E95D.E95E
    .dw $B505                                                                   ; $13E95F.E960
    .dw $B64D                                                                   ; $13E961.E962
    .dw $B797                                                                   ; $13E963.E964
    .dw $B8E4                                                                   ; $13E965.E966
    .dw $BA34                                                                   ; $13E967.E968
    .dw $BB86                                                                   ; $13E969.E96A
    .dw $BCDB                                                                   ; $13E96B.E96C
    .dw $BE33                                                                   ; $13E96D.E96E
    .dw $BF8D                                                                   ; $13E96F.E970
    .dw $C0EA                                                                   ; $13E971.E972
    .dw $C249                                                                   ; $13E973.E974
    .dw $C3AA                                                                   ; $13E975.E976
    .dw $C50E                                                                   ; $13E977.E978
    .dw $C674                                                                   ; $13E979.E97A
    .dw $C7DC                                                                   ; $13E97B.E97C
    .dw $C947                                                                   ; $13E97D.E97E
    .dw $CAB3                                                                   ; $13E97F.E980
    .dw $CC22                                                                   ; $13E981.E982
    .dw $CD92                                                                   ; $13E983.E984
    .dw $CF05                                                                   ; $13E985.E986
    .dw $D079                                                                   ; $13E987.E988
    .dw $D1F0                                                                   ; $13E989.E98A
    .dw $D368                                                                   ; $13E98B.E98C
    .dw $D4E2                                                                   ; $13E98D.E98E
    .dw $D65D                                                                   ; $13E98F.E990
    .dw $D7DA                                                                   ; $13E991.E992
    .dw $D959                                                                   ; $13E993.E994
    .dw $DAD9                                                                   ; $13E995.E996
    .dw $DC5A                                                                   ; $13E997.E998
    .dw $DDDD                                                                   ; $13E999.E99A
    .dw $DF61                                                                   ; $13E99B.E99C
    .dw $E0E7                                                                   ; $13E99D.E99E
    .dw $E26D                                                                   ; $13E99F.E9A0
    .dw $E3F5                                                                   ; $13E9A1.E9A2
    .dw $E57E                                                                   ; $13E9A3.E9A4
    .dw $E708                                                                   ; $13E9A5.E9A6
    .dw $E893                                                                   ; $13E9A7.E9A8
    .dw $EA1F                                                                   ; $13E9A9.E9AA
    .dw $EBAB                                                                   ; $13E9AB.E9AC
    .dw $ED39                                                                   ; $13E9AD.E9AE
    .dw $EEC7                                                                   ; $13E9AF.E9B0
    .dw $F055                                                                   ; $13E9B1.E9B2
    .dw $F1E5                                                                   ; $13E9B3.E9B4
    .dw $F375                                                                   ; $13E9B5.E9B6
    .dw $F505                                                                   ; $13E9B7.E9B8
    .dw $F696                                                                   ; $13E9B9.E9BA
    .dw $F827                                                                   ; $13E9BB.E9BC
    .dw $F9B9                                                                   ; $13E9BD.E9BE
    .dw $FB4A                                                                   ; $13E9BF.E9C0
    .dw $FCDC                                                                   ; $13E9C1.E9C2
    .dw $FE6E                                                                   ; $13E9C3.E9C4

; special_dialog_legend_data ($13:E9C5)
;
; Dialog data for the Mysidian legend as displayed during the ending sequence.
special_dialog_legend_data:
.if FF4_REGION == "JAPAN"
    .db $02, $03, $B1, $7E, $8C, $A2, $91, $9A, $AF, $B1, $FF, $8C, $A8, $B3    ; $13E9C5.E9D2
    .db $95, $AC, $A2, $01, $01                                                 ; $13E9D3.E9D7
    .db $02, $05, $9C, $B6, $99, $8F, $91, $FF, $A8, $8B, $8A, $10, $B1, $01    ; $13E9D8.E9E5
    .db $01                                                                     ; $13E9E6
    .db $02, $05, $AD, $A9, $9D, $A4, $8F, $B1, $7B, $FF, $8F, $8F, $13, $01    ; $13E9E7.E9F4
    .db $01                                                                     ; $13E9F5
    .db $A1, $AA, $B1, $A2, $9A, $9F, $FF, $94, $B0, $9E, $B2, $AD, $91, $98    ; $13E9F6.EA03
    .db $91, $7B, $FF, $AC, $99, $B0, $94, $B6, $C1, $01, $01                   ; $13EA04.EA0E
    .db $01, $01                                                                ; $13EA0F.EA10
    .db $02, $02, $9B, $90, $A3, $FF, $A3, $9C, $95, $9E, $90, $FF, $A4, $8F    ; $13EA11.EA1E
    .db $B1, $9F, $9B, $9B, $A8, $B3, $01, $01                                  ; $13EA1F.EA26
    .db $02, $02, $A3, $A3, $9E, $B2, $1A, $8B, $9A, $9F, $FF, $8E, $8E, $8B    ; $13EA27.EA34
    .db $9E, $B2, $FF, $AB, $12, $A9, $9D, $01, $01                             ; $13EA35.EA3D
    .db $02, $06, $16, $A4, $7B, $FF, $8A, $99, $8D, $B6, $C1, $01, $01, $01    ; $13EA3E.EA4B
    .db $02, $03, $94, $B3, $1E, $FF, $9B, $8F, $A2, $A8, $A2, $FF, $90, $7E    ; $13EA4C.EA59
    .db $8C, $98, $91, $9E, $B1, $C1, $01, $01                                  ; $13EA5A.EA61
    .db $FF, $98, $A2, $9B, $90, $A3, $FF, $A9, $17, $8F, $B0, $A2, $A4, $8F    ; $13EA62.EA6F
    .db $B1, $7B, $FF, $AC, $9D, $AB, $9C, $01, $01                             ; $13EA70.EA78
    .db $02, $03, $94, $B0, $9E, $B2, $FF, $99, $20, $9F, $FF, $A9, $9A, $20    ; $13EA79.EA86
    .db $8F, $B3, $B6, $C1, $01, $01                                            ; $13EA87.EA8C
    .db $FF, $8E, $9E, $16, $FF, $9A, $7B, $FF, $A4, $91, $AC, $A2, $FF, $A4    ; $13EA8D.EA9A
    .db $9D, $B1, $A3, $FF, $9B, $90, $9F, $01, $01                             ; $13EA9B.EAA3
    .db $02, $04, $A4, $9D, $B1, $A3, $FF, $A3, $A3, $9E, $B2, $A7, $95, $9F    ; $13EAA4.EAB1
    .db $01, $01                                                                ; $13EAB2.EAB3
    .db $9D, $90, $A2, $9E, $10, $B3, $10, $FF, $98, $A2, $AC, $A2, $99, $9A    ; $13EAB4.EAC1
    .db $7B, $FF, $A4, $90, $A3, $9E, $94, $B6, $C1, $FF, $00                   ; $13EAC2.EACC
.else
    .asc 2, 5, "One to be born", 1, 1                                           ; $13E9C5.E9D6
    .asc 2, 5, "from a dragon", 1, 1                                            ; $13E9D7.E9E7
    .asc 2, 3, "hoisting the light", 1, 1                                       ; $13E9E8.E9FD
    .asc 2, 6, "and the dark", 1, 1                                             ; $13E9FE.EA0D
    .asc 2, 5, "arises high up", 1, 1                                           ; $13EA0E.EA1F
    .asc 2, 5, "in the sky to", 1, 1                                            ; $13EA20.EA30
    .asc 2, 4, "the still land", TEXT_ELLIPSIS, TEXT_ELLIPSIS, 1, 1             ; $13EA31.EA44
    .asc " Veiling the moon with", 1, 1                                         ; $13EA45.EA5C
    .asc " the light of eternity,", 1, 1                                        ; $13EA5D.EA75
    .asc 2, 7, "it brings", 1, 1                                                ; $13EA76.EA82
    .asc 2, 4, "another promise", 1, 1                                          ; $13EA83.EA95
    .asc 2, 2, "to mother earth with", 1, 1                                     ; $13EA96.EAAD
    .asc 2, 3, "a bounty and mercy", $0A, 1, 1                                  ; $13EAAE.EAC4
    .asc 2, 4, "The moon has just", 1, 1                                        ; $13EAC5.EAD9
    .asc 2, 3, "started to seek for", 1, 1                                      ; $13EADA.EAF0
    .asc 2, 5, "its own light", TEXT_ELLIPSIS, TEXT_ELLIPSIS, 1, 0              ; $13EAF1.EB03
.endif

; _special_decode_dialog ($13:EB04)
;
; Decodes dialog used in the ending.
_special_decode_dialog:
    LDX r_special_decode_dialog_arg_source_address.w                            ; $13EB04 |\
    STX <r_special_dialog_tmp_source_ptr.address                                ; $13EB07 | | Copy the source address and bank into a single pointer variable.
    LDA r_special_decode_dialog_arg_source_bank.w                               ; $13EB09 | |
    STA <r_special_dialog_tmp_source_ptr.bank                                   ; $13EB0C |/
    LDX r_special_decode_dialog_arg_target_address.w                            ; $13EB0E |\ Copy the target address into the first line pointer.
    STX <r_special_dialog_tmp_target_line_1_ptr                                 ; $13EB11 |/
    LDA <r_special_dialog_tmp_target_line_1_ptr.lo                              ; $13EB13 |\
    CLC                                                                         ; $13EB15 | | Add the line length to the pointer to determine the second line
    ADC r_special_decode_dialog_arg_line_length.w                               ; $13EB16 | | pointer.
    STA <r_special_dialog_tmp_target_line_2_ptr.lo                              ; $13EB19 | |
    LDA <r_special_dialog_tmp_target_line_1_ptr.hi                              ; $13EB1B | |
    ADC #0.b                                                                    ; $13EB1D | |
    STA <r_special_dialog_tmp_target_line_2_ptr.hi                              ; $13EB1F |/
    TDC                                                                         ; $13EB21 |\ Initialize the Y register to zero.
    TAY                                                                         ; $13EB22 |/
-   LDA [<r_special_dialog_tmp_source_ptr]                                      ; $13EB23 | Read the next byte.
    BEQ ++                                                                      ; $13EB25 | If the value is zero, branch to the end, as the dialog is done.
    CMP #DIALOG_OPCODE_FIRST_DIACRITIC.b                                        ; $13EB27 |\
    BCC +                                                                       ; $13EB29 | | If the value is a character, read the character, increment the
    JSR _special_dialog_character                                               ; $13EB2B | | source pointer and then jump back to read the next character.
    JSR _special_dialog_increment_source_ptr                                    ; $13EB2E | |
    BRA -                                                                       ; $13EB31 |/
+   JSR _special_decode_dialog_handle_opcodes                                   ; $13EB33 |\
    JSR _special_dialog_increment_source_ptr                                    ; $13EB36 | | Otherwise, jump to handle the opcode and then increment.
    BRA -                                                                       ; $13EB39 |/
++  RTS                                                                         ; $13EB3B

; _special_decode_dialog_handle_opcodes ($13:EB3C)
;
; While decoding dialog, handles opcodes of less than $0F. Specifically, treats
; $01 as an end of line marker, treats $0A as a period character, and any other
; value is, as a default, handled as a number of blanks equal to the value of
; the following byte.
_special_decode_dialog_handle_opcodes:
    CMP #DIALOG_OPCODE_END_LINE.b                                               ; $13EB3C |\ If the opcode is to end the line, branch to handle that.
    BEQ ++                                                                      ; $13EB3E |/
    CMP #DIALOG_OPCODE_SPECIAL_PERIOD.b                                         ; $13EB40 |\
    BNE +                                                                       ; $13EB42 | | If the opcode is $0A, jump to treat it as a normal character.
    JMP _special_dialog_normal_character                                        ; $13EB44 |/
+   JSR _special_dialog_increment_source_ptr                                    ; $13EB47 | Increment the source pointer.
    LDA [<r_special_dialog_tmp_source_ptr]                                      ; $13EB4A |\ Load the next byte and save it to a temporary variable.
    STA <r_special_generic_tmp_1.lo                                             ; $13EB4C |/
-   LDA #TEXT_SPACE.b                                                           ; $13EB4E |\
    JSR _special_dialog_normal_character                                        ; $13EB50 | | Write a number of blanks equal to the read value and return.
    DEC <r_special_generic_tmp_1.lo                                             ; $13EB53 | |
    BNE -                                                                       ; $13EB55 | |
    RTS                                                                         ; $13EB57 |/
++  JMP _special_dialog_next_line                                               ; $13EB58 | If it was the end line code, jump to handle that.

; _special_dialog_next_line ($13:EB5B)
;
; While decoding dialog, advances to the next line by adding twice the line
; length to the pointer (twice because of the diacritic row).
_special_dialog_next_line:
    LDA r_special_decode_dialog_arg_line_length.w                               ; $13EB5B |\
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EB5E | | Add twice the line length to the first line pointer to move down
    PHA                                                                         ; $13EB60 | | to the next pair of lines.
    ASL A                                                                       ; $13EB61 | |
    CLC                                                                         ; $13EB62 | |
    ADC <r_special_dialog_tmp_target_line_1_ptr                                 ; $13EB63 | |
    STA <r_special_dialog_tmp_target_line_1_ptr                                 ; $13EB65 |/
    PLA                                                                         ; $13EB67 |\
    CLC                                                                         ; $13EB68 | | Add the line length to the newly calculated first line pointer to
    ADC <r_special_dialog_tmp_target_line_1_ptr                                 ; $13EB69 | | determine the second line pointer.
    STA <r_special_dialog_tmp_target_line_2_ptr                                 ; $13EB6B |/
    TDC                                                                         ; $13EB6D |\
    TAY                                                                         ; $13EB6E | | Reset the Y register to zero.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EB6F |/
    RTS                                                                         ; $13EB71

; _special_dialog_increment_source_ptr ($13:EB72)
;
; Increments the source dialog pointer at $36.
_special_dialog_increment_source_ptr:
    LDX <r_special_dialog_tmp_source_ptr.address                                ; $13EB72 |\
    INX                                                                         ; $13EB74 | | Increment the source address.
    STX <r_special_dialog_tmp_source_ptr.address                                ; $13EB75 |/
    RTS                                                                         ; $13EB77

; _special_dialog_character ($13:EB78)
;
; Handles a character when decoding dialog. If the character is non-diacritic,
; falls through to the next function to complete its work.
_special_dialog_character:
    CMP #TEXT_UPPERCASE_A.b                                                     ; $13EB78 |\ If the opcode is less than $42, branch to handle it as a diacritic
    BCC _special_dialog_diacritic_character                                     ; $13EB7A |/ character. Otherwise, fall through to treat it as normal.

; _special_dialog_normal_character ($13:EB7C)
;
; Writes a normal character while decoding dialog. Stores the passed value and
; writes a blank tile to the row above.
_special_dialog_normal_character:
    STA (<r_special_dialog_tmp_target_line_2_ptr),Y                             ; $13EB7C | Write the character to the second line.
    LDA #TEXT_SPACE.b                                                           ; $13EB7E |\ Write a blank tile to the first line.
    STA (<r_special_dialog_tmp_target_line_1_ptr),Y                             ; $13EB80 |/
    INY                                                                         ; $13EB82 | Increment the Y register to move to the next target character.
    RTS                                                                         ; $13EB83

; _special_dialog_diacritic_character ($13:EB84)
;
; While decoding dialog, handles text opcodes from $0F through $41, which encode
; tiles with diacritics. Thus function is not relevant for the English version
; of the game.
_special_dialog_diacritic_character:
    SEC                                                                         ; $13EB84 |\
    SBC #DIALOG_OPCODE_FIRST_DIACRITIC.b                                        ; $13EB85 | | Determine the index into the diacritic data by subtracting $0F and
    ASL A                                                                       ; $13EB87 | | multiplying the result by two.
    TAX                                                                         ; $13EB88 |/
    LDA bank16.dialog_diacritic_data.l + 0,X                                    ; $13EB89 |\
    STA (<r_special_dialog_tmp_target_line_1_ptr),Y                             ; $13EB8D | | Load the two tiles and write them to their respective rows.
    LDA bank16.dialog_diacritic_data.l + 1,X                                    ; $13EB8F | |
    STA (<r_special_dialog_tmp_target_line_2_ptr),Y                             ; $13EB93 |/
    INY                                                                         ; $13EB95 | Increment the Y register to move to the next character.
    RTS                                                                         ; $13EB96

; _special_vram_copy_secondary ($13:EB97)
;
; This routine is used to copy the "The End" graphics to VRAM during the
; credits. It reads the current source address from $90 and the target VRAM
; address from $92. It copies 256 bytes at a time. There is nothing about this
; routine that inherently binds it to copying only the "The End" graphics, but
; that is its intended use. The source and target addresses must be configured
; manually before setting the flag that enables the transfer at $7D20. The
; routine automatically disables the flag when the VRAM address reaches $4000.
_special_vram_copy_secondary:
    LDA r_special_vram_copy_enable_secondary.w                                  ; $13EB97 |\ Return unless the enable flag is set.
    BEQ +                                                                       ; $13EB9A |/
    PHB                                                                         ; $13EB9C |\
    TDC                                                                         ; $13EB9D | | Preserve the existing data bank register and set it to zero.
    PHA                                                                         ; $13EB9E | |
    PLB                                                                         ; $13EB9F |/
    LDA #%00000000.b                                                            ; $13EBA0 |\ Set the VRAM increment to 1 by 1 after writing to $2118.
    STA reg_ppu_vmainc.w                                                        ; $13EBA2 |/
    LDX <r_special_vram_copy_target_address                                     ; $13EBA5 |\ Set the target VRAM address to the configured value.
    STX reg_ppu_vmadd.w                                                         ; $13EBA7 |/
    LDX <r_special_vram_copy_source_address                                     ; $13EBAA |\ Set the source address to the configured value.
    STX reg_cpu_a1t5.w                                                          ; $13EBAC |/
    LDA #$7E.b                                                                  ; $13EBAF |\ Set the source bank to $7E.
    STA reg_cpu_a1b5.w                                                          ; $13EBB1 |/
    LDA #%00000000.b                                                            ; $13EBB4 |\ Set the DMA to write one address.
    STA reg_cpu_dmap5.w                                                         ; $13EBB6 |/
    LDA #<reg_ppu_vmdatal_write                                                 ; $13EBB9 |\ Set the DMA to write to VRAM.
    STA reg_cpu_bbad5.w                                                         ; $13EBBB |/
    LDX #256.w                                                                  ; $13EBBE |\ Set the DMA to write 256 bytes.
    STX reg_cpu_das5.w                                                          ; $13EBC1 |/
    LDA #%00100000.b                                                            ; $13EBC4 |\ Enable the DMA on channel 5.
    STA reg_cpu_mdmaen.w                                                        ; $13EBC6 |/
    LDA #%10000000.b                                                            ; $13EBC9 |\ Set the VRAM increment to 1 by 1 after writing to $2119.
    STA reg_ppu_vmainc.w                                                        ; $13EBCB |/
    PLB                                                                         ; $13EBCE | Restore the original data bank register.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EBCF |\
    LDA <r_special_vram_copy_source_address                                     ; $13EBD1 | | Add 256 to the source address.
    CLC                                                                         ; $13EBD3 | |
    ADC #256.w                                                                  ; $13EBD4 | |
    STA <r_special_vram_copy_source_address                                     ; $13EBD7 |/
    LDA <r_special_vram_copy_target_address                                     ; $13EBD9 |\
    CLC                                                                         ; $13EBDB | | Add 256 to the target address.
    ADC #256.w                                                                  ; $13EBDC | |
    STA <r_special_vram_copy_target_address                                     ; $13EBDF | |
    TDC                                                                         ; $13EBE1 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EBE2 |/
    LDX <r_special_vram_copy_target_address                                     ; $13EBE4 |\
    CPX #$4000.w                                                                ; $13EBE6 | | Once the VRAM address reaches $4000, reset the flag to terminate
    BNE +                                                                       ; $13EBE9 | | the transfers.
    STZ r_special_vram_copy_enable_secondary.w                                  ; $13EBEB |/
+   RTS                                                                         ; $13EBEE

; _special_vram_copy_primary ($13:EBEF)
;
; If the primary VRAM copy is not disabled, copies 128 bytes from the source
; address passed in $90 to the target VRAM address passed in $92. Afterward, the
; two pointers are updated by adding 32 to $90 and 128 to $92. This routine is
; used to copy the credits from RAM to VRAM as needed. The copy is disabled by
; setting the flag at $7D1F.
_special_vram_copy_primary:
    LDA r_special_vram_copy_disable_primary.w                                   ; $13EBEF |\ Branch to nearly the end if the primary VRAM copy is disabled.
    BNE @done                                                                   ; $13EBF2 |/
    LDA <r_special_frame_counter                                                ; $13EBF4 |\
    AND #%00011111.b                                                            ; $13EBF6 | | Skip this routine unless the frame counter mod 32 is zero.
    BNE @done                                                                   ; $13EBF8 |/
    PHB                                                                         ; $13EBFA |\
    TDC                                                                         ; $13EBFB | | Preserve the value of the data bank register and set it to $00.
    PHA                                                                         ; $13EBFC | |
    PLB                                                                         ; $13EBFD |/
    LDA #%00000000.b                                                            ; $13EBFE |\ Set the VRAM increment to 1 by 1 after writing $2118.
    STA reg_ppu_vmainc.w                                                        ; $13EC00 |/
    LDX <r_special_vram_copy_target_address                                     ; $13EC03 |\ Set the target VRAM address to the configured value.
    STX reg_ppu_vmadd.w                                                         ; $13EC05 |/
    LDX <r_special_vram_copy_source_address                                     ; $13EC08 |\ Set the source address to the configured value.
    STX reg_cpu_a1t5.w                                                          ; $13EC0A |/
    LDA #$7E.b                                                                  ; $13EC0D |\ Set the source bank to $7E.
    STA reg_cpu_a1b5.w                                                          ; $13EC0F |/
    LDA #%00000000.b                                                            ; $13EC12 |\ Configure the DMA to write one address.
    STA reg_cpu_dmap5.w                                                         ; $13EC14 |/
    LDA #<reg_ppu_vmdatal_write.b                                               ; $13EC17 |\ Set the DMA to write to VRAM.
    STA reg_cpu_bbad5.w                                                         ; $13EC19 |/
    LDX #128.w                                                                  ; $13EC1C |\ Configure the DMA to copy 128 bytes.
    STX reg_cpu_das5.w                                                          ; $13EC1F |/
    LDA #%00100000.b                                                            ; $13EC22 |\ Enable the DMA on channel 5.
    STA reg_cpu_mdmaen.w                                                        ; $13EC24 |/
    LDA #%10000000.b                                                            ; $13EC27 |\ Set the VRAM increment to 1 by 1 after writing $2119.
    STA reg_ppu_vmainc.w                                                        ; $13EC29 |/
    PLB                                                                         ; $13EC2C | Restore the data bank register.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EC2D |\
    LDA <r_special_vram_copy_source_address                                     ; $13EC2F | | Add 32 to the source address and wrap it back around to $8000 if
    CLC                                                                         ; $13EC31 | | it exceeds $FFFF. This moves to the next line of the credits
    ADC #32.w                                                                   ; $13EC32 | | dialog.
    AND #$7FFF.w                                                                ; $13EC35 | |
    ORA #$8000.w                                                                ; $13EC38 | |
    STA <r_special_vram_copy_source_address                                     ; $13EC3B |/
    LDA <r_special_vram_copy_target_address                                     ; $13EC3D |\
    CLC                                                                         ; $13EC3F | | Add 128 to the target address to move to the next row of the
    ADC #128.w                                                                  ; $13EC40 | | tilemap.
    AND #$3FFF.w                                                                ; $13EC43 | |
    STA <r_special_vram_copy_target_address                                     ; $13EC46 | |
    TDC                                                                         ; $13EC48 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EC49 |/
@done:
    JSR _special_vram_copy_secondary                                            ; $13EC4B | Copy the end graphics to VRAM if the flag is enabled.
    RTS                                                                         ; $13EC4E

; _special_get_rng ($13:EC4F)
;
; Increments the current RNG index in $94 and returns the value from the PRNG
; associated with that index.
_special_get_rng:
    PHX                                                                         ; $13EC4F |\
    INC <r_special_rng_index                                                    ; $13EC50 | | Increment the RNG index and return the next RNG value in the
    LDA <r_special_rng_index                                                    ; $13EC52 | | accumulator.
    TAX                                                                         ; $13EC54 | |
    LDA bank14.prng_data.l,X                                                    ; $13EC55 | |
    PLX                                                                         ; $13EC59 |/
    RTS                                                                         ; $13EC5A

; _special_get_sine_value ($13:EC5B)
;
; Given a 16-bit scaling factor in $0E, and a 16-bit index in the accumulator,
; calculates the corresponding sine value and returns the full 32-bit value in
; $12. The maximum value is equal to $7FFF times the scaling factor. All numbers
; are treated as signed. The high word of the result can effectively be treated
; as the integer part of the result, assuming a sine wave magnitude of 1.0.
_special_get_sine_value:
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EC5B |\
    AND #(_sizeof_sine_data.w / 2) - 1                                          ; $13EC5D | | Load the sine value corresponding to the value passed in the
    ASL A                                                                       ; $13EC60 | | accumulator. The value is automatically taken mod 512, and that
    TAX                                                                         ; $13EC61 | | is also the period of the sine wave.
    LDA sine_data.l,X                                                           ; $13EC62 |/
    BPL +                                                                       ; $13EC66 | If the value is positive, branch ahead.
    EOR #$FFFF.w                                                                ; $13EC68 |\
    STA <r_special_multiply_16bit_arg_2                                         ; $13EC6B | | Flip the bits and multiply by the value in $0E.
    JSR _special_multiply_16bit                                                 ; $13EC6D |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EC70 |\
    LDA <r_special_multiply_16bit_result.hi                                     ; $13EC72 | | Flip the bits of the result and add one, before branching later
    EOR #$FFFF.w                                                                ; $13EC74 | | if the result is positive.
    INC A                                                                       ; $13EC77 | |
    BPL ++                                                                      ; $13EC78 |/
-   STA <r_special_multiply_16bit_result.hi                                     ; $13EC7A |\
    TDC                                                                         ; $13EC7C | | If the final result is negative, set the carry flag and return.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EC7D | |
    SEC                                                                         ; $13EC7F | |
    RTS                                                                         ; $13EC80 |/
+   REP #FLAG_P_ACCUMULATOR                                                     ; $13EC81 |\
    STA <r_special_multiply_16bit_arg_2                                         ; $13EC83 | | If the original value was positive, multiply it by the other
    JSR _special_multiply_16bit                                                 ; $13EC85 | | parameter. If the result is negative, branch back to handle a
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EC88 | | negative result.
    LDA <r_special_multiply_16bit_result.hi                                     ; $13EC8A | |
    BMI -                                                                       ; $13EC8C |/
++  STA <r_special_multiply_16bit_result.hi                                     ; $13EC8E |\
    TDC                                                                         ; $13EC90 | | Otherwise, clear the carry flag and return.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EC91 | |
    CLC                                                                         ; $13EC93 |/
    RTS                                                                         ; $13EC94

; _special_init_star_field ($13:EC95)
;
; For the star field effect during the final credits, initializes the data by
; zeroing out the data structures and then setting the initial delay for each
; entry to a random value.
_special_init_star_field:
    TDC                                                                         ; $13EC95 |\
    TAX                                                                         ; $13EC96 | | Initialize all of the star field data to zeroes.
-   STA r_special_star_field.w,X                                                ; $13EC97 | |
    INX                                                                         ; $13EC9A | |
    CPX #_sizeof_r_special_star_field.w                                         ; $13EC9B | |
    BNE -                                                                       ; $13EC9E |/
    TDC                                                                         ; $13ECA0 |\
    TAX                                                                         ; $13ECA1 | | Set the initial delay for each entry in the star field to a random
-   LDA bank14.prng_data.l,X                                                    ; $13ECA2 | | value.
    STA r_special_star_field.delay.w,X                                          ; $13ECA6 | |
    INX                                                                         ; $13ECA9 | |
    CPX #_sizeof_r_special_star_field.delay.w                                   ; $13ECAA | |
    BNE -                                                                       ; $13ECAD |/
    RTS                                                                         ; $13ECAF

; star_field_acceleration_data ($13:ECB0)
;
; For the star/rock/crystal field effect during the credits, provides four
; different potential acceleration values for each entry. Each time a 16-bit
; accumulator this value is added to overflows, 2 is added to the entry's speed.
star_field_acceleration_data:
    .dw $1000                                                                   ; $13ECB0.ECB1
    .dw $2000                                                                   ; $13ECB2.ECB3
    .dw $A000                                                                   ; $13ECB4.ECB5
    .dw $4000                                                                   ; $13ECB6.ECB7

; _special_star_field_update_entries ($13:ECB8)
;
; For the star field effect during the credits, updates each entry to update its
; position and other parameters as necessary. Once complete, $95 is set to
; indicate that the values have been updated.
_special_star_field_update_entries:
    TDC                                                                         ; $13ECB8 |\
    TAX                                                                         ; $13ECB9 | | Initialize the X and Y registers to zero.
    TAY                                                                         ; $13ECBA |/
@loop_start:
    LDA r_special_star_field.active.w,X                                         ; $13ECBB |\
    BNE ++                                                                      ; $13ECBE | | If the current entry is not active, decrement its delay, and if
    DEC r_special_star_field.delay.w,X                                          ; $13ECC0 | | the delay reaches zero, set the active flag and continue. If the
    BEQ +                                                                       ; $13ECC3 | | delay is still non-zero, jump to process the next entry.
    JMP @next                                                                   ; $13ECC5 | |
+   INC r_special_star_field.active.w,X                                         ; $13ECC8 | |
    BRA +                                                                       ; $13ECCB |/
++  REP #FLAG_P_ACCUMULATOR                                                     ; $13ECCD |\
    LDA r_special_star_field.magnitude.w,Y                                      ; $13ECCF | | If the entry's magnitude is less than 320, branch to skip the
    CMP #320.w                                                                  ; $13ECD2 | | basic initialization. Otherwise, continue to reset the entry.
    BCC ++                                                                      ; $13ECD5 | |
    TDC                                                                         ; $13ECD7 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13ECD8 |/
+   JSR _special_get_rng                                                        ; $13ECDA |\
    STA <r_special_generic_tmp_1.lo                                             ; $13ECDD | | Set the entry's type to a random value from 0 to 3.
    AND #%00000011.b                                                            ; $13ECDF | |
    STA r_special_star_field.type.w,X                                           ; $13ECE1 |/
    STZ <r_special_generic_tmp_1.hi                                             ; $13ECE4 |\
    LDA <r_special_generic_tmp_1.lo                                             ; $13ECE6 | | Set the entry's theta value to the random value times two.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13ECE8 | |
    STA r_special_star_field.accumulator.w,Y                                    ; $13ECEA | | NOTE: Setting $2903,Y here is completely pointless.
    ASL A                                                                       ; $13ECED | |
    STA r_special_star_field.theta.w,Y                                          ; $13ECEE |/
    LDA <r_special_generic_tmp_1                                                ; $13ECF1 |\ Set the entry's accumulator to the random value.
    STA r_special_star_field.accumulator.w,Y                                    ; $13ECF3 |/
    LDA <r_special_generic_tmp_1                                                ; $13ECF6 |\
    AND #%00111111.w                                                            ; $13ECF8 | | Set the initial magnitude to the random value mod 64 plus that
    STA <r_special_generic_tmp_2                                                ; $13ECFB | | same random value mod 16.
    AND #%00001111.w                                                            ; $13ECFD | |
    ADC <r_special_generic_tmp_2                                                ; $13ED00 | |
    STA r_special_star_field.magnitude.w,Y                                      ; $13ED02 |/
    LDA #1.w                                                                    ; $13ED05 |\ Set the entry's initial speed to 1.
    STA r_special_star_field.speed.w,Y                                          ; $13ED08 |/
    PHX                                                                         ; $13ED0B |\
    LDA <r_special_generic_tmp_1                                                ; $13ED0C | | Take the random value mod 4, and use that to determine the
    AND #%00000011.w                                                            ; $13ED0E | | acceleration for the entry.
    ASL A                                                                       ; $13ED11 | |
    TAX                                                                         ; $13ED12 | |
    LDA star_field_acceleration_data.l + 0,X                                    ; $13ED13 | |
    STA r_special_star_field.acceleration.1.lo.w,Y                              ; $13ED17 | |
    LDA star_field_acceleration_data.l + 1,X                                    ; $13ED1A | |
    STA r_special_star_field.acceleration.1.hi.w,Y                              ; $13ED1E | |
    PLX                                                                         ; $13ED21 |/
++  REP #FLAG_P_ACCUMULATOR                                                     ; $13ED22 |\
    LDA r_special_star_field.magnitude.w,Y                                      ; $13ED24 | | Set the entry's Y coordinate by determining the sine value given
    STA <r_special_generic_tmp_1                                                ; $13ED27 | | its theta value and current magnitude, and then add the final
    STA <r_special_multiply_16bit_arg_1                                         ; $13ED29 | | result to the midpoint, 112.
    LDA r_special_star_field.theta.w,Y                                          ; $13ED2B | |
    STA <r_special_generic_tmp_2                                                ; $13ED2E | |
    PHX                                                                         ; $13ED30 | |
    JSR _special_get_sine_value                                                 ; $13ED31 | |
    PLX                                                                         ; $13ED34 | |
    REP #FLAG_P_ACCUMULATOR                                                     ; $13ED35 | |
    LDA <r_special_multiply_16bit_result.hi                                     ; $13ED37 | |
    CLC                                                                         ; $13ED39 | |
    ADC #112.w                                                                  ; $13ED3A | |
    STA r_special_star_field.y.w,Y                                              ; $13ED3D |/
    LDA <r_special_generic_tmp_1                                                ; $13ED40 |\
    STA <r_special_multiply_16bit_arg_1                                         ; $13ED42 | | Set the X coordinate in a similar fashion. Add 128 (1/4 the
    LDA <r_special_generic_tmp_2                                                ; $13ED44 | | period) to the theta value to convert to cosine, and calculate
    CLC                                                                         ; $13ED46 | | the value for the current magnitude. Add the result to 128.
    ADC #128.w                                                                  ; $13ED47 | |
    PHX                                                                         ; $13ED4A | |
    JSR _special_get_sine_value                                                 ; $13ED4B | |
    PLX                                                                         ; $13ED4E | |
    REP #FLAG_P_ACCUMULATOR                                                     ; $13ED4F | |
    LDA <r_special_multiply_16bit_result.hi                                     ; $13ED51 | |
    CLC                                                                         ; $13ED53 | |
    ADC #128.w                                                                  ; $13ED54 | |
    STA r_special_star_field.x.w,Y                                              ; $13ED57 |/
    LDA r_special_star_field.acceleration.w,Y                                   ; $13ED5A |\ Load the entry's acceleration and save it to a temporary variable.
    STA <r_special_star_field_tmp_acceleration                                  ; $13ED5D |/
    LDA r_special_star_field.accumulator.w,Y                                    ; $13ED5F |\
    CLC                                                                         ; $13ED62 | | Add the acceleration to the entry's accumulator.
    ADC <r_special_star_field_tmp_acceleration                                  ; $13ED63 | |
    STA r_special_star_field.accumulator.w,Y                                    ; $13ED65 |/
    LDA r_special_star_field.speed.w,Y                                          ; $13ED68 |\
    PHP                                                                         ; $13ED6B | | If the accumulator overflowed, add two to the speed.
    ADC #0.w                                                                    ; $13ED6C | |
    PLP                                                                         ; $13ED6F | |
    ADC #0.w                                                                    ; $13ED70 | |
    STA r_special_star_field.speed.w,Y                                          ; $13ED73 |/
    STA <r_special_generic_tmp_2                                                ; $13ED76 |\
    LDA <r_special_generic_tmp_1                                                ; $13ED78 | | Add the updated speed to the entry's magnitude.
    CLC                                                                         ; $13ED7A | |
    ADC <r_special_generic_tmp_2                                                ; $13ED7B | |
    STA r_special_star_field.magnitude.w,Y                                      ; $13ED7D |/
    LSR A                                                                       ; $13ED80 |\
    LSR A                                                                       ; $13ED81 | | Divide the magnitude by 16 and store it to a temporary variable.
    LSR A                                                                       ; $13ED82 | |
    LSR A                                                                       ; $13ED83 | |
    STA <r_special_generic_tmp_1                                                ; $13ED84 |/
    TDC                                                                         ; $13ED86 |\
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13ED87 | | Set the frame by taking that temporary value mod 16.
    LDA <r_special_generic_tmp_1.lo                                             ; $13ED89 | |
    AND #%00001111.b                                                            ; $13ED8B | |
    STA r_special_star_field.frame.w,X                                          ; $13ED8D |/
@next:
    INY                                                                         ; $13ED90 |\
    INY                                                                         ; $13ED91 | | Increment the loop variables and loop until reaching the maximum
    INX                                                                         ; $13ED92 | | entry.
    CPX <r_special_star_field_entries                                           ; $13ED93 | |
    BEQ +                                                                       ; $13ED95 | |
    JMP @loop_start                                                             ; $13ED97 |/
+   INC <r_special_star_field_updated                                           ; $13ED9A | Set the updated flag so the OAM will be updated.
    RTS                                                                         ; $13ED9C

; _special_star_field_update_oam ($13:ED9D)
;
; Updates the OAM entry for the star/rock field effect used in the ending.
_special_star_field_update_oam:
    LDA <r_special_star_field_updated                                           ; $13ED9D |\
    BNE +                                                                       ; $13ED9F | | If the star field has not been updated, return.
    RTS                                                                         ; $13EDA1 |/
+   STZ <r_special_star_field_updated                                           ; $13EDA2 | Reset the star field updated flag.
    JSR _special_init_oam                                                       ; $13EDA4 | Initialize the OAM.
    TDC                                                                         ; $13EDA7 |\
    TAX                                                                         ; $13EDA8 | | Set the X and Y registers to zero.
    TAY                                                                         ; $13EDA9 |/
@loop_start:
    PHX                                                                         ; $13EDAA | Preserve the current value of the X register.
    LDA r_special_star_field.active.w,X                                         ; $13EDAB |\ If this entry is not active, skip to move to the next one.
    BEQ @next                                                                   ; $13EDAE |/
    PHX                                                                         ; $13EDB0 | Preserve the current value of the X register.
    TXA                                                                         ; $13EDB1 |\
    ASL A                                                                       ; $13EDB2 | | Multiply the X register by two to index word arrays.
    TAX                                                                         ; $13EDB3 |/
    LDA r_special_star_field.x.1.hi.w,X                                         ; $13EDB4 |\
    ORA r_special_star_field.y.1.hi.w,X                                         ; $13EDB7 | | If either of the coordinates is either negative or greater than
    BEQ +                                                                       ; $13EDBA | | 255, set the coordinates in the OAM to 240 to draw it off screen.
    LDA #240.b                                                                  ; $13EDBC | |
    STA r_oam.1.x.w,Y                                                           ; $13EDBE | |
    STA r_oam.1.y.w,Y                                                           ; $13EDC1 | |
    BRA ++                                                                      ; $13EDC4 |/
+   LDA r_special_star_field.x.1.lo.w,X                                         ; $13EDC6 |\
    STA r_oam.1.x.w,Y                                                           ; $13EDC9 | | Otherwise, store the coordinates directly into the OAM.
    LDA r_special_star_field.y.1.lo.w,X                                         ; $13EDCC | |
    STA r_oam.1.y.w,Y                                                           ; $13EDCF |/
++  PLX                                                                         ; $13EDD2 | Restore the original X register.
    LDA r_special_star_field.type.w,X                                           ; $13EDD3 |\
    ASL A                                                                       ; $13EDD6 | | Set the X register to the type times sixteen plus the frame
    ASL A                                                                       ; $13EDD7 | | number.
    ASL A                                                                       ; $13EDD8 | |
    ASL A                                                                       ; $13EDD9 | |
    CLC                                                                         ; $13EDDA | |
    ADC r_special_star_field.frame.w,X                                          ; $13EDDB | |
    TAX                                                                         ; $13EDDE |/
    LDA star_field_tile_data.l,X                                                ; $13EDDF |\
    STA <r_special_star_field_tmp_tile                                          ; $13EDE3 | | Load the associated tile byte and use the low six bytes to set the
    AND #%00111111.b                                                            ; $13EDE5 | | tile number.
    STA r_oam.1.tile.w,Y                                                        ; $13EDE7 |/
    LDA <r_special_star_field_tmp_tile                                          ; $13EDEA |\
    AND #%11000000.b                                                            ; $13EDEC | | Use the top two bits to set the flip flags, set for palette 7 and
    ORA #%00001110.b                                                            ; $13EDEE | | use that value to set the flags.
    STA r_oam.1.flags.w,Y                                                       ; $13EDF0 |/
    INY                                                                         ; $13EDF3 |\
    INY                                                                         ; $13EDF4 | | Increment the Y register by four to move to the next OAM entry.
    INY                                                                         ; $13EDF5 | |
    INY                                                                         ; $13EDF6 |/
@next:
    PLX                                                                         ; $13EDF7 | Restore the X register.
    INX                                                                         ; $13EDF8 | Increment the X register.
    CPX <r_special_star_field_entries                                           ; $13EDF9 |\ Loop until it reaches the configured maximum.
    BNE @loop_start                                                             ; $13EDFB |/
    RTS                                                                         ; $13EDFD

; star_field_tile_data ($13:EDFE)
;
; For each type of entry in the star field effect, provides eight tile numbers
; to use as frames in its animation. They generally progress toward showing the
; object larger and larger.
star_field_tile_data:
    .db $08, $08, $08, $08, $07, $07, $07, $07                                  ; $13EDFE.EE05 | $00
    .db $06, $06, $06, $06, $06, $05, $05, $05                                  ; $13EE06.EE0D
    .db $08, $08, $07, $07, $06, $06, $05, $05                                  ; $13EE0E.EE15 | $01
    .db $04, $04, $03, $03, $02, $02, $01, $01                                  ; $13EE16.EE1D
    .db $08, $07, $06, $05, $04, $03, $02, $03                                  ; $13EE1E.EE25 | $02
    .db $02, $01, $00, $09, $0A, $0B, $0C, $0D                                  ; $13EE26.EE2D
    .db $08, $07, $06, $05, $04, $03, $02, $03                                  ; $13EE2E.EE35 | $03
    .db $02, $01, $00, $09, $0A, $0B, $0C, $0D                                  ; $13EE36.EE3D

; _special_animate_logo_rotation_and_the_end ($13:EE3E)
;
; Animates the rotation of the Square logo at the end of the game and then jumps
; to the final animation and infinite loop.
_special_animate_logo_rotation_and_the_end:
    INC r_special_vram_copy_disable_primary.w                                   ; $13EE3E | Disable the primary VRAM copy to stop updating the credits.
    LDX #256.w                                                                  ; $13EE41 | Initialize the mode 7 scaling value to 256 (1.0).
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EE44 |\
    JSR _special_set_mode_7_scaling_hdma                                        ; $13EE47 | | Adjust the mode 7 scaling value by subtracting eight each frame
    TXA                                                                         ; $13EE4A | | until it reaches 120, which increases the on-screen size by just
    SEC                                                                         ; $13EE4B | | greater than a factor of 2.
    SBC #8.b                                                                    ; $13EE4C | |
    TAX                                                                         ; $13EE4E | |
    CPX #120.w                                                                  ; $13EE4F | |
    BNE -                                                                       ; $13EE52 |/
    TDC                                                                         ; $13EE54 |\
    TAX                                                                         ; $13EE55 | | Initialize theta to zero.
    STX <r_special_credits_tmp_theta                                            ; $13EE56 |/
    LDX #128.w                                                                  ; $13EE58 |\ Wait for 128 frames.
    JSR _special_wait_for_x_frames                                              ; $13EE5B |/
    LDX #256.w                                                                  ; $13EE5E |\ Initialize the magnitude value to 256 (or 1.0).
    STX <r_special_credits_tmp_magnitude                                        ; $13EE61 |/
    TDC                                                                         ; $13EE63 |\
    TAX                                                                         ; $13EE64 | | Initialize the counter to zero.
    STX <r_special_credits_tmp_counter                                          ; $13EE65 |/
@loop_start:
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EE67 | Wait for the NMI and update the star field.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EE6A |\
    LDA <r_special_credits_tmp_theta                                            ; $13EE6C | | Subtract eight from theta, which corresponds to a rotation of
    SEC                                                                         ; $13EE6E | | 5.625 degrees.
    SBC #8.w                                                                    ; $13EE6F | |
    STA <r_special_credits_tmp_theta                                            ; $13EE72 |/
    DEC <r_special_credits_tmp_magnitude                                        ; $13EE74 |\
    DEC <r_special_credits_tmp_magnitude                                        ; $13EE76 | | Decrement the magnitude by two and put the result in as the
    LDA <r_special_credits_tmp_magnitude                                        ; $13EE78 | | magnitude argument to the upcoming sine call.
    STA <r_special_multiply_16bit_arg_1                                         ; $13EE7A |/
    LDA <r_special_credits_tmp_theta                                            ; $13EE7C |\
    CLC                                                                         ; $13EE7E | | Get the cosine value for the current theta value.
    ADC #128.w                                                                  ; $13EE7F | |
    JSR _special_get_sine_value                                                 ; $13EE82 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EE85 |\
    LDA <r_special_multiply_16bit_result.hi                                     ; $13EE87 | | Save the result as the A and D mode 7 arguments.
    STA <r_special_update_mode_7_parameters_arg_m7a                             ; $13EE89 | |
    STA <r_special_update_mode_7_parameters_arg_m7d                             ; $13EE8B |/
    LDA <r_special_credits_tmp_magnitude                                        ; $13EE8D |\
    STA <r_special_multiply_16bit_arg_1                                         ; $13EE8F | | Calculate the sine value for the current theta and magnitude.
    LDA <r_special_credits_tmp_theta                                            ; $13EE91 | |
    JSR _special_get_sine_value                                                 ; $13EE93 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EE96 |\
    INC <r_special_credits_tmp_counter                                          ; $13EE98 | | Increment the frame counter. If the value mod 4 is zero, and if
    LDA <r_special_credits_tmp_counter                                          ; $13EE9A | | the text color is still not black, subtract 1 from each color
    AND #%00000011.w                                                            ; $13EE9C | | component.
    BNE +                                                                       ; $13EE9F | |
    LDA r_special_cgram_data.1.color2.w                                         ; $13EEA1 | |
    BEQ +                                                                       ; $13EEA4 | |
    SEC                                                                         ; $13EEA6 | |
    SBC #%0000010000100001.w                                                    ; $13EEA7 | |
    STA r_special_cgram_data.1.color2.w                                         ; $13EEAA |/
+   LDA <r_special_multiply_16bit_result.hi                                     ; $13EEAD |\ Set the calculated sine result as the B mode 7 parameter.
    STA <r_special_update_mode_7_parameters_arg_m7b                             ; $13EEAF |/
    EOR #$FFFF.w                                                                ; $13EEB1 |\ Roughly negate the value and set the result as the C mode 7
    STA <r_special_update_mode_7_parameters_arg_m7c                             ; $13EEB4 |/ parameter.
    JSR _special_update_mode_7_parameters                                       ; $13EEB6 | Update the mode 7 parmaeters with the configured values.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EEB9 |\
    LDA r_special_cgram_data.1.color2.w                                         ; $13EEBB | | Loop until the text color becomes black.
    BNE @loop_start                                                             ; $13EEBE |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EEC0 | Wait for the next NMI.
    LDA #%00010000.b                                                            ; $13EEC3 |\ Set the main screen to sprites only.
    STA r_special_ppu_tm.w                                                      ; $13EEC5 |/
    LDX #%0111111111111111.w                                                    ; $13EEC8 |\ Set the second color of the first palette again to white.
    STX r_special_cgram_data.1.color2.w                                         ; $13EECB |/
    LDX #%0000110011000000.w                                                    ; $13EECE |\ Set the third color (previously used for the red in the Square
    STX r_special_cgram_data.1.color3.w                                         ; $13EED1 |/ logo) to a very dim cyan color.
    TDC                                                                         ; $13EED4 |\ Set the X register to zero.
    TAX                                                                         ; $13EED5 |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EED6 |\
    TDC                                                                         ; $13EED9 | | Wait for the next NMI and then zero out the first 4096 bytes of
-   STA r_special_dialog_tilemap_mode_7.w,X                                     ; $13EEDA | | the mode 7 tilemap.
    INX                                                                         ; $13EEDD | |
    CPX #4096.w                                                                 ; $13EEDE | |
    BNE -                                                                       ; $13EEE1 |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EEE3 |\
    TDC                                                                         ; $13EEE6 | | Wait for the next NMI and then zero out the next 4096 bytes of the
-   STA r_special_dialog_tilemap_mode_7.w,X                                     ; $13EEE7 | | mode 7 tilemap.
    INX                                                                         ; $13EEEA | |
    CPX #8192.w                                                                 ; $13EEEB | |
    BNE -                                                                       ; $13EEEE |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EEF0 |\
    TDC                                                                         ; $13EEF3 | | Wait for the next NMI and then zero out the next 4096 bytes of the
-   STA r_special_dialog_tilemap_mode_7.w,X                                     ; $13EEF4 | | mode 7 tilemap.
    INX                                                                         ; $13EEF7 | |
    CPX #12288.w                                                                ; $13EEF8 | |
    BNE -                                                                       ; $13EEFB |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EEFD |\
    TDC                                                                         ; $13EF00 | | Wait for the next NMI and then zero out the remaining 4096 bytes
-   STA r_special_dialog_tilemap_mode_7.w,X                                     ; $13EF01 | | of the mode 7 tilemap.
    INX                                                                         ; $13EF04 | |
    CPX #16384.w                                                                ; $13EF05 | |
    BNE -                                                                       ; $13EF08 |/
    LDA #$C0.b                                                                  ; $13EF0A |\
    STA <r_special_generic_tmp_1.lo                                             ; $13EF0C | | Initialize the two tile numbers to $C0 and $CC.
    LDA #$CC.b                                                                  ; $13EF0E | |
    STA <r_special_generic_tmp_2.lo                                             ; $13EF10 |/
    TDC                                                                         ; $13EF12 |\ Initialize the X register to zero.
    TAX                                                                         ; $13EF13 |/
-   LDA <r_special_generic_tmp_1.lo                                             ; $13EF14 |\
    STA r_special_dialog_tilemap_mode_7.w + (13 * 128) + 10.w,X                 ; $13EF16 | | Set the current tile numbers starting at 10, 13.
    LDA <r_special_generic_tmp_2.lo                                             ; $13EF19 | |
    STA r_special_dialog_tilemap_mode_7.w + (14 * 128) + 10.w,X                 ; $13EF1B |/
    INC <r_special_generic_tmp_1.lo                                             ; $13EF1E |\ Increment the two tile numbers to move to the next tile.
    INC <r_special_generic_tmp_2.lo                                             ; $13EF20 |/
    INX                                                                         ; $13EF22 |\
    CPX #12.w                                                                   ; $13EF23 | | Loop until 12 tiles per row have been written.
    BNE -                                                                       ; $13EF26 |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EF28 | Wait for the next NMI.
    TDC                                                                         ; $13EF2B |\
    TAX                                                                         ; $13EF2C | | Reset the BG1 vertical scroll to zero.
    STX <r_special_bg1_scroll_vertical                                          ; $13EF2D |/
    STX <r_special_vram_copy_target_address                                     ; $13EF2F | Set the secondary VRAM copy target VRAM address to zero.
    LDX #112.w                                                                  ; $13EF31 |\ Set the mode 7 center Y coordinate to 112.
    STX <r_special_ppu_m7y                                                      ; $13EF34 |/
    LDX #r_special_dialog_tilemap_mode_7.w                                      ; $13EF36 |\ Set the secondary VRAM copy source address to the mode 7 tilemap.
    STX <r_special_vram_copy_source_address                                     ; $13EF39 |/
    INC r_special_vram_copy_enable_secondary.w                                  ; $13EF3B | Enable the secondary VRAM copy to copy "The End" to VRAM.
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EF3E |\
    LDA r_special_vram_copy_enable_secondary.w                                  ; $13EF41 | | Loop waiting frames until the transfer is complete.
    BNE -                                                                       ; $13EF44 |/
    JMP _special_animate_the_end                                                ; $13EF46 | Jump to animate the final part of the ending.

; _special_wait_for_x_frames ($13:EF49)
;
; Waits for the number of frames passed in the X register.
_special_wait_for_x_frames:
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EF49 |\
    DEX                                                                         ; $13EF4C | | Wait for the number of frames passed in the X register.
    BNE -                                                                       ; $13EF4D |/
    RTS                                                                         ; $13EF4F

; _special_the_end_palette_cycle_update ($13:EF50)
;
; Updates the palette cycling effect for The End.
_special_the_end_palette_cycle_update:
    LDA r_the_end_palette_cycle_waiting.w                                       ; $13EF50 |\ Skip ahead if currently waiting to cycle the palette.
    BNE +                                                                       ; $13EF53 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EF55 |\ Initialize the X register to point at color index 14.
    LDX #(14 * 2).w                                                             ; $13EF57 |/
    LDA r_special_cgram_data.1.color16.w                                        ; $13EF5A |\ Preserve the color in color index 15.
    PHA                                                                         ; $13EF5D |/
-   LDA r_special_cgram_data.1.color1.w,X                                       ; $13EF5E |\
    STA r_special_cgram_data.1.color2.w,X                                       ; $13EF61 | | Shift the colors toward the end one step, starting by moving 14 to
    DEX                                                                         ; $13EF64 | | 15 and continuing until moving 3 to 4.
    DEX                                                                         ; $13EF65 | |
    CPX #(2 * 2).w                                                              ; $13EF66 | |
    BNE -                                                                       ; $13EF69 |/
    PLA                                                                         ; $13EF6B |\
    STA r_special_cgram_data.1.color4.w                                         ; $13EF6C | | Copy the preserved color into index 3.
    TDC                                                                         ; $13EF6F | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EF70 |/
    DEC r_the_end_palette_cycle_active_counter.w                                ; $13EF72 |\ Decrement the active counter, and if it's still non-zero, branch to
    BNE ++                                                                      ; $13EF75 |/ the end.
    INC r_the_end_palette_cycle_waiting.w                                       ; $13EF77 | Otherwise, increment the waiting flag to switch back to waiting.
+   DEC r_the_end_palette_cycle_waiting_counter.w                               ; $13EF7A |\
    BNE ++                                                                      ; $13EF7D | | Decrement the waiting counter, and if it reaches zero, set the
    JMP _special_the_end_palette_cycle_set_active                               ; $13EF7F | | effect to active.
++  RTS                                                                         ; $13EF82 |/

; _special_the_end_palette_cycle_set_active ($13:EF83)
;
; For the palette cycling effect at the very end, sets the effect to active.
_special_the_end_palette_cycle_set_active:
    STZ r_the_end_palette_cycle_waiting.w                                       ; $13EF83 | Reset the waiting flag.
    STZ r_unknown_7d23.w                                                        ; $13EF86 | TODO
    LDA #26.b                                                                   ; $13EF89 |\ Set the active counter to 26.
    STA r_the_end_palette_cycle_active_counter.w                                ; $13EF8B |/
    LDA r_the_end_palette_cycle_rng_index.w                                     ; $13EF8E |\
    INC r_the_end_palette_cycle_rng_index.w                                     ; $13EF91 | | Set the waiting counter to a random value.
    TAX                                                                         ; $13EF94 | | BUG: At least, that's what it looks like it was meant to do.
    LDA $EE00.w,X                                                               ; $13EF95 | |      However, $EE00 in RAM is zeroes at this point, so this should
    STA r_the_end_palette_cycle_waiting_counter.w                               ; $13EF98 |/       either load from bank $14 or a different RAM address. As a
    RTS                                                                         ; $13EF9B |        result, the value is always set to 0, which is effectively 256.

; _special_animate_the_end ($13:EF9C)
;
; Does the final "The End" animation, zooming in on the graphics, and once
; complete, switches to playing the Prelude music and looping forever.
_special_animate_the_end:
    LDX #$0000.w                                                                ; $13EF9C |\
    STX <r_special_update_mode_7_parameters_arg_m7b                             ; $13EF9F | | Set the mode 7 parameters for a long zoom (64x reduction in size)
    STX <r_special_update_mode_7_parameters_arg_m7c                             ; $13EFA1 | | with no rotation.
    LDX #$4000.w                                                                ; $13EFA3 | |
    STX <r_special_update_mode_7_parameters_arg_m7a                             ; $13EFA6 | |
    STX <r_special_update_mode_7_parameters_arg_m7d                             ; $13EFA8 | |
    JSR _special_update_mode_7_parameters                                       ; $13EFAA |/
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EFAD | Wait for the next NMI.
    LDA #%10000000.b                                                            ; $13EFB0 |\ Set the mode 7 flag to repeat the single color outside the screen
    STA <r_special_ppu_m7sel                                                    ; $13EFB2 |/ area.
    LDA #%00010001.b                                                            ; $13EFB4 |\ Set the main screen to BG1 and sprites.
    STA r_special_ppu_tm.w                                                      ; $13EFB6 |/
    TDC                                                                         ; $13EFB9 |\
    TAX                                                                         ; $13EFBA | | Initialize the theta value to zero.
    STX <r_special_credits_tmp_theta                                            ; $13EFBB |/
    LDX #$0800.w                                                                ; $13EFBD |\ Set the magnitude to $800.
    STX <r_special_credits_tmp_magnitude                                        ; $13EFC0 |/
@loop_start:
    JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13EFC2 | Wait for the next NMI.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EFC5 |\
    LDA <r_special_credits_tmp_magnitude                                        ; $13EFC7 | | Subtract 16 from the magnitude value.
    SEC                                                                         ; $13EFC9 | |
    SBC #16.w                                                                   ; $13EFCA | |
    STA <r_special_credits_tmp_magnitude                                        ; $13EFCD |/
    LDA <r_special_credits_tmp_magnitude                                        ; $13EFCF |\
    STA <r_special_multiply_16bit_arg_1                                         ; $13EFD1 | | Calculate the cosine value for the current theta and magnitude.
    LDA <r_special_credits_tmp_theta                                            ; $13EFD3 | |
    CLC                                                                         ; $13EFD5 | |
    ADC #128.w                                                                  ; $13EFD6 | |
    JSR _special_get_sine_value                                                 ; $13EFD9 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EFDC |\
    LDA <r_special_multiply_16bit_result.hi                                     ; $13EFDE | | Set the A and D mode 7 parameters to the result.
    STA <r_special_update_mode_7_parameters_arg_m7a                             ; $13EFE0 | |
    STA <r_special_update_mode_7_parameters_arg_m7d                             ; $13EFE2 |/
    LDA <r_special_credits_tmp_magnitude                                        ; $13EFE4 |\
    STA <r_special_multiply_16bit_arg_1                                         ; $13EFE6 | | Calculate the sine value for the theta and magnitude.
    LDA <r_special_credits_tmp_theta                                            ; $13EFE8 | |
    JSR _special_get_sine_value                                                 ; $13EFEA | |
    REP #FLAG_P_ACCUMULATOR                                                     ; $13EFED |/
    LDA <r_special_multiply_16bit_result.hi                                     ; $13EFEF |\ Set the B mode 7 parmaeter to the result.
    STA <r_special_update_mode_7_parameters_arg_m7b                             ; $13EFF1 |/
    EOR #$FFFF.w                                                                ; $13EFF3 |\ Roughly negate the value and set the C mode 7 parmaeter to that
    STA <r_special_update_mode_7_parameters_arg_m7c                             ; $13EFF6 |/ value.
    JSR _special_update_mode_7_parameters                                       ; $13EFF8 |\ Update the mode 7 parameters to the configured values.
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13EFFB |/
    LDX <r_special_credits_tmp_magnitude                                        ; $13EFFD |\
    CPX #512.w                                                                  ; $13EFFF | | Loop until the magnitude reaches 512.
    BNE @loop_start                                                             ; $13F002 |/
    LDX #180.w                                                                  ; $13F004 |\ Wait for 180 frames.
    JSR _special_wait_for_x_frames                                              ; $13F007 |/
    LDA #AUDIO_MODE_NORMAL.b                                                    ; $13F00A |\
    STA r_play_audio_arg_mode.l & $FFFF                                         ; $13F00C | | Play the Prelude theme.
    LDA #AUDIO_TRACK_PRELUDE.b                                                  ; $13F010 | |
    STA r_play_audio_arg_track.l & $FFFF                                        ; $13F012 | |
    JSL bank04.play_audio                                                       ; $13F016 |/
    JSR _special_the_end_palette_cycle_set_active                               ; $13F01A |\ Activate the "The End" palette cycling.
    INC r_the_end_palette_cycle_enabled.w                                       ; $13F01D |/
-   JSR _special_wait_for_nmi_and_update_star_field_entries_if_credits          ; $13F020 |\ Loop forever.........
    JMP -                                                                       ; $13F023 |/

; _special_update_mode_7_parameters ($13:F026)
;
; Given the mode 7 parameters A, B, C and D in $00, $02, $04 and $06,
; respectively, updates the HDMA table to reflect those values on all scanlines.
_special_update_mode_7_parameters:
    PHX                                                                         ; $13F026 | Preserve the X register value.
    REP #FLAG_P_ACCUMULATOR                                                     ; $13F027 |\
    TDC                                                                         ; $13F029 | | Reset the X register to zero.
    TAX                                                                         ; $13F02A |/
-   LDA <r_special_update_mode_7_parameters_arg_m7a                             ; $13F02B |\
    STA r_special_m7a_m7b_hdma_data.1.m7a.w,X                                   ; $13F02D | | Set the current mode 7 parameters in the HDMA table to the passed
    LDA <r_special_update_mode_7_parameters_arg_m7d                             ; $13F030 | | values.
    STA r_special_m7c_m7d_hdma_data.1.m7d.w,X                                   ; $13F032 | |
    LDA <r_special_update_mode_7_parameters_arg_m7b                             ; $13F035 | |
    STA r_special_m7a_m7b_hdma_data.1.m7b.w,X                                   ; $13F037 | |
    LDA <r_special_update_mode_7_parameters_arg_m7c                             ; $13F03A | |
    STA r_special_m7c_m7d_hdma_data.1.m7c.w,X                                   ; $13F03C |/
    INX                                                                         ; $13F03F |\
    INX                                                                         ; $13F040 | | Increment the X register by four to move to the next entry.
    INX                                                                         ; $13F041 | |
    INX                                                                         ; $13F042 |/
    CPX #_sizeof_r_special_m7a_m7b_hdma_data.w                                  ; $13F043 |\ Loop until the entire HDMA table has been written.
    BNE -                                                                       ; $13F046 |/
    TDC                                                                         ; $13F048 |\
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13F049 | | Restore the X register.
    PLX                                                                         ; $13F04B |/
    RTS                                                                         ; $13F04C

; tiles_the_end_data ($13:F04D)
;
; Tiles containing "The End" displayed at during the ending credits.
; Additionally, the small triangle used as the Square logo is in this data. For
; whatever reason, the Japanese version of the logo has been shifted slightly.
tiles_the_end_data:
    .incbin "gfx/tiles_the_end.bin"                                             ; $13F04D.F34C
.if FF4_REGION == "JAPAN"
    .incbin "gfx/tiles_square_logo_japan.bin"                                   ; $13F316.F335
.else
    .incbin "gfx/tiles_square_logo.bin"                                         ; $13F34D.F36C
.endif

; special_dialog_credits_data ($13:F36D)
;
; Dialog data for the credits displayed in the ending sequence.
special_dialog_credits_data:
.if FF4_REGION == "JAPAN"
    .db $02, $04, $47, $4A, $4F, $42, $4D, $FF, $47, $42, $4F, $55, $42, $54    ; $13F336.F343
    .db $5A, $FF, $4A, $57, $02, $02, $54, $55, $42, $47, $47, $01, $01, $01    ; $13F344.F351
    .db $01, $01, $02, $0C, $45, $4A, $53, $46, $44, $55, $50, $53, $01, $01    ; $13F352.F35F
    .db $02, $0B, $49, $0A, $54, $42, $4C, $42, $48, $56, $44, $49, $4A, $01    ; $13F360.F36D
    .db $01, $01, $01, $01, $02, $08, $44, $49, $42, $53, $42, $44, $55, $46    ; $13F36E.F37B
    .db $53, $FF, $45, $46, $54, $4A, $48, $4F, $01, $01, $02, $0D, $5A, $0A    ; $13F37C.F389
    .db $42, $4E, $42, $4F, $50, $01, $01, $01, $01, $01, $02, $0A, $4E, $56    ; $13F38A.F397
    .db $54, $4A, $44, $FF, $44, $50, $4E, $51, $50, $54, $46, $01, $01, $02    ; $13F398.F3A5
    .db $0C, $4F, $0A, $56, $46, $4E, $42, $55, $54, $56, $01, $01, $01, $01    ; $13F3A6.F3B3
    .db $01, $02, $0A, $4E, $42, $4A, $4F, $FF, $45, $46, $54, $4A, $48, $4F    ; $13F3B4.F3C1
    .db $01, $02, $0C, $55, $0A, $55, $50, $4C, $4A, $55, $42, $01, $01, $02    ; $13F3C2.F3CF
    .db $0A, $4E, $42, $4A, $4F, $FF, $51, $53, $50, $48, $53, $42, $4E, $01    ; $13F3D0.F3DD
    .db $02, $0C, $4C, $0A, $4F, $42, $53, $4A, $55, $42, $01, $01, $02, $0A    ; $13F3DE.F3EB
    .db $4E, $42, $4A, $4F, $FF, $48, $53, $42, $51, $49, $4A, $44, $01, $02    ; $13F3EC.F3F9
    .db $0C, $49, $0A, $4F, $42, $4C, $42, $45, $42, $01, $02, $0C, $53, $0A    ; $13F3FA.F407
    .db $55, $42, $4F, $42, $4C, $42, $01, $01, $02, $0B, $4E, $42, $51, $FF    ; $13F408.F415
    .db $45, $46, $54, $4A, $48, $4F, $01, $02, $0B, $5A, $0A, $4E, $42, $55    ; $13F416.F423
    .db $54, $56, $4E, $56, $53, $42, $01, $01, $02, $09, $43, $42, $55, $55    ; $13F424.F431
    .db $4D, $46, $FF, $45, $46, $54, $4A, $48, $4F, $01, $02, $0D, $4C, $0A    ; $13F432.F43F
    .db $42, $50, $4C, $4A, $01, $02, $0D, $49, $0A, $4A, $55, $50, $01, $02    ; $13F440.F44D
    .db $0C, $42, $0A, $4E, $42, $55, $54, $56, $4A, $01, $01, $02, $08, $43    ; $13F44E.F45B
    .db $42, $55, $55, $4D, $46, $FF, $51, $53, $50, $48, $53, $42, $4E, $01    ; $13F45C.F469
    .db $02, $0C, $4C, $0A, $5A, $50, $54, $49, $4A, $4A, $01, $02, $0C, $4C    ; $13F46A.F477
    .db $0A, $49, $4A, $48, $56, $44, $49, $4A, $01, $01, $02, $09, $43, $42    ; $13F478.F485
    .db $55, $55, $4D, $46, $FF, $48, $53, $42, $51, $49, $4A, $44, $01, $02    ; $13F486.F493
    .db $0B, $55, $0A, $55, $42, $4C, $42, $49, $42, $54, $49, $4A, $01, $02    ; $13F494.F4A1
    .db $0C, $4E, $0A, $49, $50, $54, $49, $4A, $4F, $50, $01, $01, $02, $0A    ; $13F4A2.F4AF
    .db $4E, $46, $4F, $56, $FF, $51, $53, $50, $48, $53, $42, $4E, $01, $02    ; $13F4B0.F4BD
    .db $0C, $4C, $0A, $42, $45, $42, $44, $49, $4A, $01, $01, $02, $0A, $4E    ; $13F4BE.F4CB
    .db $56, $54, $4A, $44, $FF, $51, $53, $50, $48, $53, $42, $4E, $01, $02    ; $13F4CC.F4D9
    .db $0D, $4E, $0A, $42, $4C, $42, $50, $01, $01, $02, $0A, $54, $50, $56    ; $13F4DA.F4E7
    .db $4F, $45, $FF, $46, $47, $47, $46, $44, $55, $01, $02, $0D, $4C, $0A    ; $13F4E8.F4F5
    .db $4A, $55, $50, $01, $02, $0D, $42, $0A, $56, $46, $45, $42, $01, $01    ; $13F4F6.F503
    .db $02, $0A, $55, $53, $42, $4F, $54, $4D, $42, $55, $4A, $50, $4F, $01    ; $13F504.F511
    .db $02, $0B, $4C, $0A, $4E, $50, $53, $4A, $5A, $42, $4E, $42, $01, $01    ; $13F512.F51F
    .db $01, $01, $01, $01, $01, $02, $07, $46, $59, $46, $44, $56, $55, $4A    ; $13F520.F52D
    .db $57, $46, $FF, $51, $53, $50, $45, $56, $44, $46, $53, $01, $01, $02    ; $13F52E.F53B
    .db $0B, $4E, $0A, $4E, $4A, $5A, $42, $4E, $50, $55, $50, $01, $01, $01    ; $13F53C.F549
    .db $01, $01, $01, $01, $01, $02, $06, $54, $51, $46, $44, $4A, $42, $4D    ; $13F54A.F557
    .db $FF, $55, $49, $42, $4F, $4C, $54, $FF, $55, $50, $FF, $0A, $0A, $0A    ; $13F558.F565
    .db $01, $01, $01, $02, $0C, $49, $0A, $55, $42, $4F, $42, $4C, $42, $01    ; $13F566.F573
    .db $02, $0C, $42, $0A, $4C, $42, $58, $42, $5B, $56, $01, $01, $02, $0C    ; $13F574.F581
    .db $4C, $0A, $4A, $54, $49, $4A, $4A, $01, $02, $0B, $4C, $0A, $54, $49    ; $13F582.F58F
    .db $4A, $43, $56, $5A, $42, $01, $01, $02, $0C, $54, $0A, $55, $42, $4F    ; $13F590.F59D
    .db $42, $4C, $42, $01, $02, $0B, $4C, $0A, $4C, $50, $4A, $5B, $56, $4E    ; $13F59E.F5AB
    .db $4A, $01, $02, $0B, $4A, $0A, $45, $50, $43, $42, $54, $49, $4A, $01    ; $13F5AC.F5B9
    .db $02, $0D, $55, $0A, $46, $4F, $45, $50, $01, $02, $0B, $55, $0A, $55    ; $13F5BA.F5C7
    .db $42, $4C, $42, $49, $42, $54, $49, $4A, $01, $02, $0C, $54, $0A, $4C    ; $13F5C8.F5D5
    .db $42, $4E, $46, $50, $4C, $42, $01, $01, $01, $02, $0B, $49, $0A, $55    ; $13F5D6.F5E3
    .db $42, $4C, $46, $4E, $56, $53, $42, $01, $02, $0C, $49, $0A, $54, $56    ; $13F5E4.F5F1
    .db $5B, $56, $4C, $4A, $01, $02, $0B, $49, $0A, $4C, $50, $43, $42, $5A    ; $13F5F2.F5FF
    .db $42, $54, $49, $4A, $01, $02, $0C, $55, $0A, $4E, $4A, $5B, $56, $4F    ; $13F600.F60D
    .db $50, $01, $02, $0C, $55, $0A, $55, $42, $4C, $46, $44, $49, $4A, $01    ; $13F60E.F61B
    .db $01, $02, $0C, $5A, $0A, $49, $4A, $53, $42, $55, $42, $01, $02, $0C    ; $13F61C.F629
    .db $5A, $0A, $4A, $54, $49, $4A, $45, $42, $01, $02, $0C, $4C, $0A, $54    ; $13F62A.F637
    .db $50, $56, $54, $56, $4A, $01, $02, $0C, $4E, $0A, $50, $4C, $42, $4E    ; $13F638.F645
    .db $4A, $5A, $42, $01, $02, $0C, $55, $0A, $4F, $50, $4E, $56, $53, $42    ; $13F646.F653
    .db $01, $02, $0B, $4C, $0A, $5A, $42, $4E, $42, $54, $49, $4A, $55, $42    ; $13F654.F661
    .db $01, $01, $02, $0B, $54, $0A, $49, $42, $54, $46, $48, $42, $58, $42    ; $13F662.F66F
    .db $01, $02, $0B, $4C, $0A, $55, $42, $4F, $4A, $4C, $42, $58, $42, $01    ; $13F670.F67D
    .db $02, $0C, $4E, $0A, $45, $46, $4F, $4F, $50, $01, $01, $02, $0B, $4E    ; $13F67E.F68B
    .db $0A, $4C, $42, $4F, $46, $54, $49, $4A, $48, $46, $01, $02, $0B, $54    ; $13F68C.F699
    .db $0A, $4C, $42, $4B, $4A, $55, $42, $4F, $4A, $01, $02, $0B, $5A, $0A    ; $13F69A.F6A7
    .db $54, $56, $46, $4E, $4A, $55, $54, $56, $01, $02, $0D, $53, $0A, $4C    ; $13F6A8.F6B5
    .db $50, $45, $42, $01, $02, $0C, $4E, $0A, $5A, $56, $4E, $50, $55, $50    ; $13F6B6.F6C3
    .db $01, $02, $0C, $49, $0A, $4F, $50, $48, $56, $44, $49, $4A, $01, $01    ; $13F6C4.F6D1
    .db $01, $02, $0C, $55, $0A, $42, $4F, $42, $5B, $42, $58, $42, $01, $02    ; $13F6D2.F6DF
    .db $0C, $4C, $0A, $4C, $50, $4C, $56, $43, $50, $01, $02, $0D, $55, $0A    ; $13F6E0.F6ED
    .db $4A, $4F, $50, $56, $46, $01, $02, $0D, $4F, $0A, $4A, $4F, $50, $56    ; $13F6EE.F6FB
    .db $46, $01, $02, $0E, $49, $0A, $4A, $55, $50, $01, $01, $02, $0C, $5A    ; $13F6FC.F709
    .db $0A, $4C, $4A, $55, $42, $54, $46, $01, $02, $0C, $48, $0A, $50, $49    ; $13F70A.F717
    .db $42, $54, $49, $4A, $01, $02, $0B, $54, $0A, $5A, $50, $54, $49, $4A    ; $13F718.F725
    .db $46, $45, $42, $01, $02, $0C, $4E, $0A, $54, $42, $4A, $55, $50, $01    ; $13F726.F733
    .db $02, $0C, $49, $0A, $55, $42, $4C, $42, $4A, $01, $02, $0B, $4E, $0A    ; $13F734.F741
    .db $45, $42, $4A, $54, $49, $4A, $4E, $42, $01, $02, $0C, $55, $0A, $4F    ; $13F742.F74F
    .db $50, $4E, $56, $53, $42, $01, $01, $02, $0B, $55, $0A, $47, $56, $4B    ; $13F750.F75D
    .db $4A, $50, $4C, $42, $01, $02, $0D, $4C, $0A, $4A, $45, $46, $01, $02    ; $13F75E.F76B
    .db $0C, $4E, $0A, $4E, $50, $53, $4A, $55, $42, $01, $02, $0C, $49, $0A    ; $13F76C.F779
    .db $4C, $5A, $50, $4F, $46, $4F, $01, $01, $02, $0D, $4C, $0A, $48, $50    ; $13F77A.F787
    .db $55, $50, $01, $02, $0D, $55, $0A, $47, $56, $4B, $4A, $4A, $01, $02    ; $13F788.F795
    .db $0D, $4C, $0A, $4C, $50, $4F, $45, $50, $01, $02, $0B, $4A, $0A, $4F    ; $13F796.F7A3
    .db $42, $4C, $42, $4F, $4A, $54, $49, $4A, $01, $01, $02, $0C, $5A, $0A    ; $13F7A4.F7B1
    .db $5A, $42, $54, $56, $45, $42, $01, $02, $0D, $4E, $0A, $4C, $42, $43    ; $13F7B2.F7BF
    .db $46, $01, $02, $0C, $4E, $0A, $54, $49, $4A, $4E, $50, $4B, $4A, $01    ; $13F7C0.F7CD
    .db $01, $02, $0C, $55, $0A, $54, $56, $5B, $56, $4C, $4A, $01, $02, $0D    ; $13F7CE.F7DB
    .db $54, $0A, $54, $42, $4F, $50, $01, $01, $01, $01, $01, $01, $01, $01    ; $13F7DC.F7E9
    .db $02, $0A, $51, $53, $46, $54, $46, $4F, $55, $46, $45, $FF, $43, $5A    ; $13F7EA.F7F7
    .db $01, $01, $02, $0D, $54, $52, $56, $D8, $53, $46, $00                   ; $13F7F8.F802
.else
    .asc 2, 5, "FINAL FANTASY II", 2, 2, "STAFF", 1, 1, 1, 1                    ; $13F36D.F389
    .asc 2, 12, "DIRECTOR", 1, 1                                                ; $13F38A.F395
    .asc 2, 11, "H", $0A, "SAKAGUCHI", 1, 1, 1, 1                               ; $13F396.F3A6
    .asc 2, 8, "CHARACTER DESIGN", 1, 1, 1                                      ; $13F3A7.F3BB
    .asc 2, 13, "Y", $0A, "AMANO", 1, 1, 1, 1                                   ; $13F3BC.F3C8
    .asc 2, 10, "MUSIC COMPOSER", 1, 1                                          ; $13F3C9.F3DA
    .asc 2, 12, "N", $0A, "UEMATSU", 1, 1, 1, 1                                 ; $13F3DB.F3E9
    .asc 2, 11, "MAIN DESIGN", 1, 1                                             ; $13F3EA.F3F8
    .asc 2, 12, "T", $0A, "TOKITA", 1, 1, 1                                     ; $13F3F9.F405
    .asc 2, 10, "MAIN PROGRAM", 1, 1                                            ; $13F406.F415
    .asc 2, 12, "K", $0A, "NARITA", 1, 1, 1                                     ; $13F416.F422
    .asc 2, 10, "MAIN GRAPHIC", 1, 1                                            ; $13F423.F432
    .asc 2, 12, "H", $0A, "NAKADA", 1, 1                                        ; $13F433.F43E
    .asc 2, 12, "R", $0A, "TANAKA", 1, 1, 1                                     ; $13F43F.F44B
    .asc 2, 11, "MAP DESIGN", 1, 1                                              ; $13F44C.F459
    .asc 2, 11, "Y", $0A, "MATSUMURA", 1, 1, 1                                  ; $13F45A.F469
    .asc 2, 10, "BATTLE DESIGN", 1, 1                                           ; $13F46A.F47A
    .asc 2, 13, "K", $0A, "AOKI", 1, 1                                          ; $13F47B.F484
    .asc 2, 14, "H", $0A, "ITO", 1, 1                                           ; $13F485.F48D
    .asc 2, 12, "A", $0A, "MATSUI", 1, 1, 1                                     ; $13F48E.F49A
    .asc 2, 9, "BATTLE PROGRAM", 1, 1                                           ; $13F49B.F4AC
    .asc 2, 13, "K", $0A, "YOSHII", 1, 1                                        ; $13F4AD.F4B8
    .asc 2, 12, "K", $0A, "HIGUCHI", 1, 1, 1                                    ; $13F4B9.F4C6
    .asc 2, 9, "BATTLE GRAPHIC", 1, 1                                           ; $13F4C7.F4D8
    .asc 2, 11, "T", $0A, "TAKAHASHI", 1, 1                                     ; $13F4D9.F4E7
    .asc 2, 12, "M", $0A, "HOSHINO", 1, 1, 1                                    ; $13F4E8.F4F5
    .asc 2, 10, "MENU PROGRAM", 1, 1                                            ; $13F4F6.F505
    .asc 2, 12, "K", $0A, "ADACHI", 1, 1, 1                                     ; $13F506.F512
    .asc 2, 10, "MUSIC PROGRAM", 1, 1                                           ; $13F513.F523
    .asc 2, 13, "M", $0A, "AKAO", 1, 1, 1                                       ; $13F524.F52E
    .asc 2, 10, "SOUND EFFECT", 1, 1                                            ; $13F52F.F53E
    .asc 2, 14, "K", $0A, "ITO", 1, 1                                           ; $13F53F.F547
    .asc 2, 13, "A", $0A, "UEDA", 1, 1, 1                                       ; $13F548.F552
    .asc 2, 11, "TRANSLATION", 1, 1                                             ; $13F553.F561
    .asc 2, 11, "K", $0A, "MORIYAMA", 1, 1                                      ; $13F562.F56F
    .asc 2, 12, "K", $0A, "OKAHISA", 1, 1                                       ; $13F570.F57C
    .asc 2, 11, "H", $0A, "TAKAHASHI", 1, 1, 1, 1                               ; $13F57D.F58D
    .asc 2, 7, "EXECUTIVE PRODUCER", 1, 1, 1                                    ; $13F58E.F5A4
    .asc 2, 11, "M", $0A, "MIYAMOTO", 1, 1, 1, 1                                ; $13F5A5.F5B4
    .asc 2, 7, "SPECIAL THANKS TO ", $0A, $0A, $0A, 1, 1, 1                     ; $13F5B5.F5CE
    .asc 2, 13, "A", $0A, "SAITO", 1                                            ; $13F5CF.F5D8
    .asc 2, 10, "D", $0A, "R", $0A, "CLOUTIER", 1                               ; $13F5D9.F5E7
    .asc 2, 10, "R", $0A, "D", $0A, "SILVEIRA", 1                               ; $13F5E8.F5F6
    .asc 2, 10, "J", $0A, "YANAGIHARA", 1                                       ; $13F5F7.F605
    .asc 2, 12, "D", $0A, "R", $0A, "GARZA", 1                                  ; $13F606.F611
    .asc 2, 12, "C", $0A, "B", $0A, "BUDD", 1                                   ; $13F612.F61C
    .asc 2, 11, "V", $0A, "A", $0A, "MAYHEW", 1                                 ; $13F61D.F629
    .asc 2, 9, "K", $0A, "M", $0A, "FREDRICKSON", 1                             ; $13F62A.F63B
    .asc 2, 10, "K", $0A, "E", $0A, "KIRCHNER", 1                               ; $13F63C.F64A
    .asc 2, 11, "N", $0A, "WILLIAMS", 1, 1                                      ; $13F64B.F658
    .asc 2, 12, "K", $0A, "KOIZUMI", 1                                          ; $13F659.F664
    .asc 2, 12, "I", $0A, "DOBASHI", 1                                          ; $13F665.F670
    .asc 2, 12, "S", $0A, "TANAKA", 1                                           ; $13F671.F67B
    .asc 2, 12, "T", $0A, "NOMURA", 1                                           ; $13F67C.F686
    .asc 2, 12, "Y", $0A, "KAMATA", 1, 1                                        ; $13F687.F692
    .asc 2, 12, "H", $0A, "TANAKA", 1                                           ; $13F693.F69D
    .asc 2, 12, "A", $0A, "KAWAZU", 1                                           ; $13F69E.F6A8
    .asc 2, 13, "K", $0A, "ISHII", 1                                            ; $13F6A9.F6B2
    .asc 2, 12, "K", $0A, "SHIBUYA", 1                                          ; $13F6B3.F6BE
    .asc 2, 13, "T", $0A, "ENDO", 1                                             ; $13F6BF.F6C7
    .asc 2, 11, "T", $0A, "TAKAHASHI", 1                                        ; $13F6C8.F6D5
    .asc 2, 12, "S", $0A, "KAMEOKA", 1, 1                                       ; $13F6D6.F6E2
    .asc 2, 11, "H", $0A, "TAKEMURA", 1                                         ; $13F6E3.F6EF
    .asc 2, 12, "H", $0A, "SUZUKI", 1                                           ; $13F6F0.F6FA
    .asc 2, 11, "H", $0A, "KOBAYASHI", 1                                        ; $13F6FB.F708
    .asc 2, 12, "T", $0A, "MIZUNO", 1                                           ; $13F709.F713
    .asc 2, 12, "T", $0A, "TAKECHI", 1, 1                                       ; $13F714.F720
    .asc 2, 12, "T", $0A, "ANAZAWA", 1                                          ; $13F721.F72C
    .asc 2, 12, "K", $0A, "KOKUBO", 1                                           ; $13F72D.F737
    .asc 2, 13, "T", $0A, "INOUE", 1                                            ; $13F738.F741
    .asc 2, 13, "N", $0A, "INOUE", 1                                            ; $13F742.F74B
    .asc 2, 14, "H", $0A, "ITO", 1                                              ; $13F74C.F753
    .asc 2, 12, "Y", $0A, "KITASE", 1                                           ; $13F754.F75E
    .asc 2, 12, "G", $0A, "OHASHI", 1                                           ; $13F75F.F769
    .asc 2, 11, "S", $0A, "YOSHIEDA", 1                                         ; $13F76A.F776
    .asc 2, 13, "M", $0A, "SAITO", 1                                            ; $13F777.F780
    .asc 2, 13, "H", $0A, "TAKAI", 1                                            ; $13F781.F78A
    .asc 2, 11, "M", $0A, "DAISHIMA", 1, 1                                      ; $13F78B.F798
    .asc 2, 12, "T", $0A, "SUZUKI", 1                                           ; $13F799.F7A3
    .asc 2, 13, "S", $0A, "SANO", 1                                             ; $13F7A4.F7AC
    .asc 2, 13, "N", $0A, "GOTO", 1, 1, 1, 1, 1, 1, 1, 1, 1                     ; $13F7AD.F7BD
    .asc 2, 10, "PRESENTED BY", 1, 1                                            ; $13F7BE.F7CD
    .asc 2, 13, "SQU", 216, "RE", 0                                             ; $13F7CE.F7D6
.endif

UNUSED_13F7D7:
.if FF4_REGION == "JAPAN"
    .dsb 253 $FF                                                                ; $13F803.F8FF
.else
    .dsb 297 $FF                                                                ; $13F7D7.F8FF
.endif

; battle_effect_fire3_frame_sprite_mask_data ($13:F900)
;
; For each value of the Fire3 frame counter, provides a mask of sprites to
; update the positions of on that frame.
battle_effect_fire3_frame_sprite_mask_data:
    .db %00000001                                                               ; $13F900
    .db %00000100                                                               ; $13F901
    .db %00000010                                                               ; $13F902
    .db %00000001                                                               ; $13F903
    .db %00000100                                                               ; $13F904
    .db %00000010                                                               ; $13F905
    .db %00000001                                                               ; $13F906
    .db %00000100                                                               ; $13F907
    .db %00000010                                                               ; $13F908

; battle_effect_call_bahamut_oam_pointer_data ($13:F909)
;
; For each frame of the Bahamut spell, contains the OAM entries necessary to
; draw the effect. The actual effect is composed of multiple copies of these
; frames placed at random locations, and occurring at different times.
battle_effect_call_bahamut_oam_pointer_data:
    .addr battle_effect_call_bahamut_oam_frame_1_data                           ; $13F909.F90A
    .addr battle_effect_call_bahamut_oam_frame_2_data                           ; $13F90B.F90C
    .addr battle_effect_call_bahamut_oam_frame_3_data                           ; $13F90D.F90E
    .addr battle_effect_call_bahamut_oam_frame_4_data                           ; $13F90F.F910
    .addr battle_effect_call_bahamut_oam_frame_5_data                           ; $13F911.F912
    .addr battle_effect_call_bahamut_oam_frame_6_data                           ; $13F913.F914
    .addr battle_effect_call_bahamut_oam_frame_7_data                           ; $13F915.F916
    .addr battle_effect_call_bahamut_oam_frame_8_data                           ; $13F917.F918

; battle_effect_call_bahamut_oam_frame_1_data ($13:F919)
;
; OAM data for the first frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_1_data:
    OAM 16, 16, 0, 0, 3, 7, 1, $84                                              ; $13F919.F91C
    .db $FF                                                                     ; $13F91D

; battle_effect_call_bahamut_oam_frame_2_data ($13:F919)
;
; OAM data for the second frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_2_data:
    OAM 16, 16, 0, 0, 3, 7, 1, $82                                              ; $13F91E.F921
    .db $FF                                                                     ; $13F922

; battle_effect_call_bahamut_oam_frame_3_data ($13:F919)
;
; OAM data for the third frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_3_data:
    OAM  8,  8, 0, 0, 3, 7, 1, $CA                                              ; $13F923.F926
    OAM 24,  8, 0, 1, 3, 7, 1, $CA                                              ; $13F927.F92A
    OAM  8, 24, 1, 0, 3, 7, 1, $CA                                              ; $13F92B.F92E
    OAM 24, 24, 1, 1, 3, 7, 1, $CA                                              ; $13F92F.F932
    .db $FF                                                                     ; $13F933

; battle_effect_call_bahamut_oam_frame_4_data ($13:F919)
;
; OAM data for the fourth frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_4_data:
    OAM  0,  0, 0, 0, 3, 7, 1, $8C                                              ; $13F934.F937
    OAM 16,  0, 0, 0, 3, 7, 1, $8E                                              ; $13F938.F93B
    OAM 32,  0, 0, 1, 3, 7, 1, $8C                                              ; $13F93C.F93F
    OAM  0, 16, 0, 0, 3, 7, 1, $AC                                              ; $13F940.F943
    OAM 16, 16, 0, 0, 3, 7, 1, $AE                                              ; $13F944.F947
    OAM 32, 16, 0, 1, 3, 7, 1, $AC                                              ; $13F948.F94B
    OAM  0, 32, 1, 0, 3, 7, 1, $8C                                              ; $13F94C.F94F
    OAM 16, 32, 1, 0, 3, 7, 1, $8E                                              ; $13F950.F953
    OAM 32, 32, 1, 1, 3, 7, 1, $8C                                              ; $13F954.F957
    .db $FF                                                                     ; $13F958

; battle_effect_call_bahamut_oam_frame_5_data ($13:F919)
;
; OAM data for the fifth frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_5_data:
    OAM  8,  8, 0, 0, 3, 7, 1, $C0                                              ; $13F959.F95C
    OAM 24,  8, 0, 0, 3, 7, 1, $C2                                              ; $13F95D.F960
    OAM  8, 24, 0, 0, 3, 7, 1, $A8                                              ; $13F961.F964
    OAM 24, 24, 0, 0, 3, 7, 1, $AA                                              ; $13F965.F968
    .db $FF                                                                     ; $13F969

; battle_effect_call_bahamut_oam_frame_6_data ($13:F919)
;
; OAM data for the sixth frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_6_data:
    OAM  8,  8, 0, 1, 3, 7, 1, $C2                                              ; $13F96A.F96D
    OAM 24,  8, 0, 1, 3, 7, 1, $C0                                              ; $13F96E.F971
    OAM  8, 24, 0, 1, 3, 7, 1, $AA                                              ; $13F972.F975
    OAM 24, 24, 0, 1, 3, 7, 1, $A8                                              ; $13F976.F979
    .db $FF                                                                     ; $13F97A

; battle_effect_call_bahamut_oam_frame_7_data ($13:F919)
;
; OAM data for the seventh frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_7_data:
    OAM  8,  8, 1, 1, 3, 7, 1, $AA                                              ; $13F97B.F97E
    OAM 24,  8, 1, 1, 3, 7, 1, $A8                                              ; $13F97F.F982
    OAM  8, 24, 1, 1, 3, 7, 1, $C2                                              ; $13F983.F986
    OAM 24, 24, 1, 1, 3, 7, 1, $C0                                              ; $13F987.F98A
    .db $FF                                                                     ; $13F98B

; battle_effect_call_bahamut_oam_frame_8_data ($13:F919)
;
; OAM data for the eighth frame of the Bahamut call spell.
battle_effect_call_bahamut_oam_frame_8_data:
    OAM  8,  8, 1, 0, 3, 7, 1, $A8                                              ; $13F98C.F98F
    OAM 24,  8, 1, 0, 3, 7, 1, $AA                                              ; $13F990.F993
    OAM  8, 24, 1, 0, 3, 7, 1, $C0                                              ; $13F994.F997
    OAM 24, 24, 1, 0, 3, 7, 1, $C2                                              ; $13F998.F99B
    .db $FF                                                                     ; $13F99C

; battle_monster_dissolve_data ($13:F99D)
;
; A series of words used to determine the pattern of lines that are dissolved
; during a monster's death animation.
;
; TODO: The code seen so far actually only uses the first bit of the second byte
;       of each of these words. Are the other bits used by something else, or
;       was it simply a mistake in that code?
battle_monster_dissolve_data:
    .dw $0101                                                                   ; $13F99D.F99E | $00
    .dw $0202                                                                   ; $13F99F.F9A0 | $01
    .dw $0404                                                                   ; $13F9A1.F9A2 | $02
    .dw $0808                                                                   ; $13F9A3.F9A4 | $03
    .dw $1010                                                                   ; $13F9A5.F9A6 | $04
    .dw $2120                                                                   ; $13F9A7.F9A8 | $05
    .dw $4240                                                                   ; $13F9A9.F9AA | $06
    .dw $8480                                                                   ; $13F9AB.F9AC | $07
    .dw $0801                                                                   ; $13F9AD.F9AE | $08
    .dw $1002                                                                   ; $13F9AF.F9B0 | $09
    .dw $2104                                                                   ; $13F9B1.F9B2 | $0A
    .dw $4208                                                                   ; $13F9B3.F9B4 | $0B
    .dw $8410                                                                   ; $13F9B5.F9B6 | $0C
    .dw $0821                                                                   ; $13F9B7.F9B8 | $0D
    .dw $1142                                                                   ; $13F9B9.F9BA | $0E
    .dw $2284                                                                   ; $13F9BB.F9BC | $0F
    .dw $4408                                                                   ; $13F9BD.F9BE | $10
    .dw $8910                                                                   ; $13F9BF.F9C0 | $11
    .dw $1221                                                                   ; $13F9C1.F9C2 | $12
    .dw $2542                                                                   ; $13F9C3.F9C4 | $13
    .dw $4A84                                                                   ; $13F9C5.F9C6 | $14
    .dw $9508                                                                   ; $13F9C7.F9C8 | $15
    .dw $2B11                                                                   ; $13F9C9.F9CA | $16
    .dw $5622                                                                   ; $13F9CB.F9CC | $17
    .dw $AD44                                                                   ; $13F9CD.F9CE | $18
    .dw $5B89                                                                   ; $13F9CF.F9D0 | $19
    .dw $B712                                                                   ; $13F9D1.F9D2 | $1A
    .dw $6F25                                                                   ; $13F9D3.F9D4 | $1B
    .dw $DE4A                                                                   ; $13F9D5.F9D6 | $1C
    .dw $BD95                                                                   ; $13F9D7.F9D8 | $1D
    .dw $7B2B                                                                   ; $13F9D9.F9DA | $1E
    .dw $F756                                                                   ; $13F9DB.F9DC | $1F
    .dw $EFAD                                                                   ; $13F9DD.F9DE | $20
    .dw $DF5B                                                                   ; $13F9DF.F9E0 | $21
    .dw $BEB7                                                                   ; $13F9E1.F9E2 | $22
    .dw $7D6F                                                                   ; $13F9E3.F9E4 | $23
    .dw $FBDE                                                                   ; $13F9E5.F9E6 | $24
    .dw $F7BD                                                                   ; $13F9E7.F9E8 | $25
    .dw $EF7B                                                                   ; $13F9E9.F9EA | $26
    .dw $DFF7                                                                   ; $13F9EB.F9EC | $27
    .dw $BFEF                                                                   ; $13F9ED.F9EE | $28
    .dw $7FDF                                                                   ; $13F9EF.F9F0 | $29
    .dw $FFBE                                                                   ; $13F9F1.F9F2 | $2A
    .dw $FE7D                                                                   ; $13F9F3.F9F4 | $2B
    .dw $FDFB                                                                   ; $13F9F5.F9F6 | $2C
    .dw $FBF7                                                                   ; $13F9F7.F9F8 | $2D
    .dw $F7EF                                                                   ; $13F9F9.F9FA | $2E
    .dw $EFDF                                                                   ; $13F9FB.F9FC | $2F
    .dw $DFBF                                                                   ; $13F9FD.F9FE | $30
    .dw $BF7F                                                                   ; $13F9FF.FA00 | $31
    .dw $7FFF                                                                   ; $13FA01.FA02 | $32
    .dw $FFFE                                                                   ; $13FA03.FA04 | $33
    .dw $FFFD                                                                   ; $13FA05.FA06 | $34
    .dw $FFFB                                                                   ; $13FA07.FA08 | $35
    .dw $FFF7                                                                   ; $13FA09.FA0A | $36
    .dw $FFEF                                                                   ; $13FA0B.FA0C | $37
    .dw $FFDF                                                                   ; $13FA0D.FA0E | $38
    .dw $FFBF                                                                   ; $13FA0F.FA10 | $39
    .dw $FF7F                                                                   ; $13FA11.FA12 | $3A
    .dw $FFFF                                                                   ; $13FA13.FA14 | $3B
    .dw $FFFF                                                                   ; $13FA15.FA16 | $3C
    .dw $FFFF                                                                   ; $13FA17.FA18 | $3D
    .dw $FFFF                                                                   ; $13FA19.FA1A | $3E
    .dw $FFFF                                                                   ; $13FA1B.FA1C | $3F

UNUSED_13FA1D:
    .dsb 60 $FF                                                                 ; $13FA1D.FA58

; battle_call_sprite_position_data ($13:FA59)
;
; For each Call spell, provides the X coordinate, the Y coordinate, the width
; and the height of the sprite.
battle_call_sprite_position_data:
    .db 200, 68, 2, 2                                                           ; $13FA59.FA5C | $00: Imp
    .db 200, 68, 2, 2                                                           ; $13FA5D.FA60 | $01: Bomb
    .db 192, 68, 3, 2                                                           ; $13FA61.FA64 | $02: Dummy
    .db 192, 60, 3, 3                                                           ; $13FA65.FA68 | $03: Mage
    .db 200, 68, 2, 2                                                           ; $13FA69.FA6C | $04: Chocobo
    .db 192, 60, 3, 3                                                           ; $13FA6D.FA70 | $05: Shiva
    .db 192, 60, 3, 3                                                           ; $13FA71.FA74 | $06: Indra
    .db 184, 60, 4, 3                                                           ; $13FA75.FA78 | $07: Jinn
    .db 192, 48, 3, 4                                                           ; $13FA79.FA7C | $08: Titan
    .db 176, 60, 5, 4                                                           ; $13FA7D.FA80 | $09: Mist
    .db 208, 42, 1, 5                                                           ; $13FA81.FA84 | $0A: Sylph
    .db 184, 44, 4, 5                                                           ; $13FA85.FA88 | $0B: Odin
    .db 184, 44, 3, 5                                                           ; $13FA89.FA8C | $0C: Leviatan
    .db 184, 44, 4, 5                                                           ; $13FA8D.FA90 | $0D: Asura
    .db 184, 44, 4, 5                                                           ; $13FA91.FA94 | $0E: Asura
    .db 184, 44, 4, 5                                                           ; $13FA95.FA98 | $0F: Asura
    .db 168, 48, 5, 4                                                           ; $13FA99.FA9C | $10: Bahamut

; battle_call_sprite_frame_data ($13:FA9D)
;
; For each Call spell, determines the four frames available for use by that
; spell's animatiion.
battle_call_sprite_frame_data:
    .db $00, $00, $00, $00                                                      ; $13FA9D.FAA0 | $00: Imp
    .db $01, $01, $01, $01                                                      ; $13FAA1.FAA4 | $01: Bomb
    .db $02, $02, $02, $02                                                      ; $13FAA5.FAA8 | $02: Dummy (Cocktric)
    .db $03, $03, $03, $03                                                      ; $13FAA9.FAAC | $03: Mage
    .db $04, $05, $04, $05                                                      ; $13FAAD.FAB0 | $04: Chocobo
    .db $06, $07, $06, $07                                                      ; $13FAB1.FAB4 | $05: Shiva
    .db $08, $09, $08, $09                                                      ; $13FAB5.FAB8 | $06: Indra
    .db $0A, $0B, $0A, $0B                                                      ; $13FAB9.FABC | $07: Jinn
    .db $0C, $0D, $0C, $0D                                                      ; $13FABD.FAC0 | $08: Titan
    .db $0E, $0F, $0E, $0F                                                      ; $13FAC1.FAC4 | $09: Mist
    .db $10, $11, $12, $12                                                      ; $13FAC5.FAC8 | $0A: Sylph
    .db $13, $14, $15, $15                                                      ; $13FAC9.FACC | $0B: Odin
    .db $16, $17, $16, $17                                                      ; $13FACD.FAD0 | $0C: Leviatan
    .db $18, $19, $1A, $18                                                      ; $13FAD1.FAD4 | $0D: Asura
    .db $19, $1A, $18, $19                                                      ; $13FAD5.FAD8 | $0E: Asura
    .db $1A, $18, $19, $1A                                                      ; $13FAD9.FADC | $0F: Asura
    .db $1B, $1C, $1B, $1C                                                      ; $13FADD.FAE0 | $10: Bahamut

; battle_status_icon_oam_data ($13:FAE1)
;
; Base OAM data needed to draw the battle status icons. This includes tile
; offsets and flags, but the coordinates are offsets from the true target
; coordinates provided by the user of the data. Each status icon has two frames,
; each consisting of two tiles.
battle_status_icon_oam_data:
    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAE1.FAE4 | $00: No Status Icon, Frame 1
    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAE5.FAE8

    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAE9.FAEC | $01: No Status Icon, Frame 2
    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAED.FAF0

    OAM  8,  -8, 0, 0, 3, 6, 1, $60                                             ; $13FAF1.FAF4 | $02: Mute, Frame 1
    OAM 16,  -8, 0, 0, 3, 6, 1, $61                                             ; $13FAF5.FAF8

    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAF9.FAFC | $03: Mute, Frame 2
    OAM  0,   0, 0, 0, 0, 0, 1, $FF                                             ; $13FAFD.FB00

    OAM 16,   0, 0, 0, 3, 6, 1, $62                                             ; $13FB01.FB04 | $04: Darkness, Frame 1
    OAM 24,   0, 0, 0, 3, 6, 1, $63                                             ; $13FB05.FB08

    OAM 16,   0, 0, 0, 3, 6, 1, $64                                             ; $13FB09.FB0C | $05: Darkness, Frame 2
    OAM 24,   0, 0, 0, 3, 6, 1, $65                                             ; $13FB0D.FB10

    OAM 16,  -8, 0, 0, 3, 6, 1, $6C                                             ; $13FB11.FB14 | $06: HP Critical, Frame 1
    OAM 24,  -8, 0, 1, 3, 6, 1, $6C                                             ; $13FB15.FB18

    OAM 16,  -8, 0, 0, 3, 6, 1, $6D                                             ; $13FB19.FB1C | $07: HP Critical, Frame 2
    OAM 24,  -8, 0, 1, 3, 6, 1, $6D                                             ; $13FB1D.FB20

    OAM  8,   0, 0, 0, 3, 6, 1, $66                                             ; $13FB21.FB24 | $08: Paralyze, Frame 1
    OAM  8,   8, 0, 0, 3, 6, 1, $67                                             ; $13FB25.FB28

    OAM 32,   0, 0, 1, 3, 6, 1, $66                                             ; $13FB29.FB2C | $09: Paralyze, Frame 2
    OAM 32,   8, 0, 1, 3, 6, 1, $67                                             ; $13FB2D.FB30

    OAM 16,   8, 0, 0, 3, 6, 1, $68                                             ; $13FB31.FB34 | $0A: Sleep, Frame 1
    OAM 16,   8, 0, 0, 3, 6, 1, $68                                             ; $13FB35.FB38

    OAM 16,   8, 0, 0, 3, 6, 1, $69                                             ; $13FB39.FB3C | $0B: Sleep, Frame 2
    OAM 16,   8, 0, 0, 3, 6, 1, $69                                             ; $13FB3D.FB40

    OAM 16,  16, 0, 0, 3, 6, 1, $7C                                             ; $13FB41.FB44 | $0C: Float, Frame 1
    OAM 24,  16, 0, 1, 3, 6, 1, $7C                                             ; $13FB45.FB48

    OAM 16,  16, 0, 0, 3, 6, 1, $7C                                             ; $13FB49.FB4C | $0D: Float, Frame 2
    OAM 24,  16, 0, 1, 3, 6, 1, $7C                                             ; $13FB4D.FB50

    OAM 16, -16, 0, 0, 3, 6, 1, $6A                                             ; $13FB51.FB54 | $0E: Charm, Frame 1
    OAM 24, -16, 0, 0, 3, 6, 1, $6B                                             ; $13FB55.FB58

    OAM 16, -16, 1, 1, 3, 6, 1, $6B                                             ; $13FB59.FB5C | $0F: Charm, Frame 2
    OAM 24, -16, 1, 1, 3, 6, 1, $6A                                             ; $13FB5D.FB60

    OAM 24,  -8, 0, 0, 3, 6, 1, $6E                                             ; $13FB61.FB64 | $10: Curse, Frame 1
    OAM 32,  -8, 0, 0, 3, 6, 1, $6F                                             ; $13FB65.FB68

    OAM 24,  -8, 0, 1, 3, 6, 1, $6F                                             ; $13FB69.FB6C | $11: Curse, Frame 1
    OAM 32,  -8, 0, 1, 3, 6, 1, $6E                                             ; $13FB6D.FB70

    OAM 16,  -8, 0, 0, 3, 6, 1, $00                                             ; $13FB71.FB74 | $12: Count, Frame 1
    OAM 24,  -8, 0, 0, 3, 6, 1, $00                                             ; $13FB75.FB78

    OAM 16,  -8, 0, 0, 3, 6, 1, $00                                             ; $13FB79.FB7C | $13: Count, Frame 2
    OAM 24,  -8, 0, 0, 3, 6, 1, $00                                             ; $13FB7D.FB80

; battle_pose_frame_data ($13:FB81)
;
; For each character sprite pose, details the four frames to use in constructing
; the animation for that pose.
battle_pose_frame_data:
    .db $1E, $1E, $1E, $1E                                                      ; $13FB81.FB84 | $00: Invisible
    .db $00, $00, $00, $00                                                      ; $13FB85.FB88 | $01: Normal
    .db $01, $01, $01, $01                                                      ; $13FB89.FB8C | $02: Parrying
    .db $00, $02, $00, $02                                                      ; $13FB8D.FB90 | $03: Walking
    .db $03, $03, $03, $03                                                      ; $13FB91.FB94 | $04: Crouching
    .db $04, $04, $02, $02                                                      ; $13FB95.FB98 | $05: Swinging Right Arm
    .db $06, $06, $05, $05                                                      ; $13FB99.FB9C | $06: Swinging Left Arm
    .db $07, $07, $07, $07                                                      ; $13FB9D.FBA0 | $07: Reeling
    .db $00, $08, $00, $08                                                      ; $13FBA1.FBA4 | $08: Cheering
    .db $09, $09, $09, $09                                                      ; $13FBA5.FBA8 | $09: Swoon
    .db $0A, $0B, $0A, $0B                                                      ; $13FBA9.FBAC | $0A: Casting (animated)
    .db $0A, $0A, $0A, $0A                                                      ; $13FBAD.FBB0 | $0B: Casting
    .db $08, $08, $08, $08                                                      ; $13FBB1.FBB4 | $0C: Raised Left Arm
    .db $04, $04, $04, $04                                                      ; $13FBB5.FBB8 | $0D: Raised Right Arm
    .db $24, $24, $24, $24                                                      ; $13FBB9.FBBC | $0E: Special
    .db $24, $24, $24, $24                                                      ; $13FBBD.FBC0 | $0F: Special (copy)
    .db $00, $00, $00, $00                                                      ; $13FBC1.FBC4 | $10: (Small Invisible)
    .db $0C, $0C, $0C, $0C                                                      ; $13FBC5.FBC8 | $11: Small Normal
    .db $0D, $0D, $0D, $0D                                                      ; $13FBC9.FBCC | $12: Small Parrying
    .db $0E, $0C, $0E, $0C                                                      ; $13FBCD.FBD0 | $13: Small Walking
    .db $0F, $0F, $0F, $0F                                                      ; $13FBD1.FBD4 | $14: Small Crouching
    .db $10, $10, $0E, $0E                                                      ; $13FBD5.FBD8 | $15: Small Swinging Arm
    .db $10, $10, $0E, $0E                                                      ; $13FBD9.FBDC | $16: Small Swinging Arm
    .db $11, $11, $11, $11                                                      ; $13FBDD.FBE0 | $17: Small Reeling
    .db $0C, $12, $0C, $12                                                      ; $13FBE1.FBE4 | $18: Small Cheering
    .db $13, $13, $13, $13                                                      ; $13FBE5.FBE8 | $19: Small Swoon
    .db $14, $15, $14, $15                                                      ; $13FBE9.FBEC | $1A: Small Casting (animated)
    .db $14, $14, $14, $14                                                      ; $13FBED.FBF0 | $1B: Small Casting
    .db $0C, $0C, $0C, $0C                                                      ; $13FBF1.FBF4 | $1C: Small Raised Left Arm (same as normal)
    .db $10, $10, $10, $10                                                      ; $13FBF5.FBF8 | $1D: Small Raised Right Arm
    .db $0C, $0C, $0C, $0C                                                      ; $13FBF9.FBFC | $1E: Small Special (same as normal)
    .db $0C, $0C, $0C, $0C                                                      ; $13FBFD.FC00 | $1F: Small Special (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC01.FC04 | $20: (Toad Invisible)
    .db $16, $16, $16, $16                                                      ; $13FC05.FC08 | $21: Toad Normal
    .db $17, $17, $17, $17                                                      ; $13FC09.FC0C | $22: Toad Parrying
    .db $16, $18, $16, $18                                                      ; $13FC0D.FC10 | $23: Toad Walking
    .db $19, $19, $19, $19                                                      ; $13FC11.FC14 | $24: Toad Crouching
    .db $1A, $1A, $18, $18                                                      ; $13FC15.FC18 | $25: Toad Swinging Right Arm
    .db $1A, $1A, $18, $18                                                      ; $13FC19.FC1C | $26: Toad Swinging Left Arm
    .db $1B, $1B, $1B, $1B                                                      ; $13FC1D.FC20 | $27: Toad Reeling
    .db $16, $1C, $16, $1C                                                      ; $13FC21.FC24 | $28: Toad Cheering
    .db $1D, $1D, $1D, $1D                                                      ; $13FC25.FC28 | $29: Toad Swoon
    .db $16, $16, $16, $16                                                      ; $13FC29.FC2C | $2A: Toad Casting (same as normal)
    .db $16, $16, $16, $16                                                      ; $13FC2D.FC30 | $2B: Toad Casting (same as normal)
    .db $16, $16, $16, $16                                                      ; $13FC31.FC34 | $2C: Toad Raised Left Arm (same as normal)
    .db $1A, $1A, $1A, $1A                                                      ; $13FC35.FC38 | $2D: Toad Raised Right Arm
    .db $16, $16, $16, $16                                                      ; $13FC39.FC3C | $2E: Toad Special (same as normal)
    .db $16, $16, $16, $16                                                      ; $13FC3D.FC40 | $2F: Toad Special (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC41.FC44 | $30: (Golbez Invisible)
    .db $00, $00, $00, $00                                                      ; $13FC45.FC48 | $31: Golbez Normal
    .db $00, $00, $00, $00                                                      ; $13FC49.FC4C | $32: Golbez Parrying (same as normal)
    .db $00, $1F, $00, $1F                                                      ; $13FC4D.FC50 | $33: Golbez Walking
    .db $00, $00, $00, $00                                                      ; $13FC51.FC54 | $34: Golbez Crouching (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC55.FC58 | $35: Golbez Swinging Right Arm (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC59.FC5C | $36: Golbez Swinging Left Arm (same as normal)
    .db $1F, $1F, $1F, $1F                                                      ; $13FC5D.FC60 | $37: Golbez Reeling
    .db $00, $22, $00, $22                                                      ; $13FC61.FC64 | $38: Golbez Cheering
    .db $23, $23, $23, $23                                                      ; $13FC65.FC68 | $39: Golbez Swoon
    .db $20, $21, $20, $21                                                      ; $13FC69.FC6C | $3A: Golbez Casting (animated)
    .db $20, $20, $20, $20                                                      ; $13FC6D.FC70 | $3B: Golbez Casting
    .db $22, $22, $22, $22                                                      ; $13FC71.FC74 | $3C: Golbez Raised Left Arm
    .db $00, $00, $00, $00                                                      ; $13FC75.FC78 | $3D: Golbez Raised Right Arm (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC79.FC7C | $3E: Golbez Special (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC7D.FC80 | $3F: Golbez Special (same as normal)
    .db $00, $00, $00, $00                                                      ; $13FC81.FC84 | $40: (Pig Invisible)
    .db $00, $00, $00, $00                                                      ; $13FC85.FC88 | $41: Pig Normal
    .db $01, $01, $01, $01                                                      ; $13FC89.FC8C | $42: Pig Parrying
    .db $00, $02, $00, $02                                                      ; $13FC8D.FC90 | $43: Pig Walking
    .db $03, $03, $03, $03                                                      ; $13FC91.FC94 | $44: Pig Crouching
    .db $04, $04, $02, $02                                                      ; $13FC95.FC98 | $45: Pig Swinging Right Arm
    .db $06, $06, $05, $05                                                      ; $13FC99.FC9C | $46: Pig Swinging Left Arm
    .db $07, $07, $07, $07                                                      ; $13FC9D.FCA0 | $47: Pig Reeling
    .db $00, $08, $00, $08                                                      ; $13FCA1.FCA4 | $48: Pig Cheering
    .db $09, $09, $09, $09                                                      ; $13FCA5.FCA8 | $49: Pig Swoon
    .db $01, $01, $01, $01                                                      ; $13FCA9.FCAC | $4A: Pig Casting (same as normal)
    .db $00, $08, $00, $08                                                      ; $13FCAD.FCB0 | $4B: Pig Casting (pumping right fist)
    .db $08, $08, $08, $08                                                      ; $13FCB1.FCB4 | $4C: Pig Raised Right Arm
    .db $04, $04, $04, $04                                                      ; $13FCB5.FCB8 | $4D: Pig Raised Right ARm
    .db $08, $08, $08, $08                                                      ; $13FCB9.FCBC | $4E: Pig Special
    .db $08, $08, $08, $08                                                      ; $13FCBD.FCC0 | $4F: Pig Special
    .db $08, $08, $08, $08                                                      ; $13FCC1.FCC4 | $50: <unused>

; monster_shake_scroll_data ($13:FCC5)
;
; Scroll offsets to animate a monster shaking.
monster_shake_scroll_data:
    .dw -2                                                                      ; $13FCC5.FCC6
    .dw -1                                                                      ; $13FCC7.FCC8
    .dw -2                                                                      ; $13FCC9.FCCA
    .dw -3                                                                      ; $13FCCB.FCCC
    .dw -1                                                                      ; $13FCCD.FCCE
    .dw  0                                                                      ; $13FCCF.FCD0
    .dw -2                                                                      ; $13FCD1.FCD2
    .dw -3                                                                      ; $13FCD3.FCD4

UNUSED_13FCD5:
    .dsb $002B $FF                                                              ; $13FCD5.FCFF

; battle_formations_without_spoils_data ($13:FD00)
;
; This array lists the formation numbers that do not give spoils at the end of
; the battle.
battle_formations_without_spoils_data:
    .dw BATTLE_FORMATION_FLOATEYE_INTRO                                         ; $13FD00.FD01
    .dw BATTLE_FORMATION_RAVEN_INTRO                                            ; $13FD02.FD03
    .dw BATTLE_FORMATION_IMP_CAP_YANG                                           ; $13FD04.FD05
    .dw BATTLE_FORMATION_D_KNIGHT                                               ; $13FD06.FD07
    .dw BATTLE_FORMATION_GUARDS                                                 ; $13FD08.FD09
    .dw BATTLE_FORMATION_LUGAE1                                                 ; $13FD0A.FD0B
    .dw BATTLE_FORMATION_EBLAN                                                  ; $13FD0C.FD0D
    .dw BATTLE_FORMATION_GOLBEZ_TELLAH                                          ; $13FD0E.FD0F
    .dw BATTLE_FORMATION_ZEMUS                                                  ; $13FD10.FD11
    .dw BATTLE_FORMATION_ZEROMUS_INITIAL                                        ; $13FD12.FD13
    .dw BATTLE_FORMATION_ZEROMUS_FINAL                                          ; $13FD14.FD15
    .dw BATTLE_FORMATION_DUMMY_2                                                ; $13FD16.FD17
    .db $FF                                                                     ; $13FD18

; battle_command_status_restriction_data ($13:FD19)
;
; For each battle command, contains the two masks for the first two status bytes
; defining statuses that preclude the use of that command.
battle_command_status_restriction_data:
    .db 0, 0                                                                    ; $13FD19.FD1A | $00: Fight
    .db 0, 0                                                                    ; $13FD1B.FD1C | $01: Item
    .db STATUS_1_TOAD | STATUS_1_PIG | STATUS_1_MUTE, 0                         ; $13FD1D.FD1E | $02: White
    .db STATUS_1_MUTE, 0                                                        ; $13FD1F.FD20 | $03: Black
    .db STATUS_1_TOAD | STATUS_1_PIG | STATUS_1_MUTE, 0                         ; $13FD21.FD22 | $04: Call
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD23.FD24 | $05: Dark Wave
    .db STATUS_1_TOAD | STATUS_1_SMALL, 0                                       ; $13FD25.FD26 | $06: Jump
    .db STATUS_1_TOAD | STATUS_1_PIG | STATUS_1_MUTE, 0                         ; $13FD27.FD28 | $07: Recall
    .db STATUS_1_MUTE, 0                                                        ; $13FD29.FD2A | $08: Sing
    .db 0, 0                                                                    ; $13FD2B.FD2C | $09: Hide
    .db 0, 0                                                                    ; $13FD2D.FD2E | $0A: Heal
    .db 0, 0                                                                    ; $13FD2F.FD30 | $0B: Pray
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD31.FD32 | $0C: Aim
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG | STATUS_1_POISON, 0      ; $13FD33.FD34 | $0D: Build Up
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, STATUS_2_FLOAT           ; $13FD35.FD36 | $0E: Kick
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD37.FD38 | $0F: Endure
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG | STATUS_1_MUTE, 0        ; $13FD39.FD3A | $10: Twin
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD3B.FD3C | $11: Bluff
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD3D.FD3E | $12: Cry
    .db STATUS_1_TOAD | STATUS_1_SMALL, 0                                       ; $13FD3F.FD40 | $13: Cover
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD41.FD42 | $14: Peep
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD43.FD44 | $15: <unknown>
    .db STATUS_1_TOAD | STATUS_1_SMALL, 0                                       ; $13FD45.FD46 | $16: Dart
    .db STATUS_1_TOAD, 0                                                        ; $13FD47.FD48 | $17: Sneak
    .db STATUS_1_TOAD | STATUS_1_PIG | STATUS_1_MUTE, 0                         ; $13FD49.FD4A | $18: Ninja
    .db STATUS_1_TOAD | STATUS_1_SMALL | STATUS_1_PIG, 0                        ; $13FD4B.FD4C | $19: Bless
    .db 0, 0                                                                    ; $13FD4D.FD4E | $1A: Change
    .db 0, 0                                                                    ; $13FD4F.FD50 | $1B: Parry
    .db 0, 0                                                                    ; $13FD51.FD52 | $1C: Show
    .db 0, 0                                                                    ; $13FD53.FD54 | $1D: Off


; character_battle_commands_data ($13:FD55)
;
; For each character, lists the battle commands the character has available.
; Note that these are associated with a particular character, and not a
; character of a given class.
character_battle_commands_data:
.if FF4_REGION == "JAPAN"
    .db $00, $05, $01, $FF, $FF                                                 ; $13FD55.FD59 | $00: Cecil (dark knight)
.else
    .db $00, $01, $FF, $FF, $FF                                                 ; $13FD55.FD59 | $00: Cecil (dark knight)
.endif
    .db $00, $06, $01, $FF, $FF                                                 ; $13FD5A.FD5E | $01: Kain (until Mist)
    .db $00, $02, $03, $04, $01                                                 ; $13FD5F.FD63 | $02: Rydia (child)
.if FF4_EASYTYPE != 1
    .db $00, $02, $03, $07, $01                                                 ; $13FD64.FD68 | $03: Tellah (until Damcyan)
    .db $00, $08, $0A, $09, $01                                                 ; $13FD69.FD6D | $04: Edward (until Leviatan)
    .db $00, $02, $0B, $0C, $01                                                 ; $13FD6E.FD72 | $05: Rosa (until Fabul)
    .db $00, $0D, $0E, $0F, $01                                                 ; $13FD73.FD77 | $06: Yang (until Leviatan)
    .db $00, $03, $10, $11, $01                                                 ; $13FD78.FD7C | $07: Palom
    .db $00, $02, $10, $12, $01                                                 ; $13FD7D.FD81 | $08: Porom
    .db $00, $02, $03, $07, $01                                                 ; $13FD82.FD86 | $09: Tellah (until Cecil becomes a Paladin)
.else
    .db $00, $02, $03, $01, $FF                                                 ; $13FD64.FD68 | $03: Tellah (until Damcyan)
    .db $00, $08, $09, $01, $FF                                                 ; $13FD69.FD6D | $04: Edward (until Leviatan)
    .db $00, $02, $0C, $01, $FF                                                 ; $13FD6E.FD72 | $05: Rosa (until Fabul)
    .db $00, $0E, $01, $FF, $FF                                                 ; $13FD73.FD77 | $06: Yang (until Leviatan)
    .db $00, $03, $10, $01, $FF                                                 ; $13FD78.FD7C | $07: Palom
    .db $00, $02, $10, $01, $FF                                                 ; $13FD7D.FD81 | $08: Porom
    .db $00, $02, $03, $01, $FF                                                 ; $13FD82.FD86 | $09: Tellah (until Cecil becomes a Paladin)
.endif
    .db $00, $02, $13, $01, $FF                                                 ; $13FD87.FD8B | $0A: Cecil (paladin)
    .db $00, $02, $03, $01, $FF                                                 ; $13FD8C.FD90 | $0B: Tellah (until Tower of Zot cutscene)
.if FF4_EASYTYPE != 1
    .db $00, $0D, $0E, $0F, $01                                                 ; $13FD91.FD95 | $0C: Yang (until Super Cannon)
.else
    .db $00, $0E, $01, $FF, $FF                                                 ; $13FD91.FD95 | $0C: Yang (until Super Cannon)
.endif
    .db $00, $14, $01, $FF, $FF                                                 ; $13FD96.FD9A | $0D: Cid
    .db $00, $06, $01, $FF, $FF                                                 ; $13FD9B.FD9F | $0E: Kain (until Sealed Cave)
.if FF4_EASYTYPE != 1
    .db $00, $02, $0B, $0C, $01                                                 ; $13FDA0.FDA4 | $0F: Rosa (final)
.else
    .db $00, $02, $0C, $01, $FF                                                 ; $13FDA0.FDA4 | $0F: Rosa (final)
.endif
    .db $00, $03, $04, $01, $FF                                                 ; $13FDA5.FDA9 | $10: Rydia (adult)
.if FF4_EASYTYPE != 1
    .db $00, $18, $16, $17, $01                                                 ; $13FDAA.FDAE | $11: Edge
    .db $00, $02, $03, $19, $01                                                 ; $13FDAF.FDB3 | $12: FuSoYa
.else
    .db $00, $16, $17, $18, $01                                                 ; $13FDAA.FDAE | $11: Edge
    .db $00, $02, $03, $01, $FF                                                 ; $13FDAF.FDB3 | $12: FuSoYa
.endif
    .db $00, $06, $01, $FF, $FF                                                 ; $13FDB4.FDB8 | $13: Kain (final)
    .db $00, $FF, $FF, $FF, $FF                                                 ; $13FDB9.FDBD | $14: Golbez
    .db $00, $FF, $FF, $FF, $FF                                                 ; $13FDBE.FDC2 | $15: Anna

; battle_command_flags_data ($13:FDC3)
;
; For each of the first 25 battle commands, provides a byte that describes the
; default flags for that command (targeting plus one TODO bit).
battle_command_flags_data:
    .db $50                                                                     ; $13FDC3 | $00
    .db $00                                                                     ; $13FDC4 | $01
    .db $00                                                                     ; $13FDC5 | $02
    .db $00                                                                     ; $13FDC6 | $03
    .db $00                                                                     ; $13FDC7 | $04
    .db $60                                                                     ; $13FDC8 | $05
    .db $58                                                                     ; $13FDC9 | $06
    .db $60                                                                     ; $13FDCA | $07
    .db $50                                                                     ; $13FDCB | $08
    .db $00                                                                     ; $13FDCC | $09
    .db $20                                                                     ; $13FDCD | $0A
    .db $20                                                                     ; $13FDCE | $0B
    .db $50                                                                     ; $13FDCF | $0C
    .db $50                                                                     ; $13FDD0 | $0D
    .db $60                                                                     ; $13FDD1 | $0E
    .db $00                                                                     ; $13FDD2 | $0F
    .db $60                                                                     ; $13FDD3 | $10
    .db $00                                                                     ; $13FDD4 | $11
    .db $60                                                                     ; $13FDD5 | $12
    .db $18                                                                     ; $13FDD6 | $13
    .db $58                                                                     ; $13FDD7 | $14
    .db $60                                                                     ; $13FDD8 | $15
    .db $50                                                                     ; $13FDD9 | $16
    .db $50                                                                     ; $13FDDA | $17
    .db $00                                                                     ; $13FDDB | $18
    .db $28                                                                     ; $13FDDC | $19

; class_spell_list_data ($14:FFA2)
;
; For each character class, determines the three spell lists available to that
; class. This particular copy of the array is used in battle. Another copy, at
; $14:FFA2 is used for menu code.
class_spell_list_data:
    .db $FF, $FF, $FF                                                           ; $13FDDD.FDDF | $00: DKnight
    .db $FF, $FF, $FF                                                           ; $13FDE0.FDE2 | $01: Dragoon
    .db $02, $03, $04                                                           ; $13FDE3.FDE5 | $02: Caller (child)
    .db $05, $06, $FF                                                           ; $13FDE6.FDE8 | $03: Sage
    .db $FF, $FF, $FF                                                           ; $13FDE9.FDEB | $04: Bard
    .db $07, $FF, $FF                                                           ; $13FDEC.FDEE | $05: Wh.Wiz (Rosa)
    .db $FF, $FF, $FF                                                           ; $13FDEF.FDF1 | $06: Karate
    .db $FF, $08, $FF                                                           ; $13FDF2.FDF4 | $07: Bl.Wiz
    .db $09, $FF, $FF                                                           ; $13FDF5.FDF7 | $08: Wh.Wiz (Porom)
    .db $00, $FF, $FF                                                           ; $13FDF8.FDFA | $09: Paladin
    .db $FF, $FF, $FF                                                           ; $13FDFB.FDFD | $0A: Chief
    .db $FF, $03, $04                                                           ; $13FDFE.FE00 | $0B: Caller (adult)
    .db $FF, $0C, $FF                                                           ; $13FE01.FE03 | $0C: Ninja
    .db $0A, $0B, $FF                                                           ; $13FE04.FE06 | $0D: Lunar
    .db $0A, $0B, $FF                                                           ; $13FE07.FE09 | $0E: <garbage>
    .db $FF, $FF, $FF                                                           ; $13FE0A.FE0C | $0F: <garbage> (Golbez)

; auto_battle_formation_data ($13:FE0D)
;
; Explicitly lists the formation numbers for battles that are auto-battles.
auto_battle_formation_data:
    .dw BATTLE_FORMATION_FLOATEYE_INTRO                                         ; $13FE0D.FE0E | $00
    .dw BATTLE_FORMATION_RAVEN_INTRO                                            ; $13FE0F.FE10 | $02
    .dw BATTLE_FORMATION_BARD                                                   ; $13FE11.FE12 | $04
    .dw BATTLE_FORMATION_IMP_CAP_YANG                                           ; $13FE13.FE14 | $06
    .dw BATTLE_FORMATION_GOLBEZ_TELLAH                                          ; $13FE15.FE16 | $08
    .dw BATTLE_FORMATION_RUBICANT_EDGE                                          ; $13FE17.FE18 | $0A
    .dw BATTLE_FORMATION_ZEMUS                                                  ; $13FE19.FE1A | $0C
    .dw BATTLE_FORMATION_ZEROMUS_INITIAL                                        ; $13FE1B.FE1C | $0E

; auto_battle_pointer_data ($13:FE1D)
;
; For each battle, contains a pointer to the data for that auto-battle. All data
; is in bank $13.
auto_battle_pointer_data:
    .addr auto_battle_floateye_intro_data                                       ; $13FE1D.FE1E
    .addr auto_battle_raven_intro_data                                          ; $13FE1F.FE20
    .addr auto_battle_bard_data                                                 ; $13FE21.FE22
    .addr auto_battle_imp_cap_yang_data                                         ; $13FE23.FE24
    .addr auto_battle_golbez_tellah_data                                        ; $13FE25.FE26
    .addr auto_battle_rubicant_edge_data                                        ; $13FE27.FE28
    .addr auto_battle_zemus_data                                                ; $13FE29.FE2A
    .addr auto_battle_zeromus_initial_data                                      ; $13FE2B.FE2C

; auto_battle_floateye_intro_data ($13:FE2D)
;
; Auto-battle data for the FloatEye battle in the introduction.
auto_battle_floateye_intro_data:
    .db $01, $C0, $FF                                                           ; $13FE2D.FE2F

; auto_battle_raven_intro_data ($13:FE30)
;
; Auto-battle data for the Raven battle in the introduction.
auto_battle_raven_intro_data:
    .db $01, $C2, $FF                                                           ; $13FE30.FE32

; auto_battle_bard_data ($13:FE33)
;
; Auto-battle data for the battle against the Bard.
auto_battle_bard_data:
    .db $C0, $00, $FF                                                           ; $13FE33.FE35

; auto_battle_imp_cap_yang_data ($13:FE36)
;
; Auto-battle data for Yang's battle against the three Imp Cap. on Mt.Hobs.
auto_battle_imp_cap_yang_data:
    .db $CE, $00, $C0, $00, $FF                                                 ; $13FE36.FE3A

; auto_battle_golbez_tellah_data ($13:FE3B)
;
; Auto-battle data for the battle Tellah fights against Golbez.
auto_battle_golbez_tellah_data:
    .db $00, $26, $00, $1F, $00, $25, $00, $22, $00, $2F, $FF                   ; $13FE3B.FE45

; auto_battle_rubicant_edge_data ($13:FE46)
;
; Auto-battle data for the battle Edge fights against Rubicant.
auto_battle_rubicant_edge_data:
    .db $C0, $00, $00, $42, $FF                                                 ; $13FE46.FE4A

; auto_battle_zemus_data ($13:FE4B)
;
; Auto-battle data for the Zemus battle. This battle has two separate sets of
; data, presumably one for each character in the battle.
auto_battle_zemus_data:
    .db $00, $07, $00, $01, $00, $0B, $00, $0B, $FF                             ; $13FE4B.FE53
    .db $00, $1F, $00, $22, $00, $25, $D0, $00, $FF                             ; $13FE54.FE5C

; auto_battle_zeromus_initial_data ($13:FE54)
;
; Auto-battle data for the first Zeromus battle. This batttle has two separate
; sets of data, presumably one for each of the two characters in the battle.
auto_battle_zeromus_initial_data:
    .db $00, $2F, $00, $0C, $FF                                                 ; $13FE5D.FE61
    .db $00, $2F, $01, $C8, $FF                                                 ; $13FE62.FE66

; battle_formation_always_play_fanfare ($13:FE67)
;
; A list of formations for which the victory fanfare should always play if the
; party is victorious, even if the formation doesn't change the music when
; starting. Yes, this is a weird way to define this.
battle_formation_always_play_fanfare_data:
    .dw BATTLE_FORMATION_ELEMENTS                                               ; $13FE67.FE68
    .dw BATTLE_FORMATION_CPU                                                    ; $13FE69.FE6A
    .dw BATTLE_FORMATION_MOMBOMB                                                ; $13FE6B.FE6C
    .dw BATTLE_FORMATION_DARK_ELF                                               ; $13FE6D.FE6E
    .dw BATTLE_FORMATION_CALBRENA                                               ; $13FE6F.FE70
    .dw BATTLE_FORMATION_EVILWALL                                               ; $13FE71.FE72
    .dw BATTLE_FORMATION_GOLBEZ_SHADOW                                          ; $13FE73.FE74
    .db $FF                                                                     ; $13FE75

; battle_formation_skip_victory_animation_data ($13:FE76)
;
; A list of formations for which the victory animation should be skipped.
battle_formation_skip_victory_animation_data:
    .dw BATTLE_FORMATION_FLOATEYE_INTRO                                         ; $13FE76.FE77
    .dw BATTLE_FORMATION_RAVEN_INTRO                                            ; $13FE78.FE79
    .dw BATTLE_FORMATION_IMP_CAP_YANG                                           ; $13FE7A.FE7B
    .dw BATTLE_FORMATION_GUARDS                                                 ; $13FE7C.FE7D
    .dw BATTLE_FORMATION_LUGAE1                                                 ; $13FE7E.FE7F
    .dw BATTLE_FORMATION_EBLAN                                                  ; $13FE80.FE81
    .dw BATTLE_FORMATION_GOLBEZ_TELLAH                                          ; $13FE82.FE83
    .dw BATTLE_FORMATION_ZEROMUS_INITIAL                                        ; $13FE84.FE85
    .dw BATTLE_FORMATION_ZEROMUS_FINAL                                          ; $13FE86.FE87
    .db $FF                                                                     ; $13FE88

; battle_command_timer_data ($13:FE89)
;
; For each batttle command, provides a value that is used to determine the
; delay for the command. The relative speed of the character is divided by
; values less than $80 or multiplied by values of $80 and above (after masking
; out the high bit).
battle_command_timer_data:
    .db 0                                                                       ; $13FE89 | $00: Fight
    .db 0                                                                       ; $13FE8A | $01: Item
    .db 0                                                                       ; $13FE8B | $02: White
    .db 0                                                                       ; $13FE8D | $04: Call
    .db 0                                                                       ; $13FE8C | $03: Black
    .db 2                                                                       ; $13FE8E | $05: Dark Wave
    .db 1                                                                       ; $13FE8F | $06: Jump
    .db 1                                                                       ; $13FE90 | $07: Recall
    .db 0                                                                       ; $13FE91 | $08: Sing
    .db 0                                                                       ; $13FE92 | $09: Hide
    .db 4                                                                       ; $13FE93 | $0A: Heal
    .db 2                                                                       ; $13FE94 | $0B: Pray
    .db 4                                                                       ; $13FE95 | $0C: Aim
    .db 0                                                                       ; $13FE96 | $0D: Store
.if FF4_EASYTYPE == 1
.if FF4_VERSION != "USA"
    .db 2                                                                       ; $13FE97 | $0E: Kick (USA Rev 1 and Easytype)
.else
    .db 1 | %10000000                                                           ; $13FE97 | $0E: Kick (other versions)
.endif
.else
    .db 1 | %10000000                                                           ; $13FE97 | $0E: Kick (other versions)
.endif
    .db 0                                                                       ; $13FE98 | $0F: Endure
    .db 0                                                                       ; $13FE99 | $10: Twin
    .db 0                                                                       ; $13FE9A | $11: Bluff
    .db 0                                                                       ; $13FE9B | $12: Cry
    .db 0                                                                       ; $13FE9C | $13: Cover
    .db 0                                                                       ; $13FE9D | $14: Peep
    .db 0                                                                       ; $13FE9E | $15: <unused>
    .db 4                                                                       ; $13FE9F | $16: Dart
    .db 0                                                                       ; $13FEA0 | $17: Sneak
    .db 0                                                                       ; $13FEA1 | $18: Ninja
    .db 0                                                                       ; $13FEA2 | $19: Bless
    .db 0                                                                       ; $13FEA3 | $1A: Change
    .db 0                                                                       ; $13FEA4 | $1B: Parry
    .db 0                                                                       ; $13FEA5 | $1C: Show
    .db 0                                                                       ; $13FEA6 | $1D: Off
    .db 0                                                                       ; $13FEA7 | $1E: <unnamed> (Land)
.if FF4_EASYTYPE == 1
.if FF4_VERSION == "USA"
    .db 2 | %10000000                                                           ; $13FEA8 | $1F: <unnamed> (Release) (USA/Japan)
    .db 1 | %10000000                                                           ; $13FEA9 | $20: <unnamed> (Twin Cast) (USA)
.else
    .db 1                                                                       ; $13FEA8 | $1F: <unnamed> (Release) (USA Rev 1 and Easytype)
    .db 2                                                                       ; $13FEA9 | $20: <unnamed> (Twin Cast) (USA Rev 1 and Easytype)
.endif
.else
    .db 2 | %10000000                                                           ; $13FEA8 | $1F: <unnamed> (Release) (USA/Japan)
    .db 3 | %10000000                                                           ; $13FEA9 | $20: <unnamed> (Twin Cast) (Japan)
.endif
    .db 0                                                                       ; $13FEAA | $21: <unnamed> (Wait)
    .db 10 | %10000000                                                          ; $13FEAB | $22: <unnamed> (Bless Off)

; equipment_stat_modifier_data ($13:FEAC)
;
; This table defines the possible values for equipment stat modifiers. Each
; piece of equipment can select one of these sets, and then each stat can use
; either of the two choices (with the second choice as default) in the set to
; create numerous combinations.
equipment_stat_modifier_data:
    .db  +3,  +0                                                                ; $13FEAC
    .db  +5,  +0                                                                ; $13FEAE
    .db +10,  +0                                                                ; $13FEB0
    .db +15,  +0                                                                ; $13FEB2
    .db  +5,  -5                                                                ; $13FEB4
    .db +10, -10                                                                ; $13FEB6
    .db +15, -15                                                                ; $13FEB8
    .db  +5, -10                                                                ; $13FEBA

; battle_spell_disable_name_display_data ($13:FEBC)
;
; For each spell, has one bit that is set to one if the display of that spell's
; name should be suppressed. Bits are ordered such that the highest bit
; corresponds to the lowest spell ID in that range.
battle_spell_disable_name_display_data:
    .db %00000000                                                               ; $13FEBC | $00.07
    .db %00000000                                                               ; $13FEBD | $08.0F
    .db %00000000                                                               ; $13FEBE | $10.17
    .db %00000000                                                               ; $13FEBF | $18.1F
    .db %00000000                                                               ; $13FEC0 | $20.27
    .db %00000000                                                               ; $13FEC1 | $28.2F
    .db %00000000                                                               ; $13FEC2 | $30.37
    .db %00000000                                                               ; $13FEC3 | $38.3F
    .db %00000000                                                               ; $13FEC4 | $40.47
    .db %00000000                                                               ; $13FEC5 | $48.4F
    .db %00000000                                                               ; $13FEC6 | $50.57
    .db %00000000                                                               ; $13FEC7 | $58.5F
    .db %00000000                                                               ; $13FEC8 | $60.67
    .db %00000000                                                               ; $13FEC9 | $68.6F
    .db %00010010                                                               ; $13FECA | $70.77
    .db %00010010                                                               ; $13FECB | $78.7F
    .db %00000000                                                               ; $13FECC | $80.87
    .db %00000011                                                               ; $13FECD | $88.8F
    .db %00010000                                                               ; $13FECE | $90.97
    .db %00000000                                                               ; $13FECF | $98.9F
    .db %00000000                                                               ; $13FED0 | $A0.A7
    .db %01100111                                                               ; $13FED1 | $A8.AF
    .db %11111111                                                               ; $13FED2 | $B0.B7
    .db %11111111                                                               ; $13FED3 | $B8.BF

; battle_spell_disable_monster_flash_data ($13:FED4)
;
; For each spell, has one bit that is set to one if the flash when a monster
; uses that spell should be suppressed. Bits are ordered such that the highest
; bit corresponds to the lowest spell ID in that range.
battle_spell_disable_monster_flash_data:
    .db %00000000                                                               ; $13FED4 | $00.07
    .db %00000000                                                               ; $13FED5 | $08.0F
    .db %00000000                                                               ; $13FED6 | $10.17
    .db %00000000                                                               ; $13FED7 | $18.1F
    .db %00000000                                                               ; $13FED8 | $20.27
    .db %00000000                                                               ; $13FED9 | $28.2F
    .db %00000000                                                               ; $13FEDA | $30.37
    .db %00000000                                                               ; $13FEDB | $38.3F
    .db %00000000                                                               ; $13FEDC | $40.47
    .db %00000000                                                               ; $13FEDD | $48.4F
    .db %00000000                                                               ; $13FEDE | $50.57
    .db %00000000                                                               ; $13FEDF | $58.5F
    .db %00000000                                                               ; $13FEE0 | $60.67
    .db %00000000                                                               ; $13FEE1 | $68.6F
    .db %00010001                                                               ; $13FEE2 | $70.77
    .db %00010110                                                               ; $13FEE3 | $78.7F
    .db %01010001                                                               ; $13FEE4 | $80.87
    .db %00001101                                                               ; $13FEE5 | $88.8F
    .db %00000100                                                               ; $13FEE6 | $90.97
    .db %00000000                                                               ; $13FEE7 | $98.9F
    .db %00000000                                                               ; $13FEE8 | $A0.A7
    .db %00000100                                                               ; $13FEE9 | $A8.AF
    .db %00000000                                                               ; $13FEEA | $B0.B7
    .db %00000000                                                               ; $13FEEB | $B8.BF

; battle_grimoire_call_data ($13:FEEC)
;
; Data on the Call spells that can be used by the Grimoire item. Each spell uses
; one byte. The uppermost bit is set to 1 if the spell targets a single monster.
; The remaining seven bits are the appropriate spell number.
battle_grimoire_call_data:
    .db SPELL_CALL_CHOCOBO | SPELL_CALL_SINGLE_TARGET                           ; $13FEEC | $00
    .db SPELL_CALL_SHIVA                                                        ; $13FEED | $01
    .db SPELL_CALL_INDRA                                                        ; $13FEEE | $02
    .db SPELL_CALL_JINN                                                         ; $13FEEF | $03
    .db SPELL_CALL_TITAN                                                        ; $13FEF0 | $04
    .db SPELL_CALL_MIST                                                         ; $13FEF1 | $05
    .db SPELL_CALL_SYLPH | SPELL_CALL_SINGLE_TARGET                             ; $13FEF2 | $06
    .db SPELL_CALL_ODIN                                                         ; $13FEF3 | $07
    .db SPELL_CALL_LEVIATAN                                                     ; $13FEF4 | $08
    .db SPELL_CALL_BAHAMUT                                                      ; $13FEF5 | $09

; bit_unset_mask_data ($13:FEF6)
;
; Data used to unset a single bit from a value. It is ordered such that the
; lowest value will unset the highest bit.
bit_unset_mask_data:
    .db %01111111                                                               ; $13FEF6
    .db %10111111                                                               ; $13FEF7
    .db %11011111                                                               ; $13FEF8
    .db %11101111                                                               ; $13FEF9
    .db %11110111                                                               ; $13FEFA
    .db %11111011                                                               ; $13FEFB
    .db %11111101                                                               ; $13FEFC
    .db %11111110                                                               ; $13FEFD

; bit_mask_data ($13:FEFE)
;
; Data used to mask out a single bit from a value. It is ordered such that the
; lowest value will mask out the highest bit.
bit_mask_data:
    .db %10000000                                                               ; $13FEFE
    .db %01000000                                                               ; $13FEFF
    .db %00100000                                                               ; $13FF00
    .db %00010000                                                               ; $13FF01
    .db %00001000                                                               ; $13FF02
    .db %00000100                                                               ; $13FF03
    .db %00000010                                                               ; $13FF04
    .db %00000001                                                               ; $13FF05

; battle_speed_delay_data ($13:FF06)
;
; For each battle speed, provides the number of extra frames to wait in between
; each round of battle processing. It will always wait at least one frame. This
; is in addition to that, and doesn't include any dialog or other graphical
; processing or anything else that can cause delays.
battle_speed_delay_data:
    .db  0                                                                      ; $13FF06 | BS1
    .db  1                                                                      ; $13FF07 | BS2
    .db  3                                                                      ; $13FF08 | BS3
    .db  5                                                                      ; $13FF09 | BS4
    .db  7                                                                      ; $13FF0A | BS5
    .db 10                                                                      ; $13FF0B | BS6

; battle_audio_track_data ($13:FF0C)
;
; For battle music entries zero through two, provides the track number to play
; in battle.
battle_audio_track_data:
    .db AUDIO_TRACK_BATTLE_1                                                    ; $13FF0C
    .db AUDIO_TRACK_BATTLE_2                                                    ; $13FF0D
    .db AUDIO_TRACK_BATTLE_WITH_THE_FOUR_FIENDS                                 ; $13FF0E

; battle_run_delay_data ($13:FF0F)
;
; For monsters level 97 through 99, defines the extra delay applied to running
; from those monsters.
battle_run_delay_data:
    .db  3                                                                      ; $13FF0F | Level 97
    .db  7                                                                      ; $13FF10 | Level 98
    .db 10                                                                      ; $13FF11 | Level 99

; play_song_and_verify ($13:FF12)
;
; Given a track number in the accumulator, tells the audio system to play that
; track. Verifies that the current mode and track is changed.
;
; TODO: This seems pointless, since a cursory glance at the actual audio
;       routines suggests the checks will never be false.
play_song_and_verify:
    STA <r_play_song_and_verify_tmp                                             ; $13FF12 | Save the audio track to a temporary variable.
    STZ r_play_audio_arg_mode.w                                                 ; $13FF14 |\
    STZ r_play_audio_arg_track.w                                                ; $13FF17 | | Reset some audio-related variables.
    STZ r_play_audio_current_track.w                                            ; $13FF1A |/
-   LDA <r_play_song_and_verify_tmp                                             ; $13FF1D |\
    STA r_play_audio_arg_track.w                                                ; $13FF1F | | Tell the audio system to play the given track number.
    LDA #AUDIO_MODE_NORMAL.b                                                    ; $13FF22 | |
    STA r_play_audio_arg_mode.w                                                 ; $13FF24 | |
    JSL bank04.play_audio                                                       ; $13FF27 |/
    LDA r_play_audio_current_track.w                                            ; $13FF2B |\
    CMP <r_play_song_and_verify_tmp                                             ; $13FF2E | | Repeat the previous call until the current mode and track is as
    BNE -                                                                       ; $13FF30 | | passed.
    LDA r_play_audio_current_mode.w                                             ; $13FF32 | |
    CMP #AUDIO_MODE_NORMAL.b                                                    ; $13FF35 | | TODO: Is it even possible for the call to fail, or is this pointles?
    BNE -                                                                       ; $13FF37 |/
    RTL                                                                         ; $13FF39

; battle_zero_hp_if_swoon ($13:FF3A)
;
; Loops through the five character slots, setting their HP to zero if they have
; the swoon status.
battle_zero_hp_if_swoon:
    TDC                                                                         ; $13FF3A |\
    TAX                                                                         ; $13FF3B | | Initialize the X and Y registers to zero.
    TAY                                                                         ; $13FF3C |/
-   LDA r_battle_slot_empty.w,Y                                                 ; $13FF3D |\ Skip this slot if it's empty.
    BNE +                                                                       ; $13FF40 |/
    LDA r_character_battle.1.status_1.w,X                                       ; $13FF42 |\
    BPL +                                                                       ; $13FF45 | | If the character has the swoon status, set their HP to zero.
    STZ r_character_battle.1.hp_lo.w,X                                          ; $13FF47 | |
    STZ r_character_battle.1.hp_hi.w,X                                          ; $13FF4A |/
+   REP #FLAG_P_ACCUMULATOR                                                     ; $13FF4D |\
    TXA                                                                         ; $13FF4F | | Increment the offset to move to the next character.
    CLC                                                                         ; $13FF50 | |
    ADC #_sizeof_character_battle.w                                             ; $13FF51 | |
    TAX                                                                         ; $13FF54 | |
    TDC                                                                         ; $13FF55 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13FF56 |/
    INY                                                                         ; $13FF58 |\
    CPY #5.w                                                                    ; $13FF59 | | Loop until all five slots have been checked.
    BNE -                                                                       ; $13FF5C |/
    RTL                                                                         ; $13FF5E

; battle_divide_exp ($13:FF5F)
;
; Given a 24-bit number representing the total amount of experience earned in
; $3591 and an 8-bit divisor in $AB, returns the 24-bit quotient of those two
; numbers in $AD.
battle_divide_exp:
    LDX <r_battle_generic_tmp_2                                                 ; $13FF5F |\ Preserve the divisor argument.
    PHX                                                                         ; $13FF61 |/
    LDX #15.w                                                                   ; $13FF62 |\
-   STZ <r_battle_generic_tmp_1_lo,X                                            ; $13FF65 | | Zero out 16 bytes of RAM used for the upcoming calculation.
    DEX                                                                         ; $13FF67 | |
    BPL -                                                                       ; $13FF68 |/
    PLX                                                                         ; $13FF6A |\ Store the divisor in a temporary location.
    STX <r_battle_divide_exp_tmp_divisor_lo                                     ; $13FF6B |/
    LDX r_battle_spoils_exp_lo.w                                                ; $13FF6D |\
    STX <r_battle_divide_exp_tmp_exp_lo                                         ; $13FF70 | | Save the total EXP to another variable.
    LDA r_battle_spoils_exp_hi.w                                                ; $13FF72 | |
    STA <r_battle_divide_exp_tmp_exp_hi                                         ; $13FF75 |/
    REP #FLAG_P_ACCUMULATOR                                                     ; $13FF77 |\
    CLC                                                                         ; $13FF79 | | Initialize the X register to 32.
    LDX #32.w                                                                   ; $13FF7A |/
-   ROL <r_battle_divide_exp_tmp_exp_lo                                         ; $13FF7D |\
    ROL <r_battle_divide_exp_tmp_exp_hi                                         ; $13FF7F | | Rotate the next bit into the remainder variable.
    ROL <r_battle_divide_exp_tmp_remainder_lo                                   ; $13FF81 | |
    ROL <r_battle_divide_exp_tmp_remainder_hi                                   ; $13FF83 |/
    SEC                                                                         ; $13FF85 |\
    LDA <r_battle_divide_exp_tmp_remainder_lo                                   ; $13FF86 | | Attempt to subtract the divisor from the current remainder.
    SBC <r_battle_divide_exp_tmp_divisor_lo                                     ; $13FF88 | |
    STA <r_battle_divide_exp_tmp_remainder_lo                                   ; $13FF8A | |
    LDA <r_battle_divide_exp_tmp_remainder_hi                                   ; $13FF8C | |
    SBC <r_battle_divide_exp_tmp_divisor_hi                                     ; $13FF8E | |
    STA <r_battle_divide_exp_tmp_remainder_hi                                   ; $13FF90 |/
    BCS +                                                                       ; $13FF92 |\
    LDA <r_battle_divide_exp_tmp_remainder_lo                                   ; $13FF94 | | If unable, add the divisor back in.
    ADC <r_battle_divide_exp_tmp_divisor_lo                                     ; $13FF96 | |
    STA <r_battle_divide_exp_tmp_remainder_lo                                   ; $13FF98 | |
    LDA <r_battle_divide_exp_tmp_remainder_hi                                   ; $13FF9A | |
    ADC <r_battle_divide_exp_tmp_divisor_hi                                     ; $13FF9C | |
    STA <r_battle_divide_exp_tmp_remainder_hi                                   ; $13FF9E | |
    CLC                                                                         ; $13FFA0 |/
+   ROL <r_battle_divide_exp_tmp_result_lo                                      ; $13FFA1 |\ Rotate the result bit into the result.
    ROL <r_battle_divide_exp_tmp_result_hi                                      ; $13FFA3 |/
    DEX                                                                         ; $13FFA5 |\ Loop until all 32 bits have been considered.
    BNE -                                                                       ; $13FFA6 |/
    LDA <r_battle_divide_exp_tmp_result_lo                                      ; $13FFA8 |\
    STA <r_battle_generic_tmp_3                                                 ; $13FFAA | | Copy the result into the result bytes.
    LDA <r_battle_divide_exp_tmp_result_hi                                      ; $13FFAC | |
    STA <r_battle_generic_tmp_4                                                 ; $13FFAE | |
    TDC                                                                         ; $13FFB0 | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13FFB1 |/
    RTL                                                                         ; $13FFB3

; battle_check_fusoya_bless_status ($13:FFB4)
;
; Checks each of the five character slots for FuSoYa, and if he is found,
; ensures that he does not have any of the following statuses: swoon, stone,
; paralyze, sleep, charm or berserk. If he does, the bless timer is reset to
; $FF, which disables it.
battle_check_fusoya_bless_status:
    LDY #5.w                                                                    ; $13FFB4 | Initialize the Y register to five to loop through character slots.
    TDC                                                                         ; $13FFB7 |\ Initialize the X register to zero.
    TAX                                                                         ; $13FFB8 |/
-   LDA r_character_battle.1.id.w,X                                             ; $13FFB9 |\
    AND #%00011111.b                                                            ; $13FFBC | | Skip this slot if the character is not FuSoYa.
    CMP #CHARACTER_FUSOYA.b                                                     ; $13FFBE | |
    BNE ++                                                                      ; $13FFC0 |/
    LDA r_character_battle.1.status_1.w,X                                       ; $13FFC2 |\
    AND #(STATUS_1_SWOON | STATUS_1_STONE).b                                    ; $13FFC5 | | If the character in this slot is FuSoYa and he is swooned, stoned,
    BNE +                                                                       ; $13FFC7 | | paralyzed, sleeping, charmed or berserked, disable the bless
    LDA r_character_battle.1.status_2.w,X                                       ; $13FFC9 | | counter by setting it to $FF. Branch to the end of the function if
    AND #%00111100.b                                                            ; $13FFCC | | FuSoYa has been found regardless of his status.
    BEQ +++                                                                     ; $13FFCE | |
+   LDA #$FF.b                                                                  ; $13FFD0 | |
    STA r_battle_fusoya_bless_counter.w                                         ; $13FFD2 | |
    BRA +++                                                                     ; $13FFD5 |/
++  REP #FLAG_P_ACCUMULATOR                                                     ; $13FFD7 |\
    TXA                                                                         ; $13FFD9 | | Increment the X register to move to the next slot.
    CLC                                                                         ; $13FFDA | |
    ADC #_sizeof_character_battle                                               ; $13FFDB | |
    TAX                                                                         ; $13FFDE | |
    TDC                                                                         ; $13FFDF | |
    SEP #FLAG_P_ACCUMULATOR                                                     ; $13FFE0 |/
    DEY                                                                         ; $13FFE2 |\ Loop until all five slots have been processed.
    BNE -                                                                       ; $13FFE3 |/
+++ RTL                                                                         ; $13FFE5

UNUSED_13FFE6:
    .dsb 17 $FF                                                                 ; $13FFE6.FFF6

; ending_animate_legend ($13:FFF7)
;
; Proxy function to call special_animate_ending_legend.
ending_animate_legend:
    JMP special_animate_ending_legend                                           ; $13FFF7

; ending_animate_moon ($13:FFFA)
;
; Proxy function to call special_animate_ending_moon.
ending_animate_moon:
    JMP _special_animate_ending_moon                                            ; $13FFFA

; ending_animate_credits ($13:FFFD)
;
; Proxy function to call special_animate_ending_credits.
ending_animate_credits:
    JMP _special_animate_ending_credits                                         ; $13FFFD

.ends
